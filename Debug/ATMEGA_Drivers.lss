
ATMEGA_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00003316  000033aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a4  008000a4  000033ee  2**0
                  ALLOC
  3 .stab         00003d8c  00000000  00000000  000033f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004851  00000000  00000000  0000717c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bb0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f94d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001011b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 19 	call	0x3202	; 0x3202 <main>
      8a:	0c 94 89 19 	jmp	0x3312	; 0x3312 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_DIO_SetPinDirection>:

/**********************************Pin APIs************************************/

#if(APIs_CONFIG == PIN_APIs_CONFIG || APIs_CONFIG == PORT_PIN_APIs_CONFIG)
Std_ReturnType MCAL_DIO_SetPinDirection(const Pin_Conig_t *Copy_PinInfo)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
     b5e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PinInfo->Pin_Num > DIO_PIN7)
     b60:	ea 81       	ldd	r30, Y+2	; 0x02
     b62:	fb 81       	ldd	r31, Y+3	; 0x03
     b64:	80 81       	ld	r24, Z
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	87 70       	andi	r24, 0x07	; 7
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	88 30       	cpi	r24, 0x08	; 8
     b72:	91 05       	cpc	r25, r1
     b74:	14 f0       	brlt	.+4      	; 0xb7a <MCAL_DIO_SetPinDirection+0x34>
    {
        Local_ErrorStatus = E_NOT_OK;
     b76:	19 82       	std	Y+1, r1	; 0x01
     b78:	c6 c2       	rjmp	.+1420   	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
    }
    else
    {
        switch(Copy_PinInfo->PORT_ID)
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	80 81       	ld	r24, Z
     b80:	83 70       	andi	r24, 0x03	; 3
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3d 87       	std	Y+13, r19	; 0x0d
     b88:	2c 87       	std	Y+12, r18	; 0x0c
     b8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <MCAL_DIO_SetPinDirection+0x50>
     b94:	bf c0       	rjmp	.+382    	; 0xd14 <MCAL_DIO_SetPinDirection+0x1ce>
     b96:	2c 85       	ldd	r18, Y+12	; 0x0c
     b98:	3d 85       	ldd	r19, Y+13	; 0x0d
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	31 05       	cpc	r19, r1
     b9e:	2c f4       	brge	.+10     	; 0xbaa <MCAL_DIO_SetPinDirection+0x64>
     ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	71 f0       	breq	.+28     	; 0xbc4 <MCAL_DIO_SetPinDirection+0x7e>
     ba8:	ad c2       	rjmp	.+1370   	; 0x1104 <MCAL_DIO_SetPinDirection+0x5be>
     baa:	2c 85       	ldd	r18, Y+12	; 0x0c
     bac:	3d 85       	ldd	r19, Y+13	; 0x0d
     bae:	22 30       	cpi	r18, 0x02	; 2
     bb0:	31 05       	cpc	r19, r1
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <MCAL_DIO_SetPinDirection+0x70>
     bb4:	57 c1       	rjmp	.+686    	; 0xe64 <MCAL_DIO_SetPinDirection+0x31e>
     bb6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <MCAL_DIO_SetPinDirection+0x7c>
     bc0:	f9 c1       	rjmp	.+1010   	; 0xfb4 <MCAL_DIO_SetPinDirection+0x46e>
     bc2:	a0 c2       	rjmp	.+1344   	; 0x1104 <MCAL_DIO_SetPinDirection+0x5be>
        {
            case DIO_PORTA:
                Local_ErrorStatus = E_OK;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinInfo->Pin_Direction)
     bc8:	ea 81       	ldd	r30, Y+2	; 0x02
     bca:	fb 81       	ldd	r31, Y+3	; 0x03
     bcc:	80 81       	ld	r24, Z
     bce:	82 95       	swap	r24
     bd0:	86 95       	lsr	r24
     bd2:	87 70       	andi	r24, 0x07	; 7
     bd4:	83 70       	andi	r24, 0x03	; 3
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	3b 87       	std	Y+11, r19	; 0x0b
     bdc:	2a 87       	std	Y+10, r18	; 0x0a
     bde:	8a 85       	ldd	r24, Y+10	; 0x0a
     be0:	9b 85       	ldd	r25, Y+11	; 0x0b
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 05       	cpc	r25, r1
     be6:	21 f1       	breq	.+72     	; 0xc30 <MCAL_DIO_SetPinDirection+0xea>
     be8:	2a 85       	ldd	r18, Y+10	; 0x0a
     bea:	3b 85       	ldd	r19, Y+11	; 0x0b
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <MCAL_DIO_SetPinDirection+0xae>
     bf2:	56 c0       	rjmp	.+172    	; 0xca0 <MCAL_DIO_SetPinDirection+0x15a>
     bf4:	8a 85       	ldd	r24, Y+10	; 0x0a
     bf6:	9b 85       	ldd	r25, Y+11	; 0x0b
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	09 f0       	breq	.+2      	; 0xbfe <MCAL_DIO_SetPinDirection+0xb8>
     bfc:	89 c0       	rjmp	.+274    	; 0xd10 <MCAL_DIO_SetPinDirection+0x1ca>
                {
                    case DIO_PIN_OUTPUT:
                        SET_BIT(DDRA_REG.DDRA_REGISTER, Copy_PinInfo->Pin_Num);
     bfe:	aa e3       	ldi	r26, 0x3A	; 58
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e3       	ldi	r30, 0x3A	; 58
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	80 81       	ld	r24, Z
     c10:	86 95       	lsr	r24
     c12:	86 95       	lsr	r24
     c14:	87 70       	andi	r24, 0x07	; 7
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 2e       	mov	r0, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <MCAL_DIO_SetPinDirection+0xe0>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <MCAL_DIO_SetPinDirection+0xdc>
     c2a:	84 2b       	or	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	6b c2       	rjmp	.+1238   	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT:
                        CLEAR_BIT(DDRA_REG.DDRA_REGISTER, Copy_PinInfo->Pin_Num);
     c30:	aa e3       	ldi	r26, 0x3A	; 58
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ea e3       	ldi	r30, 0x3A	; 58
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	ea 81       	ldd	r30, Y+2	; 0x02
     c3e:	fb 81       	ldd	r31, Y+3	; 0x03
     c40:	80 81       	ld	r24, Z
     c42:	86 95       	lsr	r24
     c44:	86 95       	lsr	r24
     c46:	87 70       	andi	r24, 0x07	; 7
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <MCAL_DIO_SetPinDirection+0x110>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <MCAL_DIO_SetPinDirection+0x10c>
     c5a:	80 95       	com	r24
     c5c:	84 23       	and	r24, r20
     c5e:	8c 93       	st	X, r24
                        SET_BIT(PORTA_REG.PORTA_REGISTER, Copy_PinInfo->Pin_Num);
     c60:	ab e3       	ldi	r26, 0x3B	; 59
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	eb e3       	ldi	r30, 0x3B	; 59
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	ea 81       	ldd	r30, Y+2	; 0x02
     c6e:	fb 81       	ldd	r31, Y+3	; 0x03
     c70:	80 81       	ld	r24, Z
     c72:	86 95       	lsr	r24
     c74:	86 95       	lsr	r24
     c76:	87 70       	andi	r24, 0x07	; 7
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 2e       	mov	r0, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <MCAL_DIO_SetPinDirection+0x142>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	0a 94       	dec	r0
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <MCAL_DIO_SetPinDirection+0x13e>
     c8c:	84 2b       	or	r24, r20
     c8e:	8c 93       	st	X, r24
                        SET_BIT(SFIOR_REG, PUB_BIT);
     c90:	a0 e5       	ldi	r26, 0x50	; 80
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e0 e5       	ldi	r30, 0x50	; 80
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	84 60       	ori	r24, 0x04	; 4
     c9c:	8c 93       	st	X, r24
     c9e:	33 c2       	rjmp	.+1126   	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT_PULL_UP:
                        CLEAR_BIT(DDRA_REG.DDRA_REGISTER, Copy_PinInfo->Pin_Num);
     ca0:	aa e3       	ldi	r26, 0x3A	; 58
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ea e3       	ldi	r30, 0x3A	; 58
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	48 2f       	mov	r20, r24
     cac:	ea 81       	ldd	r30, Y+2	; 0x02
     cae:	fb 81       	ldd	r31, Y+3	; 0x03
     cb0:	80 81       	ld	r24, Z
     cb2:	86 95       	lsr	r24
     cb4:	86 95       	lsr	r24
     cb6:	87 70       	andi	r24, 0x07	; 7
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <MCAL_DIO_SetPinDirection+0x180>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	2a 95       	dec	r18
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <MCAL_DIO_SetPinDirection+0x17c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
                        SET_BIT(PORTA_REG.PORTA_REGISTER, Copy_PinInfo->Pin_Num);
     cd0:	ab e3       	ldi	r26, 0x3B	; 59
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	eb e3       	ldi	r30, 0x3B	; 59
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	ea 81       	ldd	r30, Y+2	; 0x02
     cde:	fb 81       	ldd	r31, Y+3	; 0x03
     ce0:	80 81       	ld	r24, Z
     ce2:	86 95       	lsr	r24
     ce4:	86 95       	lsr	r24
     ce6:	87 70       	andi	r24, 0x07	; 7
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <MCAL_DIO_SetPinDirection+0x1b2>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <MCAL_DIO_SetPinDirection+0x1ae>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
                        CLEAR_BIT(SFIOR_REG, PUB_BIT);
     d00:	a0 e5       	ldi	r26, 0x50	; 80
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e0 e5       	ldi	r30, 0x50	; 80
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8b 7f       	andi	r24, 0xFB	; 251
     d0c:	8c 93       	st	X, r24
     d0e:	fb c1       	rjmp	.+1014   	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
     d10:	19 82       	std	Y+1, r1	; 0x01
     d12:	f9 c1       	rjmp	.+1010   	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                }
                break;
            case DIO_PORTB:
                Local_ErrorStatus = E_OK;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinInfo->Pin_Direction)
     d18:	ea 81       	ldd	r30, Y+2	; 0x02
     d1a:	fb 81       	ldd	r31, Y+3	; 0x03
     d1c:	80 81       	ld	r24, Z
     d1e:	82 95       	swap	r24
     d20:	86 95       	lsr	r24
     d22:	87 70       	andi	r24, 0x07	; 7
     d24:	83 70       	andi	r24, 0x03	; 3
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	39 87       	std	Y+9, r19	; 0x09
     d2c:	28 87       	std	Y+8, r18	; 0x08
     d2e:	88 85       	ldd	r24, Y+8	; 0x08
     d30:	99 85       	ldd	r25, Y+9	; 0x09
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	21 f1       	breq	.+72     	; 0xd80 <MCAL_DIO_SetPinDirection+0x23a>
     d38:	28 85       	ldd	r18, Y+8	; 0x08
     d3a:	39 85       	ldd	r19, Y+9	; 0x09
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <MCAL_DIO_SetPinDirection+0x1fe>
     d42:	56 c0       	rjmp	.+172    	; 0xdf0 <MCAL_DIO_SetPinDirection+0x2aa>
     d44:	88 85       	ldd	r24, Y+8	; 0x08
     d46:	99 85       	ldd	r25, Y+9	; 0x09
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	09 f0       	breq	.+2      	; 0xd4e <MCAL_DIO_SetPinDirection+0x208>
     d4c:	89 c0       	rjmp	.+274    	; 0xe60 <MCAL_DIO_SetPinDirection+0x31a>
                {
                    case DIO_PIN_OUTPUT:
                        SET_BIT(DDRB_REG.DDRB_REGISTER, Copy_PinInfo->Pin_Num);
     d4e:	a7 e3       	ldi	r26, 0x37	; 55
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e7 e3       	ldi	r30, 0x37	; 55
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	80 81       	ld	r24, Z
     d60:	86 95       	lsr	r24
     d62:	86 95       	lsr	r24
     d64:	87 70       	andi	r24, 0x07	; 7
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <MCAL_DIO_SetPinDirection+0x230>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <MCAL_DIO_SetPinDirection+0x22c>
     d7a:	84 2b       	or	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	c3 c1       	rjmp	.+902    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT:
                        CLEAR_BIT(DDRB_REG.DDRB_REGISTER, Copy_PinInfo->Pin_Num);
     d80:	a7 e3       	ldi	r26, 0x37	; 55
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e7 e3       	ldi	r30, 0x37	; 55
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	ea 81       	ldd	r30, Y+2	; 0x02
     d8e:	fb 81       	ldd	r31, Y+3	; 0x03
     d90:	80 81       	ld	r24, Z
     d92:	86 95       	lsr	r24
     d94:	86 95       	lsr	r24
     d96:	87 70       	andi	r24, 0x07	; 7
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <MCAL_DIO_SetPinDirection+0x260>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <MCAL_DIO_SetPinDirection+0x25c>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
                        SET_BIT(PORTB_REG.PORTB_REGISTER, Copy_PinInfo->Pin_Num);
     db0:	a8 e3       	ldi	r26, 0x38	; 56
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e8 e3       	ldi	r30, 0x38	; 56
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	ea 81       	ldd	r30, Y+2	; 0x02
     dbe:	fb 81       	ldd	r31, Y+3	; 0x03
     dc0:	80 81       	ld	r24, Z
     dc2:	86 95       	lsr	r24
     dc4:	86 95       	lsr	r24
     dc6:	87 70       	andi	r24, 0x07	; 7
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MCAL_DIO_SetPinDirection+0x292>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <MCAL_DIO_SetPinDirection+0x28e>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
                        SET_BIT(SFIOR_REG, PUB_BIT);
     de0:	a0 e5       	ldi	r26, 0x50	; 80
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e0 e5       	ldi	r30, 0x50	; 80
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	84 60       	ori	r24, 0x04	; 4
     dec:	8c 93       	st	X, r24
     dee:	8b c1       	rjmp	.+790    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT_PULL_UP:
                        CLEAR_BIT(DDRB_REG.DDRB_REGISTER, Copy_PinInfo->Pin_Num);
     df0:	a7 e3       	ldi	r26, 0x37	; 55
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e7 e3       	ldi	r30, 0x37	; 55
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	ea 81       	ldd	r30, Y+2	; 0x02
     dfe:	fb 81       	ldd	r31, Y+3	; 0x03
     e00:	80 81       	ld	r24, Z
     e02:	86 95       	lsr	r24
     e04:	86 95       	lsr	r24
     e06:	87 70       	andi	r24, 0x07	; 7
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <MCAL_DIO_SetPinDirection+0x2d0>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	2a 95       	dec	r18
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <MCAL_DIO_SetPinDirection+0x2cc>
     e1a:	80 95       	com	r24
     e1c:	84 23       	and	r24, r20
     e1e:	8c 93       	st	X, r24
                        SET_BIT(PORTB_REG.PORTB_REGISTER, Copy_PinInfo->Pin_Num);
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	ea 81       	ldd	r30, Y+2	; 0x02
     e2e:	fb 81       	ldd	r31, Y+3	; 0x03
     e30:	80 81       	ld	r24, Z
     e32:	86 95       	lsr	r24
     e34:	86 95       	lsr	r24
     e36:	87 70       	andi	r24, 0x07	; 7
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <MCAL_DIO_SetPinDirection+0x302>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <MCAL_DIO_SetPinDirection+0x2fe>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
                        CLEAR_BIT(SFIOR_REG, PUB_BIT);
     e50:	a0 e5       	ldi	r26, 0x50	; 80
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e0 e5       	ldi	r30, 0x50	; 80
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8b 7f       	andi	r24, 0xFB	; 251
     e5c:	8c 93       	st	X, r24
     e5e:	53 c1       	rjmp	.+678    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
     e60:	19 82       	std	Y+1, r1	; 0x01
     e62:	51 c1       	rjmp	.+674    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                }
                break;
            case DIO_PORTC:
                Local_ErrorStatus = E_OK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinInfo->Pin_Direction)
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	80 81       	ld	r24, Z
     e6e:	82 95       	swap	r24
     e70:	86 95       	lsr	r24
     e72:	87 70       	andi	r24, 0x07	; 7
     e74:	83 70       	andi	r24, 0x03	; 3
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3f 83       	std	Y+7, r19	; 0x07
     e7c:	2e 83       	std	Y+6, r18	; 0x06
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	21 f1       	breq	.+72     	; 0xed0 <MCAL_DIO_SetPinDirection+0x38a>
     e88:	2e 81       	ldd	r18, Y+6	; 0x06
     e8a:	3f 81       	ldd	r19, Y+7	; 0x07
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <MCAL_DIO_SetPinDirection+0x34e>
     e92:	56 c0       	rjmp	.+172    	; 0xf40 <MCAL_DIO_SetPinDirection+0x3fa>
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	09 f0       	breq	.+2      	; 0xe9e <MCAL_DIO_SetPinDirection+0x358>
     e9c:	89 c0       	rjmp	.+274    	; 0xfb0 <MCAL_DIO_SetPinDirection+0x46a>
                {
                    case DIO_PIN_OUTPUT:
                        SET_BIT(DDRC_REG.DDRC_REGISTER, Copy_PinInfo->Pin_Num);
     e9e:	a4 e3       	ldi	r26, 0x34	; 52
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e4 e3       	ldi	r30, 0x34	; 52
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	ea 81       	ldd	r30, Y+2	; 0x02
     eac:	fb 81       	ldd	r31, Y+3	; 0x03
     eae:	80 81       	ld	r24, Z
     eb0:	86 95       	lsr	r24
     eb2:	86 95       	lsr	r24
     eb4:	87 70       	andi	r24, 0x07	; 7
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <MCAL_DIO_SetPinDirection+0x380>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <MCAL_DIO_SetPinDirection+0x37c>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	1b c1       	rjmp	.+566    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT:
                        CLEAR_BIT(DDRC_REG.DDRC_REGISTER, Copy_PinInfo->Pin_Num);
     ed0:	a4 e3       	ldi	r26, 0x34	; 52
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e4 e3       	ldi	r30, 0x34	; 52
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	ea 81       	ldd	r30, Y+2	; 0x02
     ede:	fb 81       	ldd	r31, Y+3	; 0x03
     ee0:	80 81       	ld	r24, Z
     ee2:	86 95       	lsr	r24
     ee4:	86 95       	lsr	r24
     ee6:	87 70       	andi	r24, 0x07	; 7
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MCAL_DIO_SetPinDirection+0x3b0>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	2a 95       	dec	r18
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MCAL_DIO_SetPinDirection+0x3ac>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
                        SET_BIT(PORTC_REG.PORTC_REGISTER, Copy_PinInfo->Pin_Num);
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	ea 81       	ldd	r30, Y+2	; 0x02
     f0e:	fb 81       	ldd	r31, Y+3	; 0x03
     f10:	80 81       	ld	r24, Z
     f12:	86 95       	lsr	r24
     f14:	86 95       	lsr	r24
     f16:	87 70       	andi	r24, 0x07	; 7
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <MCAL_DIO_SetPinDirection+0x3e2>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <MCAL_DIO_SetPinDirection+0x3de>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
                        SET_BIT(SFIOR_REG, PUB_BIT);
     f30:	a0 e5       	ldi	r26, 0x50	; 80
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e0 e5       	ldi	r30, 0x50	; 80
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	8c 93       	st	X, r24
     f3e:	e3 c0       	rjmp	.+454    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT_PULL_UP:
                        CLEAR_BIT(DDRC_REG.DDRC_REGISTER, Copy_PinInfo->Pin_Num);
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	ea 81       	ldd	r30, Y+2	; 0x02
     f4e:	fb 81       	ldd	r31, Y+3	; 0x03
     f50:	80 81       	ld	r24, Z
     f52:	86 95       	lsr	r24
     f54:	86 95       	lsr	r24
     f56:	87 70       	andi	r24, 0x07	; 7
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <MCAL_DIO_SetPinDirection+0x420>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	2a 95       	dec	r18
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <MCAL_DIO_SetPinDirection+0x41c>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
                        SET_BIT(PORTC_REG.PORTC_REGISTER, Copy_PinInfo->Pin_Num);
     f70:	a5 e3       	ldi	r26, 0x35	; 53
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	ea 81       	ldd	r30, Y+2	; 0x02
     f7e:	fb 81       	ldd	r31, Y+3	; 0x03
     f80:	80 81       	ld	r24, Z
     f82:	86 95       	lsr	r24
     f84:	86 95       	lsr	r24
     f86:	87 70       	andi	r24, 0x07	; 7
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <MCAL_DIO_SetPinDirection+0x452>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <MCAL_DIO_SetPinDirection+0x44e>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
                        CLEAR_BIT(SFIOR_REG, PUB_BIT);
     fa0:	a0 e5       	ldi	r26, 0x50	; 80
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e0 e5       	ldi	r30, 0x50	; 80
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8b 7f       	andi	r24, 0xFB	; 251
     fac:	8c 93       	st	X, r24
     fae:	ab c0       	rjmp	.+342    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
     fb0:	19 82       	std	Y+1, r1	; 0x01
     fb2:	a9 c0       	rjmp	.+338    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                }
                break;
            case DIO_PORTD:
                Local_ErrorStatus = E_OK;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinInfo->Pin_Direction)
     fb8:	ea 81       	ldd	r30, Y+2	; 0x02
     fba:	fb 81       	ldd	r31, Y+3	; 0x03
     fbc:	80 81       	ld	r24, Z
     fbe:	82 95       	swap	r24
     fc0:	86 95       	lsr	r24
     fc2:	87 70       	andi	r24, 0x07	; 7
     fc4:	83 70       	andi	r24, 0x03	; 3
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	3d 83       	std	Y+5, r19	; 0x05
     fcc:	2c 83       	std	Y+4, r18	; 0x04
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	91 05       	cpc	r25, r1
     fd6:	21 f1       	breq	.+72     	; 0x1020 <MCAL_DIO_SetPinDirection+0x4da>
     fd8:	2c 81       	ldd	r18, Y+4	; 0x04
     fda:	3d 81       	ldd	r19, Y+5	; 0x05
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <MCAL_DIO_SetPinDirection+0x49e>
     fe2:	56 c0       	rjmp	.+172    	; 0x1090 <MCAL_DIO_SetPinDirection+0x54a>
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	09 f0       	breq	.+2      	; 0xfee <MCAL_DIO_SetPinDirection+0x4a8>
     fec:	89 c0       	rjmp	.+274    	; 0x1100 <MCAL_DIO_SetPinDirection+0x5ba>
                {
                    case DIO_PIN_OUTPUT:
                        SET_BIT(DDRD_REG.DDRD_REGISTER, Copy_PinInfo->Pin_Num);
     fee:	a1 e3       	ldi	r26, 0x31	; 49
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e3       	ldi	r30, 0x31	; 49
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	ea 81       	ldd	r30, Y+2	; 0x02
     ffc:	fb 81       	ldd	r31, Y+3	; 0x03
     ffe:	80 81       	ld	r24, Z
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	87 70       	andi	r24, 0x07	; 7
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <MCAL_DIO_SetPinDirection+0x4d0>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <MCAL_DIO_SetPinDirection+0x4cc>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	73 c0       	rjmp	.+230    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT:
                        CLEAR_BIT(DDRD_REG.DDRD_REGISTER, Copy_PinInfo->Pin_Num);
    1020:	a1 e3       	ldi	r26, 0x31	; 49
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 e3       	ldi	r30, 0x31	; 49
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	ea 81       	ldd	r30, Y+2	; 0x02
    102e:	fb 81       	ldd	r31, Y+3	; 0x03
    1030:	80 81       	ld	r24, Z
    1032:	86 95       	lsr	r24
    1034:	86 95       	lsr	r24
    1036:	87 70       	andi	r24, 0x07	; 7
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <MCAL_DIO_SetPinDirection+0x500>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	2a 95       	dec	r18
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <MCAL_DIO_SetPinDirection+0x4fc>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8c 93       	st	X, r24
                        SET_BIT(PORTD_REG.PORTD_REGISTER, Copy_PinInfo->Pin_Num);
    1050:	a2 e3       	ldi	r26, 0x32	; 50
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	ea 81       	ldd	r30, Y+2	; 0x02
    105e:	fb 81       	ldd	r31, Y+3	; 0x03
    1060:	80 81       	ld	r24, Z
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	87 70       	andi	r24, 0x07	; 7
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <MCAL_DIO_SetPinDirection+0x532>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <MCAL_DIO_SetPinDirection+0x52e>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
                        SET_BIT(SFIOR_REG, PUB_BIT);
    1080:	a0 e5       	ldi	r26, 0x50	; 80
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e0 e5       	ldi	r30, 0x50	; 80
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	84 60       	ori	r24, 0x04	; 4
    108c:	8c 93       	st	X, r24
    108e:	3b c0       	rjmp	.+118    	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    case DIO_PIN_INPUT_PULL_UP:
                        CLEAR_BIT(DDRC_REG.DDRC_REGISTER, Copy_PinInfo->Pin_Num);
    1090:	a4 e3       	ldi	r26, 0x34	; 52
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e4 e3       	ldi	r30, 0x34	; 52
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	ea 81       	ldd	r30, Y+2	; 0x02
    109e:	fb 81       	ldd	r31, Y+3	; 0x03
    10a0:	80 81       	ld	r24, Z
    10a2:	86 95       	lsr	r24
    10a4:	86 95       	lsr	r24
    10a6:	87 70       	andi	r24, 0x07	; 7
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <MCAL_DIO_SetPinDirection+0x570>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	2a 95       	dec	r18
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <MCAL_DIO_SetPinDirection+0x56c>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
                        SET_BIT(PORTC_REG.PORTC_REGISTER, Copy_PinInfo->Pin_Num);
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	ea 81       	ldd	r30, Y+2	; 0x02
    10ce:	fb 81       	ldd	r31, Y+3	; 0x03
    10d0:	80 81       	ld	r24, Z
    10d2:	86 95       	lsr	r24
    10d4:	86 95       	lsr	r24
    10d6:	87 70       	andi	r24, 0x07	; 7
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <MCAL_DIO_SetPinDirection+0x5a2>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <MCAL_DIO_SetPinDirection+0x59e>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
                        CLEAR_BIT(SFIOR_REG, PUB_BIT);
    10f0:	a0 e5       	ldi	r26, 0x50	; 80
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e0 e5       	ldi	r30, 0x50	; 80
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8b 7f       	andi	r24, 0xFB	; 251
    10fc:	8c 93       	st	X, r24
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <MCAL_DIO_SetPinDirection+0x5c0>
                        break;
                }
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    1104:	19 82       	std	Y+1, r1	; 0x01
                break;
        }
    }
    return Local_ErrorStatus;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	2d 96       	adiw	r28, 0x0d	; 13
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <MCAL_DIO_GetPinDirection>:

Std_ReturnType MCAL_DIO_GetPinDirection(const Pin_Conig_t *Copy_PinInfo, DIO_PIN_DIRECTION_t *Copy_Direction)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	28 97       	sbiw	r28, 0x08	; 8
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	7e 83       	std	Y+6, r23	; 0x06
    1134:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    1136:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_PinDirection = INITIAL_VALUE;
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_PinInfo->Pin_Num > DIO_PIN7)
    113c:	eb 81       	ldd	r30, Y+3	; 0x03
    113e:	fc 81       	ldd	r31, Y+4	; 0x04
    1140:	80 81       	ld	r24, Z
    1142:	86 95       	lsr	r24
    1144:	86 95       	lsr	r24
    1146:	87 70       	andi	r24, 0x07	; 7
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	91 05       	cpc	r25, r1
    1150:	14 f0       	brlt	.+4      	; 0x1156 <MCAL_DIO_GetPinDirection+0x3c>
    {
        Local_ErrorStatus = E_NOT_OK;
    1152:	1a 82       	std	Y+2, r1	; 0x02
    1154:	bb c0       	rjmp	.+374    	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
    }
    else
    {
         switch(Copy_PinInfo->PORT_ID)
    1156:	eb 81       	ldd	r30, Y+3	; 0x03
    1158:	fc 81       	ldd	r31, Y+4	; 0x04
    115a:	80 81       	ld	r24, Z
    115c:	83 70       	andi	r24, 0x03	; 3
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	38 87       	std	Y+8, r19	; 0x08
    1164:	2f 83       	std	Y+7, r18	; 0x07
    1166:	4f 81       	ldd	r20, Y+7	; 0x07
    1168:	58 85       	ldd	r21, Y+8	; 0x08
    116a:	41 30       	cpi	r20, 0x01	; 1
    116c:	51 05       	cpc	r21, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <MCAL_DIO_GetPinDirection+0x58>
    1170:	3d c0       	rjmp	.+122    	; 0x11ec <MCAL_DIO_GetPinDirection+0xd2>
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	91 05       	cpc	r25, r1
    117a:	34 f4       	brge	.+12     	; 0x1188 <MCAL_DIO_GetPinDirection+0x6e>
    117c:	2f 81       	ldd	r18, Y+7	; 0x07
    117e:	38 85       	ldd	r19, Y+8	; 0x08
    1180:	21 15       	cp	r18, r1
    1182:	31 05       	cpc	r19, r1
    1184:	71 f0       	breq	.+28     	; 0x11a2 <MCAL_DIO_GetPinDirection+0x88>
    1186:	a1 c0       	rjmp	.+322    	; 0x12ca <MCAL_DIO_GetPinDirection+0x1b0>
    1188:	4f 81       	ldd	r20, Y+7	; 0x07
    118a:	58 85       	ldd	r21, Y+8	; 0x08
    118c:	42 30       	cpi	r20, 0x02	; 2
    118e:	51 05       	cpc	r21, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <MCAL_DIO_GetPinDirection+0x7a>
    1192:	51 c0       	rjmp	.+162    	; 0x1236 <MCAL_DIO_GetPinDirection+0x11c>
    1194:	8f 81       	ldd	r24, Y+7	; 0x07
    1196:	98 85       	ldd	r25, Y+8	; 0x08
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	91 05       	cpc	r25, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <MCAL_DIO_GetPinDirection+0x86>
    119e:	70 c0       	rjmp	.+224    	; 0x1280 <MCAL_DIO_GetPinDirection+0x166>
    11a0:	94 c0       	rjmp	.+296    	; 0x12ca <MCAL_DIO_GetPinDirection+0x1b0>
        {   
            case DIO_PORTA:
                Local_PinDirection = GET_BIT(DDRA_REG.DDRA_REGISTER, Copy_PinInfo->Pin_Num);
    11a2:	ea e3       	ldi	r30, 0x3A	; 58
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	eb 81       	ldd	r30, Y+3	; 0x03
    11ae:	fc 81       	ldd	r31, Y+4	; 0x04
    11b0:	80 81       	ld	r24, Z
    11b2:	86 95       	lsr	r24
    11b4:	86 95       	lsr	r24
    11b6:	87 70       	andi	r24, 0x07	; 7
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <MCAL_DIO_GetPinDirection+0xaa>
    11c0:	55 95       	asr	r21
    11c2:	47 95       	ror	r20
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <MCAL_DIO_GetPinDirection+0xa6>
    11c8:	ca 01       	movw	r24, r20
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinDirection == DIO_PIN_INPUT || Local_PinDirection == DIO_PIN_OUTPUT)
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	19 f0       	breq	.+6      	; 0x11da <MCAL_DIO_GetPinDirection+0xc0>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	88 23       	and	r24, r24
    11d8:	39 f4       	brne	.+14     	; 0x11e8 <MCAL_DIO_GetPinDirection+0xce>
                {
                    *Copy_Direction = Local_PinDirection;
    11da:	ed 81       	ldd	r30, Y+5	; 0x05
    11dc:	fe 81       	ldd	r31, Y+6	; 0x06
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	72 c0       	rjmp	.+228    	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                else
                {
                    Local_ErrorStatus = E_NOT_OK;   
    11e8:	1a 82       	std	Y+2, r1	; 0x02
    11ea:	70 c0       	rjmp	.+224    	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                break;
            case DIO_PORTB:
                Local_PinDirection = GET_BIT(DDRB_REG.DDRB_REGISTER, Copy_PinInfo->Pin_Num);
    11ec:	e7 e3       	ldi	r30, 0x37	; 55
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	eb 81       	ldd	r30, Y+3	; 0x03
    11f8:	fc 81       	ldd	r31, Y+4	; 0x04
    11fa:	80 81       	ld	r24, Z
    11fc:	86 95       	lsr	r24
    11fe:	86 95       	lsr	r24
    1200:	87 70       	andi	r24, 0x07	; 7
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <MCAL_DIO_GetPinDirection+0xf4>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <MCAL_DIO_GetPinDirection+0xf0>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinDirection == DIO_PIN_INPUT || Local_PinDirection == DIO_PIN_OUTPUT)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	19 f0       	breq	.+6      	; 0x1224 <MCAL_DIO_GetPinDirection+0x10a>
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 23       	and	r24, r24
    1222:	39 f4       	brne	.+14     	; 0x1232 <MCAL_DIO_GetPinDirection+0x118>
                {
                    *Copy_Direction = Local_PinDirection;
    1224:	ed 81       	ldd	r30, Y+5	; 0x05
    1226:	fe 81       	ldd	r31, Y+6	; 0x06
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8a 83       	std	Y+2, r24	; 0x02
    1230:	4d c0       	rjmp	.+154    	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                else
                {
                    Local_ErrorStatus = E_NOT_OK;   
    1232:	1a 82       	std	Y+2, r1	; 0x02
    1234:	4b c0       	rjmp	.+150    	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                break;
            case DIO_PORTC:
                Local_PinDirection = GET_BIT(DDRC_REG.DDRC_REGISTER, Copy_PinInfo->Pin_Num);
    1236:	e4 e3       	ldi	r30, 0x34	; 52
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	eb 81       	ldd	r30, Y+3	; 0x03
    1242:	fc 81       	ldd	r31, Y+4	; 0x04
    1244:	80 81       	ld	r24, Z
    1246:	86 95       	lsr	r24
    1248:	86 95       	lsr	r24
    124a:	87 70       	andi	r24, 0x07	; 7
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <MCAL_DIO_GetPinDirection+0x13e>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <MCAL_DIO_GetPinDirection+0x13a>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinDirection == DIO_PIN_INPUT || Local_PinDirection == DIO_PIN_OUTPUT)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	19 f0       	breq	.+6      	; 0x126e <MCAL_DIO_GetPinDirection+0x154>
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 23       	and	r24, r24
    126c:	39 f4       	brne	.+14     	; 0x127c <MCAL_DIO_GetPinDirection+0x162>
                {
                    *Copy_Direction = Local_PinDirection;
    126e:	ed 81       	ldd	r30, Y+5	; 0x05
    1270:	fe 81       	ldd	r31, Y+6	; 0x06
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	28 c0       	rjmp	.+80     	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                else
                {
                    Local_ErrorStatus = E_NOT_OK;   
    127c:	1a 82       	std	Y+2, r1	; 0x02
    127e:	26 c0       	rjmp	.+76     	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                break;
            case DIO_PORTD:
                Local_PinDirection = GET_BIT(DDRD_REG.DDRD_REGISTER, Copy_PinInfo->Pin_Num);
    1280:	e1 e3       	ldi	r30, 0x31	; 49
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	eb 81       	ldd	r30, Y+3	; 0x03
    128c:	fc 81       	ldd	r31, Y+4	; 0x04
    128e:	80 81       	ld	r24, Z
    1290:	86 95       	lsr	r24
    1292:	86 95       	lsr	r24
    1294:	87 70       	andi	r24, 0x07	; 7
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <MCAL_DIO_GetPinDirection+0x188>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <MCAL_DIO_GetPinDirection+0x184>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinDirection == DIO_PIN_INPUT || Local_PinDirection == DIO_PIN_OUTPUT)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <MCAL_DIO_GetPinDirection+0x19e>
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	88 23       	and	r24, r24
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <MCAL_DIO_GetPinDirection+0x1ac>
                {
                    *Copy_Direction = Local_PinDirection;
    12b8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ba:	fe 81       	ldd	r31, Y+6	; 0x06
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	8a 83       	std	Y+2, r24	; 0x02
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                else
                {
                    Local_ErrorStatus = E_NOT_OK;   
    12c6:	1a 82       	std	Y+2, r1	; 0x02
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <MCAL_DIO_GetPinDirection+0x1b2>
                }
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    12ca:	1a 82       	std	Y+2, r1	; 0x02
                break;
        }
    }
    return Local_ErrorStatus;
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12ce:	28 96       	adiw	r28, 0x08	; 8
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <MCAL_DIO_SetPinValue>:
Std_ReturnType MCAL_DIO_SetPinValue(Pin_Conig_t *Copy_PinInfo, DIO_PIN_VALUE_t Copy_PinValue)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	2e 97       	sbiw	r28, 0x0e	; 14
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    12fa:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PinInfo->Pin_Num > DIO_PIN7 || Copy_PinInfo->Pin_Direction == DIO_PIN_INPUT)
    12fc:	ea 81       	ldd	r30, Y+2	; 0x02
    12fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1300:	80 81       	ld	r24, Z
    1302:	86 95       	lsr	r24
    1304:	86 95       	lsr	r24
    1306:	87 70       	andi	r24, 0x07	; 7
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 30       	cpi	r24, 0x08	; 8
    130e:	91 05       	cpc	r25, r1
    1310:	34 f4       	brge	.+12     	; 0x131e <MCAL_DIO_SetPinValue+0x3e>
    1312:	ea 81       	ldd	r30, Y+2	; 0x02
    1314:	fb 81       	ldd	r31, Y+3	; 0x03
    1316:	80 81       	ld	r24, Z
    1318:	80 76       	andi	r24, 0x60	; 96
    131a:	80 32       	cpi	r24, 0x20	; 32
    131c:	11 f4       	brne	.+4      	; 0x1322 <MCAL_DIO_SetPinValue+0x42>
    {
        Local_ErrorStatus = E_NOT_OK;
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	9e c1       	rjmp	.+828    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
    }
    else
    {
        switch(Copy_PinInfo->PORT_ID)
    1322:	ea 81       	ldd	r30, Y+2	; 0x02
    1324:	fb 81       	ldd	r31, Y+3	; 0x03
    1326:	80 81       	ld	r24, Z
    1328:	83 70       	andi	r24, 0x03	; 3
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3e 87       	std	Y+14, r19	; 0x0e
    1330:	2d 87       	std	Y+13, r18	; 0x0d
    1332:	8d 85       	ldd	r24, Y+13	; 0x0d
    1334:	9e 85       	ldd	r25, Y+14	; 0x0e
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <MCAL_DIO_SetPinValue+0x5e>
    133c:	75 c0       	rjmp	.+234    	; 0x1428 <MCAL_DIO_SetPinValue+0x148>
    133e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1340:	3e 85       	ldd	r19, Y+14	; 0x0e
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <MCAL_DIO_SetPinValue+0x72>
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	71 f0       	breq	.+28     	; 0x136c <MCAL_DIO_SetPinValue+0x8c>
    1350:	85 c1       	rjmp	.+778    	; 0x165c <MCAL_DIO_SetPinValue+0x37c>
    1352:	2d 85       	ldd	r18, Y+13	; 0x0d
    1354:	3e 85       	ldd	r19, Y+14	; 0x0e
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <MCAL_DIO_SetPinValue+0x7e>
    135c:	c3 c0       	rjmp	.+390    	; 0x14e4 <MCAL_DIO_SetPinValue+0x204>
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	9e 85       	ldd	r25, Y+14	; 0x0e
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <MCAL_DIO_SetPinValue+0x8a>
    1368:	1b c1       	rjmp	.+566    	; 0x15a0 <MCAL_DIO_SetPinValue+0x2c0>
    136a:	78 c1       	rjmp	.+752    	; 0x165c <MCAL_DIO_SetPinValue+0x37c>
        {
            case DIO_PORTA:
                Local_ErrorStatus = E_OK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinValue)
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3c 87       	std	Y+12, r19	; 0x0c
    1378:	2b 87       	std	Y+11, r18	; 0x0b
    137a:	8b 85       	ldd	r24, Y+11	; 0x0b
    137c:	9c 85       	ldd	r25, Y+12	; 0x0c
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	59 f1       	breq	.+86     	; 0x13d8 <MCAL_DIO_SetPinValue+0xf8>
    1382:	2b 85       	ldd	r18, Y+11	; 0x0b
    1384:	3c 85       	ldd	r19, Y+12	; 0x0c
    1386:	21 30       	cpi	r18, 0x01	; 1
    1388:	31 05       	cpc	r19, r1
    138a:	09 f0       	breq	.+2      	; 0x138e <MCAL_DIO_SetPinValue+0xae>
    138c:	4b c0       	rjmp	.+150    	; 0x1424 <MCAL_DIO_SetPinValue+0x144>
                {
                    case DIO_HIGH:
                        SET_BIT(PORTA_REG.PORTA_REGISTER, Copy_PinInfo->Pin_Num);
    138e:	ab e3       	ldi	r26, 0x3B	; 59
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	eb e3       	ldi	r30, 0x3B	; 59
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	ea 81       	ldd	r30, Y+2	; 0x02
    139c:	fb 81       	ldd	r31, Y+3	; 0x03
    139e:	80 81       	ld	r24, Z
    13a0:	86 95       	lsr	r24
    13a2:	86 95       	lsr	r24
    13a4:	87 70       	andi	r24, 0x07	; 7
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <MCAL_DIO_SetPinValue+0xd6>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <MCAL_DIO_SetPinValue+0xd2>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	81 70       	andi	r24, 0x01	; 1
    13c2:	ea 81       	ldd	r30, Y+2	; 0x02
    13c4:	fb 81       	ldd	r31, Y+3	; 0x03
    13c6:	98 2f       	mov	r25, r24
    13c8:	97 95       	ror	r25
    13ca:	99 27       	eor	r25, r25
    13cc:	97 95       	ror	r25
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 77       	andi	r24, 0x7F	; 127
    13d2:	89 2b       	or	r24, r25
    13d4:	80 83       	st	Z, r24
    13d6:	43 c1       	rjmp	.+646    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    case DIO_LOW:
                        CLEAR_BIT(PORTA_REG.PORTA_REGISTER, Copy_PinInfo->Pin_Num);
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	ea 81       	ldd	r30, Y+2	; 0x02
    13e6:	fb 81       	ldd	r31, Y+3	; 0x03
    13e8:	80 81       	ld	r24, Z
    13ea:	86 95       	lsr	r24
    13ec:	86 95       	lsr	r24
    13ee:	87 70       	andi	r24, 0x07	; 7
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <MCAL_DIO_SetPinValue+0x120>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <MCAL_DIO_SetPinValue+0x11c>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	ea 81       	ldd	r30, Y+2	; 0x02
    1410:	fb 81       	ldd	r31, Y+3	; 0x03
    1412:	98 2f       	mov	r25, r24
    1414:	97 95       	ror	r25
    1416:	99 27       	eor	r25, r25
    1418:	97 95       	ror	r25
    141a:	80 81       	ld	r24, Z
    141c:	8f 77       	andi	r24, 0x7F	; 127
    141e:	89 2b       	or	r24, r25
    1420:	80 83       	st	Z, r24
    1422:	1d c1       	rjmp	.+570    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	1b c1       	rjmp	.+566    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                }
                break;
            case DIO_PORTB:
                Local_ErrorStatus = E_OK;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinValue)
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3a 87       	std	Y+10, r19	; 0x0a
    1434:	29 87       	std	Y+9, r18	; 0x09
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	59 f1       	breq	.+86     	; 0x1494 <MCAL_DIO_SetPinValue+0x1b4>
    143e:	29 85       	ldd	r18, Y+9	; 0x09
    1440:	3a 85       	ldd	r19, Y+10	; 0x0a
    1442:	21 30       	cpi	r18, 0x01	; 1
    1444:	31 05       	cpc	r19, r1
    1446:	09 f0       	breq	.+2      	; 0x144a <MCAL_DIO_SetPinValue+0x16a>
    1448:	4b c0       	rjmp	.+150    	; 0x14e0 <MCAL_DIO_SetPinValue+0x200>
                {
                    case DIO_HIGH:
                        SET_BIT(PORTB_REG.PORTB_REGISTER, Copy_PinInfo->Pin_Num);
    144a:	a8 e3       	ldi	r26, 0x38	; 56
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e8 e3       	ldi	r30, 0x38	; 56
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	ea 81       	ldd	r30, Y+2	; 0x02
    1458:	fb 81       	ldd	r31, Y+3	; 0x03
    145a:	80 81       	ld	r24, Z
    145c:	86 95       	lsr	r24
    145e:	86 95       	lsr	r24
    1460:	87 70       	andi	r24, 0x07	; 7
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <MCAL_DIO_SetPinValue+0x192>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <MCAL_DIO_SetPinValue+0x18e>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	81 70       	andi	r24, 0x01	; 1
    147e:	ea 81       	ldd	r30, Y+2	; 0x02
    1480:	fb 81       	ldd	r31, Y+3	; 0x03
    1482:	98 2f       	mov	r25, r24
    1484:	97 95       	ror	r25
    1486:	99 27       	eor	r25, r25
    1488:	97 95       	ror	r25
    148a:	80 81       	ld	r24, Z
    148c:	8f 77       	andi	r24, 0x7F	; 127
    148e:	89 2b       	or	r24, r25
    1490:	80 83       	st	Z, r24
    1492:	e5 c0       	rjmp	.+458    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    case DIO_LOW:
                        CLEAR_BIT(PORTB_REG.PORTB_REGISTER, Copy_PinInfo->Pin_Num);
    1494:	a8 e3       	ldi	r26, 0x38	; 56
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e8 e3       	ldi	r30, 0x38	; 56
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	ea 81       	ldd	r30, Y+2	; 0x02
    14a2:	fb 81       	ldd	r31, Y+3	; 0x03
    14a4:	80 81       	ld	r24, Z
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	87 70       	andi	r24, 0x07	; 7
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <MCAL_DIO_SetPinValue+0x1dc>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <MCAL_DIO_SetPinValue+0x1d8>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	ea 81       	ldd	r30, Y+2	; 0x02
    14cc:	fb 81       	ldd	r31, Y+3	; 0x03
    14ce:	98 2f       	mov	r25, r24
    14d0:	97 95       	ror	r25
    14d2:	99 27       	eor	r25, r25
    14d4:	97 95       	ror	r25
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 77       	andi	r24, 0x7F	; 127
    14da:	89 2b       	or	r24, r25
    14dc:	80 83       	st	Z, r24
    14de:	bf c0       	rjmp	.+382    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	bd c0       	rjmp	.+378    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                }
                break;
            case DIO_PORTC:
                Local_ErrorStatus = E_OK;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinValue)
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	38 87       	std	Y+8, r19	; 0x08
    14f0:	2f 83       	std	Y+7, r18	; 0x07
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	98 85       	ldd	r25, Y+8	; 0x08
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	59 f1       	breq	.+86     	; 0x1550 <MCAL_DIO_SetPinValue+0x270>
    14fa:	2f 81       	ldd	r18, Y+7	; 0x07
    14fc:	38 85       	ldd	r19, Y+8	; 0x08
    14fe:	21 30       	cpi	r18, 0x01	; 1
    1500:	31 05       	cpc	r19, r1
    1502:	09 f0       	breq	.+2      	; 0x1506 <MCAL_DIO_SetPinValue+0x226>
    1504:	4b c0       	rjmp	.+150    	; 0x159c <MCAL_DIO_SetPinValue+0x2bc>
                {
                    case DIO_HIGH:
                        SET_BIT(PORTC_REG.PORTC_REGISTER, Copy_PinInfo->Pin_Num);
    1506:	a5 e3       	ldi	r26, 0x35	; 53
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e3       	ldi	r30, 0x35	; 53
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	ea 81       	ldd	r30, Y+2	; 0x02
    1514:	fb 81       	ldd	r31, Y+3	; 0x03
    1516:	80 81       	ld	r24, Z
    1518:	86 95       	lsr	r24
    151a:	86 95       	lsr	r24
    151c:	87 70       	andi	r24, 0x07	; 7
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <MCAL_DIO_SetPinValue+0x24e>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <MCAL_DIO_SetPinValue+0x24a>
    1532:	84 2b       	or	r24, r20
    1534:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	ea 81       	ldd	r30, Y+2	; 0x02
    153c:	fb 81       	ldd	r31, Y+3	; 0x03
    153e:	98 2f       	mov	r25, r24
    1540:	97 95       	ror	r25
    1542:	99 27       	eor	r25, r25
    1544:	97 95       	ror	r25
    1546:	80 81       	ld	r24, Z
    1548:	8f 77       	andi	r24, 0x7F	; 127
    154a:	89 2b       	or	r24, r25
    154c:	80 83       	st	Z, r24
    154e:	87 c0       	rjmp	.+270    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    case DIO_LOW:
                        CLEAR_BIT(PORTC_REG.PORTC_REGISTER, Copy_PinInfo->Pin_Num);
    1550:	a5 e3       	ldi	r26, 0x35	; 53
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e5 e3       	ldi	r30, 0x35	; 53
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	ea 81       	ldd	r30, Y+2	; 0x02
    155e:	fb 81       	ldd	r31, Y+3	; 0x03
    1560:	80 81       	ld	r24, Z
    1562:	86 95       	lsr	r24
    1564:	86 95       	lsr	r24
    1566:	87 70       	andi	r24, 0x07	; 7
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <MCAL_DIO_SetPinValue+0x298>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <MCAL_DIO_SetPinValue+0x294>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	81 70       	andi	r24, 0x01	; 1
    1586:	ea 81       	ldd	r30, Y+2	; 0x02
    1588:	fb 81       	ldd	r31, Y+3	; 0x03
    158a:	98 2f       	mov	r25, r24
    158c:	97 95       	ror	r25
    158e:	99 27       	eor	r25, r25
    1590:	97 95       	ror	r25
    1592:	80 81       	ld	r24, Z
    1594:	8f 77       	andi	r24, 0x7F	; 127
    1596:	89 2b       	or	r24, r25
    1598:	80 83       	st	Z, r24
    159a:	61 c0       	rjmp	.+194    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
    159c:	19 82       	std	Y+1, r1	; 0x01
    159e:	5f c0       	rjmp	.+190    	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                }
                break;
            case DIO_PORTD:
                Local_ErrorStatus = E_OK;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
                switch(Copy_PinValue)
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3e 83       	std	Y+6, r19	; 0x06
    15ac:	2d 83       	std	Y+5, r18	; 0x05
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	59 f1       	breq	.+86     	; 0x160c <MCAL_DIO_SetPinValue+0x32c>
    15b6:	2d 81       	ldd	r18, Y+5	; 0x05
    15b8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ba:	21 30       	cpi	r18, 0x01	; 1
    15bc:	31 05       	cpc	r19, r1
    15be:	09 f0       	breq	.+2      	; 0x15c2 <MCAL_DIO_SetPinValue+0x2e2>
    15c0:	4b c0       	rjmp	.+150    	; 0x1658 <MCAL_DIO_SetPinValue+0x378>
                {
                    case DIO_HIGH:
                        SET_BIT(PORTD_REG.PORTD_REGISTER, Copy_PinInfo->Pin_Num);
    15c2:	a2 e3       	ldi	r26, 0x32	; 50
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	ea 81       	ldd	r30, Y+2	; 0x02
    15d0:	fb 81       	ldd	r31, Y+3	; 0x03
    15d2:	80 81       	ld	r24, Z
    15d4:	86 95       	lsr	r24
    15d6:	86 95       	lsr	r24
    15d8:	87 70       	andi	r24, 0x07	; 7
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <MCAL_DIO_SetPinValue+0x30a>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <MCAL_DIO_SetPinValue+0x306>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	ea 81       	ldd	r30, Y+2	; 0x02
    15f8:	fb 81       	ldd	r31, Y+3	; 0x03
    15fa:	98 2f       	mov	r25, r24
    15fc:	97 95       	ror	r25
    15fe:	99 27       	eor	r25, r25
    1600:	97 95       	ror	r25
    1602:	80 81       	ld	r24, Z
    1604:	8f 77       	andi	r24, 0x7F	; 127
    1606:	89 2b       	or	r24, r25
    1608:	80 83       	st	Z, r24
    160a:	29 c0       	rjmp	.+82     	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    case DIO_LOW:
                        CLEAR_BIT(PORTD_REG.PORTD_REGISTER, Copy_PinInfo->Pin_Num);
    160c:	a2 e3       	ldi	r26, 0x32	; 50
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e2 e3       	ldi	r30, 0x32	; 50
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	ea 81       	ldd	r30, Y+2	; 0x02
    161a:	fb 81       	ldd	r31, Y+3	; 0x03
    161c:	80 81       	ld	r24, Z
    161e:	86 95       	lsr	r24
    1620:	86 95       	lsr	r24
    1622:	87 70       	andi	r24, 0x07	; 7
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <MCAL_DIO_SetPinValue+0x354>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <MCAL_DIO_SetPinValue+0x350>
    1638:	80 95       	com	r24
    163a:	84 23       	and	r24, r20
    163c:	8c 93       	st	X, r24
                        Copy_PinInfo->Pin_Value = Copy_PinValue;
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	ea 81       	ldd	r30, Y+2	; 0x02
    1644:	fb 81       	ldd	r31, Y+3	; 0x03
    1646:	98 2f       	mov	r25, r24
    1648:	97 95       	ror	r25
    164a:	99 27       	eor	r25, r25
    164c:	97 95       	ror	r25
    164e:	80 81       	ld	r24, Z
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	89 2b       	or	r24, r25
    1654:	80 83       	st	Z, r24
    1656:	03 c0       	rjmp	.+6      	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                    default:
                        Local_ErrorStatus = E_NOT_OK;
    1658:	19 82       	std	Y+1, r1	; 0x01
    165a:	01 c0       	rjmp	.+2      	; 0x165e <MCAL_DIO_SetPinValue+0x37e>
                        break;
                }
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    165c:	19 82       	std	Y+1, r1	; 0x01
                break;
        }
    }
    return Local_ErrorStatus;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	2e 96       	adiw	r28, 0x0e	; 14
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <MCAL_DIO_ReadPinValue>:
Std_ReturnType MCAL_DIO_ReadPinValue(const Pin_Conig_t *Copy_PinInfo, DIO_PIN_VALUE_t *Copy_PinValue)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	28 97       	sbiw	r28, 0x08	; 8
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	7e 83       	std	Y+6, r23	; 0x06
    168c:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    168e:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_PinValue = INITIAL_VALUE;
    1690:	86 e0       	ldi	r24, 0x06	; 6
    1692:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_PinInfo->Pin_Num > DIO_PIN7 || Copy_PinInfo->Pin_Direction == DIO_PIN_OUTPUT)
    1694:	eb 81       	ldd	r30, Y+3	; 0x03
    1696:	fc 81       	ldd	r31, Y+4	; 0x04
    1698:	80 81       	ld	r24, Z
    169a:	86 95       	lsr	r24
    169c:	86 95       	lsr	r24
    169e:	87 70       	andi	r24, 0x07	; 7
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	88 30       	cpi	r24, 0x08	; 8
    16a6:	91 05       	cpc	r25, r1
    16a8:	34 f4       	brge	.+12     	; 0x16b6 <MCAL_DIO_ReadPinValue+0x44>
    16aa:	eb 81       	ldd	r30, Y+3	; 0x03
    16ac:	fc 81       	ldd	r31, Y+4	; 0x04
    16ae:	80 81       	ld	r24, Z
    16b0:	80 76       	andi	r24, 0x60	; 96
    16b2:	88 23       	and	r24, r24
    16b4:	11 f4       	brne	.+4      	; 0x16ba <MCAL_DIO_ReadPinValue+0x48>
    {
        Local_ErrorStatus = E_NOT_OK;
    16b6:	1a 82       	std	Y+2, r1	; 0x02
    16b8:	bb c0       	rjmp	.+374    	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
    }
    else
    {
        switch(Copy_PinInfo->PORT_ID)
    16ba:	eb 81       	ldd	r30, Y+3	; 0x03
    16bc:	fc 81       	ldd	r31, Y+4	; 0x04
    16be:	80 81       	ld	r24, Z
    16c0:	83 70       	andi	r24, 0x03	; 3
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	38 87       	std	Y+8, r19	; 0x08
    16c8:	2f 83       	std	Y+7, r18	; 0x07
    16ca:	4f 81       	ldd	r20, Y+7	; 0x07
    16cc:	58 85       	ldd	r21, Y+8	; 0x08
    16ce:	41 30       	cpi	r20, 0x01	; 1
    16d0:	51 05       	cpc	r21, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <MCAL_DIO_ReadPinValue+0x64>
    16d4:	3d c0       	rjmp	.+122    	; 0x1750 <MCAL_DIO_ReadPinValue+0xde>
    16d6:	8f 81       	ldd	r24, Y+7	; 0x07
    16d8:	98 85       	ldd	r25, Y+8	; 0x08
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	91 05       	cpc	r25, r1
    16de:	34 f4       	brge	.+12     	; 0x16ec <MCAL_DIO_ReadPinValue+0x7a>
    16e0:	2f 81       	ldd	r18, Y+7	; 0x07
    16e2:	38 85       	ldd	r19, Y+8	; 0x08
    16e4:	21 15       	cp	r18, r1
    16e6:	31 05       	cpc	r19, r1
    16e8:	71 f0       	breq	.+28     	; 0x1706 <MCAL_DIO_ReadPinValue+0x94>
    16ea:	a1 c0       	rjmp	.+322    	; 0x182e <MCAL_DIO_ReadPinValue+0x1bc>
    16ec:	4f 81       	ldd	r20, Y+7	; 0x07
    16ee:	58 85       	ldd	r21, Y+8	; 0x08
    16f0:	42 30       	cpi	r20, 0x02	; 2
    16f2:	51 05       	cpc	r21, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <MCAL_DIO_ReadPinValue+0x86>
    16f6:	51 c0       	rjmp	.+162    	; 0x179a <MCAL_DIO_ReadPinValue+0x128>
    16f8:	8f 81       	ldd	r24, Y+7	; 0x07
    16fa:	98 85       	ldd	r25, Y+8	; 0x08
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <MCAL_DIO_ReadPinValue+0x92>
    1702:	70 c0       	rjmp	.+224    	; 0x17e4 <MCAL_DIO_ReadPinValue+0x172>
    1704:	94 c0       	rjmp	.+296    	; 0x182e <MCAL_DIO_ReadPinValue+0x1bc>
        {
            case DIO_PORTA:
                Local_PinValue = GET_BIT(PINA_REG.PINA_REGISTER, Copy_PinInfo->Pin_Num);
    1706:	e9 e3       	ldi	r30, 0x39	; 57
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	80 81       	ld	r24, Z
    1716:	86 95       	lsr	r24
    1718:	86 95       	lsr	r24
    171a:	87 70       	andi	r24, 0x07	; 7
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <MCAL_DIO_ReadPinValue+0xb6>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <MCAL_DIO_ReadPinValue+0xb2>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinValue == DIO_HIGH || Local_PinValue == DIO_LOW)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	19 f0       	breq	.+6      	; 0x173e <MCAL_DIO_ReadPinValue+0xcc>
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	88 23       	and	r24, r24
    173c:	39 f4       	brne	.+14     	; 0x174c <MCAL_DIO_ReadPinValue+0xda>
                {
                    *Copy_PinValue = Local_PinValue;
    173e:	ed 81       	ldd	r30, Y+5	; 0x05
    1740:	fe 81       	ldd	r31, Y+6	; 0x06
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	72 c0       	rjmp	.+228    	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                else
                {
                   Local_ErrorStatus = E_NOT_OK; 
    174c:	1a 82       	std	Y+2, r1	; 0x02
    174e:	70 c0       	rjmp	.+224    	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                break;
            case DIO_PORTB:
                Local_PinValue = GET_BIT(PINB_REG.PINB_REGISTER, Copy_PinInfo->Pin_Num);
    1750:	e6 e3       	ldi	r30, 0x36	; 54
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	eb 81       	ldd	r30, Y+3	; 0x03
    175c:	fc 81       	ldd	r31, Y+4	; 0x04
    175e:	80 81       	ld	r24, Z
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	87 70       	andi	r24, 0x07	; 7
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <MCAL_DIO_ReadPinValue+0x100>
    176e:	55 95       	asr	r21
    1770:	47 95       	ror	r20
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <MCAL_DIO_ReadPinValue+0xfc>
    1776:	ca 01       	movw	r24, r20
    1778:	81 70       	andi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinValue == DIO_HIGH || Local_PinValue == DIO_LOW)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	19 f0       	breq	.+6      	; 0x1788 <MCAL_DIO_ReadPinValue+0x116>
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	88 23       	and	r24, r24
    1786:	39 f4       	brne	.+14     	; 0x1796 <MCAL_DIO_ReadPinValue+0x124>
                {
                    *Copy_PinValue = Local_PinValue;
    1788:	ed 81       	ldd	r30, Y+5	; 0x05
    178a:	fe 81       	ldd	r31, Y+6	; 0x06
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	4d c0       	rjmp	.+154    	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                else
                {
                   Local_ErrorStatus = E_NOT_OK; 
    1796:	1a 82       	std	Y+2, r1	; 0x02
    1798:	4b c0       	rjmp	.+150    	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                break;
            case DIO_PORTC:
                Local_PinValue = GET_BIT(PINC_REG.PINC_REGISTER, Copy_PinInfo->Pin_Num);
    179a:	e3 e3       	ldi	r30, 0x33	; 51
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	eb 81       	ldd	r30, Y+3	; 0x03
    17a6:	fc 81       	ldd	r31, Y+4	; 0x04
    17a8:	80 81       	ld	r24, Z
    17aa:	86 95       	lsr	r24
    17ac:	86 95       	lsr	r24
    17ae:	87 70       	andi	r24, 0x07	; 7
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a9 01       	movw	r20, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <MCAL_DIO_ReadPinValue+0x14a>
    17b8:	55 95       	asr	r21
    17ba:	47 95       	ror	r20
    17bc:	8a 95       	dec	r24
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <MCAL_DIO_ReadPinValue+0x146>
    17c0:	ca 01       	movw	r24, r20
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinValue == DIO_HIGH || Local_PinValue == DIO_LOW)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <MCAL_DIO_ReadPinValue+0x160>
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	88 23       	and	r24, r24
    17d0:	39 f4       	brne	.+14     	; 0x17e0 <MCAL_DIO_ReadPinValue+0x16e>
                {
                    *Copy_PinValue = Local_PinValue;
    17d2:	ed 81       	ldd	r30, Y+5	; 0x05
    17d4:	fe 81       	ldd	r31, Y+6	; 0x06
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	28 c0       	rjmp	.+80     	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                else
                {
                   Local_ErrorStatus = E_NOT_OK; 
    17e0:	1a 82       	std	Y+2, r1	; 0x02
    17e2:	26 c0       	rjmp	.+76     	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                break;
            case DIO_PORTD:
                Local_PinValue = GET_BIT(PIND_REG.PIND_REGISTER, Copy_PinInfo->Pin_Num);
    17e4:	e0 e3       	ldi	r30, 0x30	; 48
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	eb 81       	ldd	r30, Y+3	; 0x03
    17f0:	fc 81       	ldd	r31, Y+4	; 0x04
    17f2:	80 81       	ld	r24, Z
    17f4:	86 95       	lsr	r24
    17f6:	86 95       	lsr	r24
    17f8:	87 70       	andi	r24, 0x07	; 7
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a9 01       	movw	r20, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <MCAL_DIO_ReadPinValue+0x194>
    1802:	55 95       	asr	r21
    1804:	47 95       	ror	r20
    1806:	8a 95       	dec	r24
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <MCAL_DIO_ReadPinValue+0x190>
    180a:	ca 01       	movw	r24, r20
    180c:	81 70       	andi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
                if(Local_PinValue == DIO_HIGH || Local_PinValue == DIO_LOW)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	19 f0       	breq	.+6      	; 0x181c <MCAL_DIO_ReadPinValue+0x1aa>
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	88 23       	and	r24, r24
    181a:	39 f4       	brne	.+14     	; 0x182a <MCAL_DIO_ReadPinValue+0x1b8>
                {
                    *Copy_PinValue = Local_PinValue;
    181c:	ed 81       	ldd	r30, Y+5	; 0x05
    181e:	fe 81       	ldd	r31, Y+6	; 0x06
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	80 83       	st	Z, r24
                    Local_ErrorStatus = E_OK;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                else
                {
                   Local_ErrorStatus = E_NOT_OK; 
    182a:	1a 82       	std	Y+2, r1	; 0x02
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <MCAL_DIO_ReadPinValue+0x1be>
                }
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    182e:	1a 82       	std	Y+2, r1	; 0x02
                break;
        }  
    }
    return Local_ErrorStatus;
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1832:	28 96       	adiw	r28, 0x08	; 8
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <MCAL_DIO_TogglePinValue>:
Std_ReturnType MCAL_DIO_TogglePinValue(Pin_Conig_t *Copy_PinInfo)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <MCAL_DIO_TogglePinValue+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <MCAL_DIO_TogglePinValue+0x8>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	9b 83       	std	Y+3, r25	; 0x03
    1854:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1856:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PinInfo->Pin_Num > DIO_PIN7 || Copy_PinInfo->Pin_Direction == DIO_PIN_INPUT)
    1858:	ea 81       	ldd	r30, Y+2	; 0x02
    185a:	fb 81       	ldd	r31, Y+3	; 0x03
    185c:	80 81       	ld	r24, Z
    185e:	86 95       	lsr	r24
    1860:	86 95       	lsr	r24
    1862:	87 70       	andi	r24, 0x07	; 7
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	88 30       	cpi	r24, 0x08	; 8
    186a:	91 05       	cpc	r25, r1
    186c:	34 f4       	brge	.+12     	; 0x187a <MCAL_DIO_TogglePinValue+0x36>
    186e:	ea 81       	ldd	r30, Y+2	; 0x02
    1870:	fb 81       	ldd	r31, Y+3	; 0x03
    1872:	80 81       	ld	r24, Z
    1874:	80 76       	andi	r24, 0x60	; 96
    1876:	80 32       	cpi	r24, 0x20	; 32
    1878:	11 f4       	brne	.+4      	; 0x187e <MCAL_DIO_TogglePinValue+0x3a>
    {
        Local_ErrorStatus = E_NOT_OK;
    187a:	19 82       	std	Y+1, r1	; 0x01
    187c:	da c0       	rjmp	.+436    	; 0x1a32 <MCAL_DIO_TogglePinValue+0x1ee>
    }
    else
    {
        switch(Copy_PinInfo->PORT_ID)
    187e:	ea 81       	ldd	r30, Y+2	; 0x02
    1880:	fb 81       	ldd	r31, Y+3	; 0x03
    1882:	80 81       	ld	r24, Z
    1884:	83 70       	andi	r24, 0x03	; 3
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3d 83       	std	Y+5, r19	; 0x05
    188c:	2c 83       	std	Y+4, r18	; 0x04
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	9d 81       	ldd	r25, Y+5	; 0x05
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <MCAL_DIO_TogglePinValue+0x56>
    1898:	44 c0       	rjmp	.+136    	; 0x1922 <MCAL_DIO_TogglePinValue+0xde>
    189a:	2c 81       	ldd	r18, Y+4	; 0x04
    189c:	3d 81       	ldd	r19, Y+5	; 0x05
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f4       	brge	.+10     	; 0x18ae <MCAL_DIO_TogglePinValue+0x6a>
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <MCAL_DIO_TogglePinValue+0x84>
    18ac:	c1 c0       	rjmp	.+386    	; 0x1a30 <MCAL_DIO_TogglePinValue+0x1ec>
    18ae:	2c 81       	ldd	r18, Y+4	; 0x04
    18b0:	3d 81       	ldd	r19, Y+5	; 0x05
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <MCAL_DIO_TogglePinValue+0x76>
    18b8:	61 c0       	rjmp	.+194    	; 0x197c <MCAL_DIO_TogglePinValue+0x138>
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <MCAL_DIO_TogglePinValue+0x82>
    18c4:	88 c0       	rjmp	.+272    	; 0x19d6 <MCAL_DIO_TogglePinValue+0x192>
    18c6:	b4 c0       	rjmp	.+360    	; 0x1a30 <MCAL_DIO_TogglePinValue+0x1ec>
        {
            case DIO_PORTA:
                TOGGLE_BIT(PORTA_REG.PORTA_REGISTER, Copy_PinInfo->Pin_Num);
    18c8:	ab e3       	ldi	r26, 0x3B	; 59
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	eb e3       	ldi	r30, 0x3B	; 59
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	ea 81       	ldd	r30, Y+2	; 0x02
    18d6:	fb 81       	ldd	r31, Y+3	; 0x03
    18d8:	80 81       	ld	r24, Z
    18da:	86 95       	lsr	r24
    18dc:	86 95       	lsr	r24
    18de:	87 70       	andi	r24, 0x07	; 7
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MCAL_DIO_TogglePinValue+0xac>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <MCAL_DIO_TogglePinValue+0xa8>
    18f4:	84 27       	eor	r24, r20
    18f6:	8c 93       	st	X, r24
                Copy_PinInfo->Pin_Value = ~(Copy_PinInfo->Pin_Value);
    18f8:	ea 81       	ldd	r30, Y+2	; 0x02
    18fa:	fb 81       	ldd	r31, Y+3	; 0x03
    18fc:	80 81       	ld	r24, Z
    18fe:	88 1f       	adc	r24, r24
    1900:	88 27       	eor	r24, r24
    1902:	88 1f       	adc	r24, r24
    1904:	80 95       	com	r24
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	ea 81       	ldd	r30, Y+2	; 0x02
    190a:	fb 81       	ldd	r31, Y+3	; 0x03
    190c:	98 2f       	mov	r25, r24
    190e:	97 95       	ror	r25
    1910:	99 27       	eor	r25, r25
    1912:	97 95       	ror	r25
    1914:	80 81       	ld	r24, Z
    1916:	8f 77       	andi	r24, 0x7F	; 127
    1918:	89 2b       	or	r24, r25
    191a:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	88 c0       	rjmp	.+272    	; 0x1a32 <MCAL_DIO_TogglePinValue+0x1ee>
                break;
            case DIO_PORTB:
                TOGGLE_BIT(PORTB_REG.PORTB_REGISTER, Copy_PinInfo->Pin_Num);
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	ea 81       	ldd	r30, Y+2	; 0x02
    1930:	fb 81       	ldd	r31, Y+3	; 0x03
    1932:	80 81       	ld	r24, Z
    1934:	86 95       	lsr	r24
    1936:	86 95       	lsr	r24
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <MCAL_DIO_TogglePinValue+0x106>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <MCAL_DIO_TogglePinValue+0x102>
    194e:	84 27       	eor	r24, r20
    1950:	8c 93       	st	X, r24
                Copy_PinInfo->Pin_Value = ~(Copy_PinInfo->Pin_Value);
    1952:	ea 81       	ldd	r30, Y+2	; 0x02
    1954:	fb 81       	ldd	r31, Y+3	; 0x03
    1956:	80 81       	ld	r24, Z
    1958:	88 1f       	adc	r24, r24
    195a:	88 27       	eor	r24, r24
    195c:	88 1f       	adc	r24, r24
    195e:	80 95       	com	r24
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	ea 81       	ldd	r30, Y+2	; 0x02
    1964:	fb 81       	ldd	r31, Y+3	; 0x03
    1966:	98 2f       	mov	r25, r24
    1968:	97 95       	ror	r25
    196a:	99 27       	eor	r25, r25
    196c:	97 95       	ror	r25
    196e:	80 81       	ld	r24, Z
    1970:	8f 77       	andi	r24, 0x7F	; 127
    1972:	89 2b       	or	r24, r25
    1974:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	5b c0       	rjmp	.+182    	; 0x1a32 <MCAL_DIO_TogglePinValue+0x1ee>
                break;
            case DIO_PORTC:         
                TOGGLE_BIT(PORTC_REG.PORTC_REGISTER, Copy_PinInfo->Pin_Num);
    197c:	a5 e3       	ldi	r26, 0x35	; 53
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e3       	ldi	r30, 0x35	; 53
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	ea 81       	ldd	r30, Y+2	; 0x02
    198a:	fb 81       	ldd	r31, Y+3	; 0x03
    198c:	80 81       	ld	r24, Z
    198e:	86 95       	lsr	r24
    1990:	86 95       	lsr	r24
    1992:	87 70       	andi	r24, 0x07	; 7
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <MCAL_DIO_TogglePinValue+0x160>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <MCAL_DIO_TogglePinValue+0x15c>
    19a8:	84 27       	eor	r24, r20
    19aa:	8c 93       	st	X, r24
                Copy_PinInfo->Pin_Value = ~(Copy_PinInfo->Pin_Value);
    19ac:	ea 81       	ldd	r30, Y+2	; 0x02
    19ae:	fb 81       	ldd	r31, Y+3	; 0x03
    19b0:	80 81       	ld	r24, Z
    19b2:	88 1f       	adc	r24, r24
    19b4:	88 27       	eor	r24, r24
    19b6:	88 1f       	adc	r24, r24
    19b8:	80 95       	com	r24
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	ea 81       	ldd	r30, Y+2	; 0x02
    19be:	fb 81       	ldd	r31, Y+3	; 0x03
    19c0:	98 2f       	mov	r25, r24
    19c2:	97 95       	ror	r25
    19c4:	99 27       	eor	r25, r25
    19c6:	97 95       	ror	r25
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	89 2b       	or	r24, r25
    19ce:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	2e c0       	rjmp	.+92     	; 0x1a32 <MCAL_DIO_TogglePinValue+0x1ee>
                break;
            case DIO_PORTD:
                TOGGLE_BIT(PORTD_REG.PORTD_REGISTER, Copy_PinInfo->Pin_Num);
    19d6:	a2 e3       	ldi	r26, 0x32	; 50
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	ea 81       	ldd	r30, Y+2	; 0x02
    19e4:	fb 81       	ldd	r31, Y+3	; 0x03
    19e6:	80 81       	ld	r24, Z
    19e8:	86 95       	lsr	r24
    19ea:	86 95       	lsr	r24
    19ec:	87 70       	andi	r24, 0x07	; 7
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <MCAL_DIO_TogglePinValue+0x1ba>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <MCAL_DIO_TogglePinValue+0x1b6>
    1a02:	84 27       	eor	r24, r20
    1a04:	8c 93       	st	X, r24
                Copy_PinInfo->Pin_Value = ~(Copy_PinInfo->Pin_Value);
    1a06:	ea 81       	ldd	r30, Y+2	; 0x02
    1a08:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	88 27       	eor	r24, r24
    1a10:	88 1f       	adc	r24, r24
    1a12:	80 95       	com	r24
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	ea 81       	ldd	r30, Y+2	; 0x02
    1a18:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1a:	98 2f       	mov	r25, r24
    1a1c:	97 95       	ror	r25
    1a1e:	99 27       	eor	r25, r25
    1a20:	97 95       	ror	r25
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 77       	andi	r24, 0x7F	; 127
    1a26:	89 2b       	or	r24, r25
    1a28:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <MCAL_DIO_TogglePinValue+0x1ee>
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    1a30:	19 82       	std	Y+1, r1	; 0x01
                break;
        }  
    }
    return Local_ErrorStatus;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <MCAL_DIO_InitializePinOutput>:

Std_ReturnType MCAL_DIO_InitializePinOutput(const Pin_Conig_t *Copy_PinInfo)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <MCAL_DIO_InitializePinOutput+0x6>
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	9b 83       	std	Y+3, r25	; 0x03
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1a54:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PinInfo->Pin_Num > DIO_PIN7 || Copy_PinInfo->Pin_Direction == DIO_PIN_INPUT)
    1a56:	ea 81       	ldd	r30, Y+2	; 0x02
    1a58:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5a:	80 81       	ld	r24, Z
    1a5c:	86 95       	lsr	r24
    1a5e:	86 95       	lsr	r24
    1a60:	87 70       	andi	r24, 0x07	; 7
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	88 30       	cpi	r24, 0x08	; 8
    1a68:	91 05       	cpc	r25, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <MCAL_DIO_InitializePinOutput+0x34>
    1a6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a70:	80 81       	ld	r24, Z
    1a72:	80 76       	andi	r24, 0x60	; 96
    1a74:	80 32       	cpi	r24, 0x20	; 32
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <MCAL_DIO_InitializePinOutput+0x38>
    {
        Local_ErrorStatus = E_NOT_OK;
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <MCAL_DIO_InitializePinOutput+0x4a>
    }
    else
    {
        MCAL_DIO_SetPinDirection(Copy_PinInfo);
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_SetPinDirection>
        MCAL_DIO_SetPinValue(Copy_PinInfo, DIO_LOW);
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    }
    return Local_ErrorStatus;
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <MCAL_DIO_SetPortDirection>:
/*********************************Port APIs************************************/

#if(APIs_CONFIG == PORT_APIs_CONFIG || APIs_CONFIG == PORT_PIN_APIs_CONFIG)

Std_ReturnType MCAL_DIO_SetPortDirection(const Port_Conig_t *Copy_PortInfo)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <MCAL_DIO_SetPortDirection+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <MCAL_DIO_SetPortDirection+0x8>
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9b 83       	std	Y+3, r25	; 0x03
    1aac:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    1aae:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PortInfo->PORT_ID > DIO_PORTE)
    1ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab4:	80 81       	ld	r24, Z
    1ab6:	87 70       	andi	r24, 0x07	; 7
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	85 30       	cpi	r24, 0x05	; 5
    1abe:	91 05       	cpc	r25, r1
    1ac0:	14 f0       	brlt	.+4      	; 0x1ac6 <MCAL_DIO_SetPortDirection+0x2a>
    {
        Local_ErrorStatus = E_NOT_OK;
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	47 c0       	rjmp	.+142    	; 0x1b54 <MCAL_DIO_SetPortDirection+0xb8>
    }
    else
    {
       switch(Copy_PortInfo->PORT_ID)
    1ac6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aca:	80 81       	ld	r24, Z
    1acc:	87 70       	andi	r24, 0x07	; 7
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3d 83       	std	Y+5, r19	; 0x05
    1ad4:	2c 83       	std	Y+4, r18	; 0x04
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	f1 f0       	breq	.+60     	; 0x1b1c <MCAL_DIO_SetPortDirection+0x80>
    1ae0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <MCAL_DIO_SetPortDirection+0x58>
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	9d 81       	ldd	r25, Y+5	; 0x05
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <MCAL_DIO_SetPortDirection+0x6e>
    1af2:	2f c0       	rjmp	.+94     	; 0x1b52 <MCAL_DIO_SetPortDirection+0xb6>
    1af4:	2c 81       	ldd	r18, Y+4	; 0x04
    1af6:	3d 81       	ldd	r19, Y+5	; 0x05
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	c1 f0       	breq	.+48     	; 0x1b2e <MCAL_DIO_SetPortDirection+0x92>
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	e1 f0       	breq	.+56     	; 0x1b40 <MCAL_DIO_SetPortDirection+0xa4>
    1b08:	24 c0       	rjmp	.+72     	; 0x1b52 <MCAL_DIO_SetPortDirection+0xb6>
       {
           case DIO_PORTA:
               DDRA_REG.DDRA_REGISTER = Copy_PortInfo->Port_Direction;
    1b0a:	aa e3       	ldi	r26, 0x3A	; 58
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b10:	fb 81       	ldd	r31, Y+3	; 0x03
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	8c 93       	st	X, r24
               Local_ErrorStatus = E_OK;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	1c c0       	rjmp	.+56     	; 0x1b54 <MCAL_DIO_SetPortDirection+0xb8>
               break;
           case DIO_PORTB:
               DDRB_REG.DDRB_REGISTER = Copy_PortInfo->Port_Direction;
    1b1c:	a7 e3       	ldi	r26, 0x37	; 55
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ea 81       	ldd	r30, Y+2	; 0x02
    1b22:	fb 81       	ldd	r31, Y+3	; 0x03
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	8c 93       	st	X, r24
               Local_ErrorStatus = E_OK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	13 c0       	rjmp	.+38     	; 0x1b54 <MCAL_DIO_SetPortDirection+0xb8>
               break;
           case DIO_PORTC:
               DDRC_REG.DDRC_REGISTER = Copy_PortInfo->Port_Direction;
    1b2e:	a4 e3       	ldi	r26, 0x34	; 52
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	8c 93       	st	X, r24
               Local_ErrorStatus = E_OK;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	0a c0       	rjmp	.+20     	; 0x1b54 <MCAL_DIO_SetPortDirection+0xb8>
               break;
           case DIO_PORTD:
               DDRD_REG.DDRD_REGISTER = Copy_PortInfo->Port_Direction;
    1b40:	a1 e3       	ldi	r26, 0x31	; 49
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ea 81       	ldd	r30, Y+2	; 0x02
    1b46:	fb 81       	ldd	r31, Y+3	; 0x03
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	8c 93       	st	X, r24
               Local_ErrorStatus = E_OK;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <MCAL_DIO_SetPortDirection+0xb8>
               break;
           default:
               Local_ErrorStatus = E_NOT_OK;
    1b52:	19 82       	std	Y+1, r1	; 0x01
               break;
       }   
    }
    return Local_ErrorStatus;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <MCAL_DIO_GetPortDirection>:
Std_ReturnType MCAL_DIO_GetPortDirection(const Port_Conig_t *Copy_PortInfo, uint8 *Copy_Direction)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	27 97       	sbiw	r28, 0x07	; 7
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	9b 83       	std	Y+3, r25	; 0x03
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	7d 83       	std	Y+5, r23	; 0x05
    1b80:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    1b82:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PortInfo->PORT_ID > DIO_PORTE)
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	80 81       	ld	r24, Z
    1b8a:	87 70       	andi	r24, 0x07	; 7
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	85 30       	cpi	r24, 0x05	; 5
    1b92:	91 05       	cpc	r25, r1
    1b94:	14 f0       	brlt	.+4      	; 0x1b9a <MCAL_DIO_GetPortDirection+0x34>
    {
        Local_ErrorStatus = E_NOT_OK;
    1b96:	19 82       	std	Y+1, r1	; 0x01
    1b98:	47 c0       	rjmp	.+142    	; 0x1c28 <MCAL_DIO_GetPortDirection+0xc2>
    }
    else
    {
        switch(Copy_PortInfo->PORT_ID)
    1b9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9e:	80 81       	ld	r24, Z
    1ba0:	87 70       	andi	r24, 0x07	; 7
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3f 83       	std	Y+7, r19	; 0x07
    1ba8:	2e 83       	std	Y+6, r18	; 0x06
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	f1 f0       	breq	.+60     	; 0x1bf0 <MCAL_DIO_GetPortDirection+0x8a>
    1bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <MCAL_DIO_GetPortDirection+0x62>
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	61 f0       	breq	.+24     	; 0x1bde <MCAL_DIO_GetPortDirection+0x78>
    1bc6:	2f c0       	rjmp	.+94     	; 0x1c26 <MCAL_DIO_GetPortDirection+0xc0>
    1bc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bca:	3f 81       	ldd	r19, Y+7	; 0x07
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	c1 f0       	breq	.+48     	; 0x1c02 <MCAL_DIO_GetPortDirection+0x9c>
    1bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	e1 f0       	breq	.+56     	; 0x1c14 <MCAL_DIO_GetPortDirection+0xae>
    1bdc:	24 c0       	rjmp	.+72     	; 0x1c26 <MCAL_DIO_GetPortDirection+0xc0>
        {
            case DIO_PORTA:
                *Copy_Direction = DDRA_REG.DDRA_REGISTER;
    1bde:	ea e3       	ldi	r30, 0x3A	; 58
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	ec 81       	ldd	r30, Y+4	; 0x04
    1be6:	fd 81       	ldd	r31, Y+5	; 0x05
    1be8:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	1c c0       	rjmp	.+56     	; 0x1c28 <MCAL_DIO_GetPortDirection+0xc2>
                break;
            case DIO_PORTB:
                *Copy_Direction = DDRB_REG.DDRB_REGISTER;
    1bf0:	e7 e3       	ldi	r30, 0x37	; 55
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf8:	fd 81       	ldd	r31, Y+5	; 0x05
    1bfa:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	13 c0       	rjmp	.+38     	; 0x1c28 <MCAL_DIO_GetPortDirection+0xc2>
                break;
            case DIO_PORTC:
                *Copy_Direction = DDRC_REG.DDRC_REGISTER;
    1c02:	e4 e3       	ldi	r30, 0x34	; 52
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	ec 81       	ldd	r30, Y+4	; 0x04
    1c0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c0c:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	0a c0       	rjmp	.+20     	; 0x1c28 <MCAL_DIO_GetPortDirection+0xc2>
                break;
            case DIO_PORTD:
                *Copy_Direction = DDRD_REG.DDRD_REGISTER;
    1c14:	e1 e3       	ldi	r30, 0x31	; 49
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1e:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <MCAL_DIO_GetPortDirection+0xc2>
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    1c26:	19 82       	std	Y+1, r1	; 0x01
                break;
        }
    }
    return Local_ErrorStatus;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	27 96       	adiw	r28, 0x07	; 7
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <MCAL_DIO_SetPortValue>:
Std_ReturnType MCAL_DIO_SetPortValue(Port_Conig_t *Copy_PortInfo, const uint8 Copy_PortValue)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <MCAL_DIO_SetPortValue+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <MCAL_DIO_SetPortValue+0x8>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <MCAL_DIO_SetPortValue+0xa>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9b 83       	std	Y+3, r25	; 0x03
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    1c50:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PortInfo->PORT_ID > DIO_PORTE)
    1c52:	ea 81       	ldd	r30, Y+2	; 0x02
    1c54:	fb 81       	ldd	r31, Y+3	; 0x03
    1c56:	80 81       	ld	r24, Z
    1c58:	87 70       	andi	r24, 0x07	; 7
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	85 30       	cpi	r24, 0x05	; 5
    1c60:	91 05       	cpc	r25, r1
    1c62:	14 f0       	brlt	.+4      	; 0x1c68 <MCAL_DIO_SetPortValue+0x2c>
    {
        Local_ErrorStatus = E_NOT_OK;
    1c64:	19 82       	std	Y+1, r1	; 0x01
    1c66:	4f c0       	rjmp	.+158    	; 0x1d06 <MCAL_DIO_SetPortValue+0xca>
    }
    else
    {
       switch(Copy_PortInfo->PORT_ID)
    1c68:	ea 81       	ldd	r30, Y+2	; 0x02
    1c6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c6c:	80 81       	ld	r24, Z
    1c6e:	87 70       	andi	r24, 0x07	; 7
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3e 83       	std	Y+6, r19	; 0x06
    1c76:	2d 83       	std	Y+5, r18	; 0x05
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	01 f1       	breq	.+64     	; 0x1cc2 <MCAL_DIO_SetPortValue+0x86>
    1c82:	2d 81       	ldd	r18, Y+5	; 0x05
    1c84:	3e 81       	ldd	r19, Y+6	; 0x06
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <MCAL_DIO_SetPortValue+0x5a>
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <MCAL_DIO_SetPortValue+0x70>
    1c94:	37 c0       	rjmp	.+110    	; 0x1d04 <MCAL_DIO_SetPortValue+0xc8>
    1c96:	2d 81       	ldd	r18, Y+5	; 0x05
    1c98:	3e 81       	ldd	r19, Y+6	; 0x06
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	e1 f0       	breq	.+56     	; 0x1cd8 <MCAL_DIO_SetPortValue+0x9c>
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	11 f1       	breq	.+68     	; 0x1cee <MCAL_DIO_SetPortValue+0xb2>
    1caa:	2c c0       	rjmp	.+88     	; 0x1d04 <MCAL_DIO_SetPortValue+0xc8>
       {
           case DIO_PORTA:
               PORTA_REG.PORTA_REGISTER = Copy_PortValue;
    1cac:	eb e3       	ldi	r30, 0x3B	; 59
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	80 83       	st	Z, r24
               Copy_PortInfo->Port_Value = Copy_PortValue;
    1cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	81 83       	std	Z+1, r24	; 0x01
               Local_ErrorStatus = E_OK;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	22 c0       	rjmp	.+68     	; 0x1d06 <MCAL_DIO_SetPortValue+0xca>
               break;
           case DIO_PORTB:
               PORTB_REG.PORTB_REGISTER = Copy_PortValue;
    1cc2:	e8 e3       	ldi	r30, 0x38	; 56
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	80 83       	st	Z, r24
               Copy_PortInfo->Port_Value = Copy_PortValue;
    1cca:	ea 81       	ldd	r30, Y+2	; 0x02
    1ccc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	81 83       	std	Z+1, r24	; 0x01
               Local_ErrorStatus = E_OK;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	17 c0       	rjmp	.+46     	; 0x1d06 <MCAL_DIO_SetPortValue+0xca>
               break;
           case DIO_PORTC:
               PORTC_REG.PORTC_REGISTER = Copy_PortValue;
    1cd8:	e5 e3       	ldi	r30, 0x35	; 53
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	80 83       	st	Z, r24
               Copy_PortInfo->Port_Value = Copy_PortValue;
    1ce0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	81 83       	std	Z+1, r24	; 0x01
               Local_ErrorStatus = E_OK;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	0c c0       	rjmp	.+24     	; 0x1d06 <MCAL_DIO_SetPortValue+0xca>
               break;
           case DIO_PORTD:
               PORTD_REG.PORTD_REGISTER = Copy_PortValue;
    1cee:	e2 e3       	ldi	r30, 0x32	; 50
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	80 83       	st	Z, r24
               Copy_PortInfo->Port_Value = Copy_PortValue;
    1cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	81 83       	std	Z+1, r24	; 0x01
               Local_ErrorStatus = E_OK;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <MCAL_DIO_SetPortValue+0xca>
               break;
           default:
               Local_ErrorStatus = E_NOT_OK;
    1d04:	19 82       	std	Y+1, r1	; 0x01
               break;
       }   
    }
    return Local_ErrorStatus;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d08:	26 96       	adiw	r28, 0x06	; 6
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <MCAL_DIO_ReadPortValue>:
Std_ReturnType MCAL_DIO_ReadPortValue(const Port_Conig_t *Copy_PortInfo, uint8 *Copy_PortValue)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	27 97       	sbiw	r28, 0x07	; 7
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	7d 83       	std	Y+5, r23	; 0x05
    1d34:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    1d36:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PortInfo->PORT_ID > DIO_PORTE)
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	80 81       	ld	r24, Z
    1d3e:	87 70       	andi	r24, 0x07	; 7
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	85 30       	cpi	r24, 0x05	; 5
    1d46:	91 05       	cpc	r25, r1
    1d48:	14 f0       	brlt	.+4      	; 0x1d4e <MCAL_DIO_ReadPortValue+0x34>
    {
        Local_ErrorStatus = E_NOT_OK;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
    1d4c:	47 c0       	rjmp	.+142    	; 0x1ddc <MCAL_DIO_ReadPortValue+0xc2>
    }
    else
    {
        switch(Copy_PortInfo->PORT_ID)
    1d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d50:	fb 81       	ldd	r31, Y+3	; 0x03
    1d52:	80 81       	ld	r24, Z
    1d54:	87 70       	andi	r24, 0x07	; 7
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3f 83       	std	Y+7, r19	; 0x07
    1d5c:	2e 83       	std	Y+6, r18	; 0x06
    1d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d60:	9f 81       	ldd	r25, Y+7	; 0x07
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	f1 f0       	breq	.+60     	; 0x1da4 <MCAL_DIO_ReadPortValue+0x8a>
    1d68:	2e 81       	ldd	r18, Y+6	; 0x06
    1d6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <MCAL_DIO_ReadPortValue+0x62>
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	9f 81       	ldd	r25, Y+7	; 0x07
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <MCAL_DIO_ReadPortValue+0x78>
    1d7a:	2f c0       	rjmp	.+94     	; 0x1dda <MCAL_DIO_ReadPortValue+0xc0>
    1d7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	c1 f0       	breq	.+48     	; 0x1db6 <MCAL_DIO_ReadPortValue+0x9c>
    1d86:	8e 81       	ldd	r24, Y+6	; 0x06
    1d88:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	e1 f0       	breq	.+56     	; 0x1dc8 <MCAL_DIO_ReadPortValue+0xae>
    1d90:	24 c0       	rjmp	.+72     	; 0x1dda <MCAL_DIO_ReadPortValue+0xc0>
        {
            case DIO_PORTA:
                *Copy_PortValue = PINA_REG.PINA_REGISTER;
    1d92:	e9 e3       	ldi	r30, 0x39	; 57
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9c:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	1c c0       	rjmp	.+56     	; 0x1ddc <MCAL_DIO_ReadPortValue+0xc2>
                break;
            case DIO_PORTB:
                *Copy_PortValue = PINB_REG.PINB_REGISTER;
    1da4:	e6 e3       	ldi	r30, 0x36	; 54
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	ec 81       	ldd	r30, Y+4	; 0x04
    1dac:	fd 81       	ldd	r31, Y+5	; 0x05
    1dae:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	13 c0       	rjmp	.+38     	; 0x1ddc <MCAL_DIO_ReadPortValue+0xc2>
                break;
            case DIO_PORTC:
                *Copy_PortValue = PINC_REG.PINC_REGISTER;
    1db6:	e3 e3       	ldi	r30, 0x33	; 51
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dbe:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc0:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	0a c0       	rjmp	.+20     	; 0x1ddc <MCAL_DIO_ReadPortValue+0xc2>
                break;
            case DIO_PORTD:
                *Copy_PortValue = PIND_REG.PIND_REGISTER;
    1dc8:	e0 e3       	ldi	r30, 0x30	; 48
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd2:	80 83       	st	Z, r24
                Local_ErrorStatus = E_OK;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <MCAL_DIO_ReadPortValue+0xc2>
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    1dda:	19 82       	std	Y+1, r1	; 0x01
                break;
        }
    }
    
    return Local_ErrorStatus;
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dde:	27 96       	adiw	r28, 0x07	; 7
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <MCAL_DIO_TogglePortValue>:
Std_ReturnType MCAL_DIO_TogglePortValue(Port_Conig_t *Copy_PortInfo)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <MCAL_DIO_TogglePortValue+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <MCAL_DIO_TogglePortValue+0x8>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType Local_ErrorStatus = E_NOT_OK; 
    1e02:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_PortInfo->PORT_ID > DIO_PORTE)
    1e04:	ea 81       	ldd	r30, Y+2	; 0x02
    1e06:	fb 81       	ldd	r31, Y+3	; 0x03
    1e08:	80 81       	ld	r24, Z
    1e0a:	87 70       	andi	r24, 0x07	; 7
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	85 30       	cpi	r24, 0x05	; 5
    1e12:	91 05       	cpc	r25, r1
    1e14:	14 f0       	brlt	.+4      	; 0x1e1a <MCAL_DIO_TogglePortValue+0x2a>
    {
        Local_ErrorStatus = E_NOT_OK;
    1e16:	19 82       	std	Y+1, r1	; 0x01
    1e18:	67 c0       	rjmp	.+206    	; 0x1ee8 <MCAL_DIO_TogglePortValue+0xf8>
    }
    else
    {
        switch(Copy_PortInfo->PORT_ID)
    1e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1e:	80 81       	ld	r24, Z
    1e20:	87 70       	andi	r24, 0x07	; 7
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3d 83       	std	Y+5, r19	; 0x05
    1e28:	2c 83       	std	Y+4, r18	; 0x04
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 05       	cpc	r25, r1
    1e32:	31 f1       	breq	.+76     	; 0x1e80 <MCAL_DIO_TogglePortValue+0x90>
    1e34:	2c 81       	ldd	r18, Y+4	; 0x04
    1e36:	3d 81       	ldd	r19, Y+5	; 0x05
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <MCAL_DIO_TogglePortValue+0x58>
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	61 f0       	breq	.+24     	; 0x1e5e <MCAL_DIO_TogglePortValue+0x6e>
    1e46:	4f c0       	rjmp	.+158    	; 0x1ee6 <MCAL_DIO_TogglePortValue+0xf6>
    1e48:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	41 f1       	breq	.+80     	; 0x1ea2 <MCAL_DIO_TogglePortValue+0xb2>
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	9d 81       	ldd	r25, Y+5	; 0x05
    1e56:	83 30       	cpi	r24, 0x03	; 3
    1e58:	91 05       	cpc	r25, r1
    1e5a:	a1 f1       	breq	.+104    	; 0x1ec4 <MCAL_DIO_TogglePortValue+0xd4>
    1e5c:	44 c0       	rjmp	.+136    	; 0x1ee6 <MCAL_DIO_TogglePortValue+0xf6>
        {
            case DIO_PORTA:
            	PORTA_REG.PORTA_REGISTER = ~(Copy_PortInfo->Port_Value);
    1e5e:	ab e3       	ldi	r26, 0x3B	; 59
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	ea 81       	ldd	r30, Y+2	; 0x02
    1e64:	fb 81       	ldd	r31, Y+3	; 0x03
    1e66:	81 81       	ldd	r24, Z+1	; 0x01
    1e68:	80 95       	com	r24
    1e6a:	8c 93       	st	X, r24
                Copy_PortInfo->Port_Value = ~(Copy_PortInfo->Port_Value);
    1e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
    1e72:	80 95       	com	r24
    1e74:	ea 81       	ldd	r30, Y+2	; 0x02
    1e76:	fb 81       	ldd	r31, Y+3	; 0x03
    1e78:	81 83       	std	Z+1, r24	; 0x01
                Local_ErrorStatus = E_OK;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	34 c0       	rjmp	.+104    	; 0x1ee8 <MCAL_DIO_TogglePortValue+0xf8>
                break;
            case DIO_PORTB:
            	PORTB_REG.PORTB_REGISTER = ~(Copy_PortInfo->Port_Value);
    1e80:	a8 e3       	ldi	r26, 0x38	; 56
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ea 81       	ldd	r30, Y+2	; 0x02
    1e86:	fb 81       	ldd	r31, Y+3	; 0x03
    1e88:	81 81       	ldd	r24, Z+1	; 0x01
    1e8a:	80 95       	com	r24
    1e8c:	8c 93       	st	X, r24
                Copy_PortInfo->Port_Value = ~(Copy_PortInfo->Port_Value);
    1e8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e90:	fb 81       	ldd	r31, Y+3	; 0x03
    1e92:	81 81       	ldd	r24, Z+1	; 0x01
    1e94:	80 95       	com	r24
    1e96:	ea 81       	ldd	r30, Y+2	; 0x02
    1e98:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9a:	81 83       	std	Z+1, r24	; 0x01
                Local_ErrorStatus = E_OK;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	23 c0       	rjmp	.+70     	; 0x1ee8 <MCAL_DIO_TogglePortValue+0xf8>
                break;
            case DIO_PORTC:
            	PORTC_REG.PORTC_REGISTER = ~(Copy_PortInfo->Port_Value);
    1ea2:	a5 e3       	ldi	r26, 0x35	; 53
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eaa:	81 81       	ldd	r24, Z+1	; 0x01
    1eac:	80 95       	com	r24
    1eae:	8c 93       	st	X, r24
                Copy_PortInfo->Port_Value = ~(Copy_PortInfo->Port_Value);
    1eb0:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb2:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb4:	81 81       	ldd	r24, Z+1	; 0x01
    1eb6:	80 95       	com	r24
    1eb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eba:	fb 81       	ldd	r31, Y+3	; 0x03
    1ebc:	81 83       	std	Z+1, r24	; 0x01
                Local_ErrorStatus = E_OK;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	12 c0       	rjmp	.+36     	; 0x1ee8 <MCAL_DIO_TogglePortValue+0xf8>
                break;
            case DIO_PORTD:
            	PORTD_REG.PORTD_REGISTER = ~(Copy_PortInfo->Port_Value);
    1ec4:	a2 e3       	ldi	r26, 0x32	; 50
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eca:	fb 81       	ldd	r31, Y+3	; 0x03
    1ecc:	81 81       	ldd	r24, Z+1	; 0x01
    1ece:	80 95       	com	r24
    1ed0:	8c 93       	st	X, r24
                Copy_PortInfo->Port_Value = ~(Copy_PortInfo->Port_Value);
    1ed2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	80 95       	com	r24
    1eda:	ea 81       	ldd	r30, Y+2	; 0x02
    1edc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ede:	81 83       	std	Z+1, r24	; 0x01
                Local_ErrorStatus = E_OK;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <MCAL_DIO_TogglePortValue+0xf8>
                break;
            default:
                Local_ErrorStatus = E_NOT_OK;
    1ee6:	19 82       	std	Y+1, r1	; 0x01
                break;
        }
    }
    return Local_ErrorStatus;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <HAL_Push_Button_BtnConfig>:
#include "Push_Button_Interface.h"



Std_ReturnType HAL_Push_Button_BtnConfig(const PushBtn_t *Copy_Btn)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <HAL_Push_Button_BtnConfig+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <HAL_Push_Button_BtnConfig+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1f0a:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Btn->PORT_ID > Btn_PORTE || Copy_Btn->Pin_Num > Btn_PIN7)
    1f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f10:	80 81       	ld	r24, Z
    1f12:	87 70       	andi	r24, 0x07	; 7
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	85 30       	cpi	r24, 0x05	; 5
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	64 f4       	brge	.+24     	; 0x1f36 <HAL_Push_Button_BtnConfig+0x3c>
    1f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f20:	fc 81       	ldd	r31, Y+4	; 0x04
    1f22:	80 81       	ld	r24, Z
    1f24:	86 95       	lsr	r24
    1f26:	86 95       	lsr	r24
    1f28:	86 95       	lsr	r24
    1f2a:	87 70       	andi	r24, 0x07	; 7
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	88 30       	cpi	r24, 0x08	; 8
    1f32:	91 05       	cpc	r25, r1
    1f34:	14 f0       	brlt	.+4      	; 0x1f3a <HAL_Push_Button_BtnConfig+0x40>
    {
        Local_ErrorStatus = E_NOT_OK;
    1f36:	19 82       	std	Y+1, r1	; 0x01
    1f38:	39 c0       	rjmp	.+114    	; 0x1fac <HAL_Push_Button_BtnConfig+0xb2>
        Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
            .Pin_Value = Copy_Btn->Last_Status
        };
    1f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3e:	80 81       	ld	r24, Z
    1f40:	87 70       	andi	r24, 0x07	; 7
    1f42:	28 2f       	mov	r18, r24
    1f44:	23 70       	andi	r18, 0x03	; 3
    1f46:	eb 81       	ldd	r30, Y+3	; 0x03
    1f48:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4a:	80 81       	ld	r24, Z
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	96 95       	lsr	r25
    1f50:	96 95       	lsr	r25
    1f52:	96 95       	lsr	r25
    1f54:	97 70       	andi	r25, 0x07	; 7
    1f56:	eb 81       	ldd	r30, Y+3	; 0x03
    1f58:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5a:	80 81       	ld	r24, Z
    1f5c:	38 2f       	mov	r19, r24
    1f5e:	33 1f       	adc	r19, r19
    1f60:	33 27       	eor	r19, r19
    1f62:	33 1f       	adc	r19, r19
    1f64:	23 70       	andi	r18, 0x03	; 3
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	8c 7f       	andi	r24, 0xFC	; 252
    1f6a:	82 2b       	or	r24, r18
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
    1f6e:	89 2f       	mov	r24, r25
    1f70:	87 70       	andi	r24, 0x07	; 7
    1f72:	98 2f       	mov	r25, r24
    1f74:	99 0f       	add	r25, r25
    1f76:	99 0f       	add	r25, r25
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	83 7e       	andi	r24, 0xE3	; 227
    1f7c:	89 2b       	or	r24, r25
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	8f 79       	andi	r24, 0x9F	; 159
    1f84:	80 62       	ori	r24, 0x20	; 32
    1f86:	8a 83       	std	Y+2, r24	; 0x02
    1f88:	93 2f       	mov	r25, r19
    1f8a:	97 95       	ror	r25
    1f8c:	99 27       	eor	r25, r25
    1f8e:	97 95       	ror	r25
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	8f 77       	andi	r24, 0x7F	; 127
    1f94:	89 2b       	or	r24, r25
    1f96:	8a 83       	std	Y+2, r24	; 0x02
        if(!MCAL_DIO_SetPinDirection(&Btn))
    1f98:	ce 01       	movw	r24, r28
    1f9a:	02 96       	adiw	r24, 0x02	; 2
    1f9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_SetPinDirection>
    1fa0:	88 23       	and	r24, r24
    1fa2:	11 f4       	brne	.+4      	; 0x1fa8 <HAL_Push_Button_BtnConfig+0xae>
        {
            Local_ErrorStatus = E_NOT_OK;
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <HAL_Push_Button_BtnConfig+0xb2>
        }
        else
        {
            Local_ErrorStatus = E_OK;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    return Local_ErrorStatus;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <HAL_Push_Button_ReadBtn>:
Std_ReturnType HAL_Push_Button_ReadBtn(PushBtn_t *Copy_Btn, uint8 *Copy_BtnStatus)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	a3 97       	sbiw	r28, 0x23	; 35
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	99 a3       	std	Y+33, r25	; 0x21
    1fd2:	88 a3       	std	Y+32, r24	; 0x20
    1fd4:	7b a3       	std	Y+35, r23	; 0x23
    1fd6:	6a a3       	std	Y+34, r22	; 0x22
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1fd8:	1d 8e       	std	Y+29, r1	; 0x1d
    uint8 Local_BtnStatus = INITIAL_VALUE;
    1fda:	86 e0       	ldi	r24, 0x06	; 6
    1fdc:	8e 8f       	std	Y+30, r24	; 0x1e
    Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
            .Pin_Value = Copy_Btn->Last_Status
    };
    1fde:	e8 a1       	ldd	r30, Y+32	; 0x20
    1fe0:	f9 a1       	ldd	r31, Y+33	; 0x21
    1fe2:	80 81       	ld	r24, Z
    1fe4:	87 70       	andi	r24, 0x07	; 7
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	23 70       	andi	r18, 0x03	; 3
    1fea:	e8 a1       	ldd	r30, Y+32	; 0x20
    1fec:	f9 a1       	ldd	r31, Y+33	; 0x21
    1fee:	80 81       	ld	r24, Z
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	96 95       	lsr	r25
    1ff4:	96 95       	lsr	r25
    1ff6:	96 95       	lsr	r25
    1ff8:	97 70       	andi	r25, 0x07	; 7
    1ffa:	e8 a1       	ldd	r30, Y+32	; 0x20
    1ffc:	f9 a1       	ldd	r31, Y+33	; 0x21
    1ffe:	80 81       	ld	r24, Z
    2000:	38 2f       	mov	r19, r24
    2002:	33 1f       	adc	r19, r19
    2004:	33 27       	eor	r19, r19
    2006:	33 1f       	adc	r19, r19
    2008:	23 70       	andi	r18, 0x03	; 3
    200a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    200c:	8c 7f       	andi	r24, 0xFC	; 252
    200e:	82 2b       	or	r24, r18
    2010:	8f 8f       	std	Y+31, r24	; 0x1f
    2012:	89 2f       	mov	r24, r25
    2014:	87 70       	andi	r24, 0x07	; 7
    2016:	98 2f       	mov	r25, r24
    2018:	99 0f       	add	r25, r25
    201a:	99 0f       	add	r25, r25
    201c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    201e:	83 7e       	andi	r24, 0xE3	; 227
    2020:	89 2b       	or	r24, r25
    2022:	8f 8f       	std	Y+31, r24	; 0x1f
    2024:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2026:	8f 79       	andi	r24, 0x9F	; 159
    2028:	80 62       	ori	r24, 0x20	; 32
    202a:	8f 8f       	std	Y+31, r24	; 0x1f
    202c:	93 2f       	mov	r25, r19
    202e:	97 95       	ror	r25
    2030:	99 27       	eor	r25, r25
    2032:	97 95       	ror	r25
    2034:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2036:	8f 77       	andi	r24, 0x7F	; 127
    2038:	89 2b       	or	r24, r25
    203a:	8f 8f       	std	Y+31, r24	; 0x1f
    if(!MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus))
    203c:	ce 01       	movw	r24, r28
    203e:	4f 96       	adiw	r24, 0x1f	; 31
    2040:	9e 01       	movw	r18, r28
    2042:	22 5e       	subi	r18, 0xE2	; 226
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	b9 01       	movw	r22, r18
    2048:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
    204c:	88 23       	and	r24, r24
    204e:	11 f4       	brne	.+4      	; 0x2054 <HAL_Push_Button_ReadBtn+0x98>
    {
        Local_ErrorStatus = E_NOT_OK;
    2050:	1d 8e       	std	Y+29, r1	; 0x1d
    2052:	39 c1       	rjmp	.+626    	; 0x22c6 <HAL_Push_Button_ReadBtn+0x30a>
    }
    else
    {
        if(Copy_Btn->Connection_Meth == PULL_DOWN_Connection)
    2054:	e8 a1       	ldd	r30, Y+32	; 0x20
    2056:	f9 a1       	ldd	r31, Y+33	; 0x21
    2058:	80 81       	ld	r24, Z
    205a:	80 74       	andi	r24, 0x40	; 64
    205c:	88 23       	and	r24, r24
    205e:	09 f0       	breq	.+2      	; 0x2062 <HAL_Push_Button_ReadBtn+0xa6>
    2060:	95 c0       	rjmp	.+298    	; 0x218c <HAL_Push_Button_ReadBtn+0x1d0>
        {
            if(Local_BtnStatus == Btn_D_Pressed)
    2062:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	09 f0       	breq	.+2      	; 0x206a <HAL_Push_Button_ReadBtn+0xae>
    2068:	88 c0       	rjmp	.+272    	; 0x217a <HAL_Push_Button_ReadBtn+0x1be>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 ef       	ldi	r26, 0xF0	; 240
    2070:	b2 e4       	ldi	r27, 0x42	; 66
    2072:	89 8f       	std	Y+25, r24	; 0x19
    2074:	9a 8f       	std	Y+26, r25	; 0x1a
    2076:	ab 8f       	std	Y+27, r26	; 0x1b
    2078:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a e7       	ldi	r20, 0x7A	; 122
    2088:	55 e4       	ldi	r21, 0x45	; 69
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8d 8b       	std	Y+21, r24	; 0x15
    2094:	9e 8b       	std	Y+22, r25	; 0x16
    2096:	af 8b       	std	Y+23, r26	; 0x17
    2098:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <HAL_Push_Button_ReadBtn+0x100>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <HAL_Push_Button_ReadBtn+0x17e>
	else if (__tmp > 65535)
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <HAL_Push_Button_ReadBtn+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	69 8d       	ldd	r22, Y+25	; 0x19
    20d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <HAL_Push_Button_ReadBtn+0x160>
    20fe:	80 e9       	ldi	r24, 0x90	; 144
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	9a 8b       	std	Y+18, r25	; 0x12
    2104:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2106:	89 89       	ldd	r24, Y+17	; 0x11
    2108:	9a 89       	ldd	r25, Y+18	; 0x12
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <HAL_Push_Button_ReadBtn+0x14e>
    210e:	9a 8b       	std	Y+18, r25	; 0x12
    2110:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <HAL_Push_Button_ReadBtn+0x142>
    2124:	1d c0       	rjmp	.+58     	; 0x2160 <HAL_Push_Button_ReadBtn+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	98 8b       	std	Y+16, r25	; 0x10
    2140:	8f 87       	std	Y+15, r24	; 0x0f
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	98 89       	ldd	r25, Y+16	; 0x10
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <HAL_Push_Button_ReadBtn+0x18a>
    214a:	98 8b       	std	Y+16, r25	; 0x10
    214c:	8f 87       	std	Y+15, r24	; 0x0f
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <HAL_Push_Button_ReadBtn+0x1a4>
            {
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_D_Released)
                {
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
    2150:	ce 01       	movw	r24, r28
    2152:	4f 96       	adiw	r24, 0x1f	; 31
    2154:	9e 01       	movw	r18, r28
    2156:	22 5e       	subi	r18, 0xE2	; 226
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	b9 01       	movw	r22, r18
    215c:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
        if(Copy_Btn->Connection_Meth == PULL_DOWN_Connection)
        {
            if(Local_BtnStatus == Btn_D_Pressed)
            {
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_D_Released)
    2160:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2162:	88 23       	and	r24, r24
    2164:	a9 f7       	brne	.-22     	; 0x2150 <HAL_Push_Button_ReadBtn+0x194>
                {
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
                }
                *Copy_BtnStatus = Btn_D_Pressed;
    2166:	ea a1       	ldd	r30, Y+34	; 0x22
    2168:	fb a1       	ldd	r31, Y+35	; 0x23
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 83       	st	Z, r24
                Copy_Btn->Last_Status = Btn_D_Pressed;
    216e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2170:	f9 a1       	ldd	r31, Y+33	; 0x21
    2172:	80 81       	ld	r24, Z
    2174:	80 68       	ori	r24, 0x80	; 128
    2176:	80 83       	st	Z, r24
    2178:	a4 c0       	rjmp	.+328    	; 0x22c2 <HAL_Push_Button_ReadBtn+0x306>
            }
            else
            {
                *Copy_BtnStatus = Btn_D_Released;
    217a:	ea a1       	ldd	r30, Y+34	; 0x22
    217c:	fb a1       	ldd	r31, Y+35	; 0x23
    217e:	10 82       	st	Z, r1
                Copy_Btn->Last_Status = Btn_D_Released;
    2180:	e8 a1       	ldd	r30, Y+32	; 0x20
    2182:	f9 a1       	ldd	r31, Y+33	; 0x21
    2184:	80 81       	ld	r24, Z
    2186:	8f 77       	andi	r24, 0x7F	; 127
    2188:	80 83       	st	Z, r24
    218a:	9b c0       	rjmp	.+310    	; 0x22c2 <HAL_Push_Button_ReadBtn+0x306>
            }
        }
        else if(Copy_Btn->Connection_Meth == PULL_UP_Connection)
    218c:	e8 a1       	ldd	r30, Y+32	; 0x20
    218e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2190:	80 81       	ld	r24, Z
    2192:	80 74       	andi	r24, 0x40	; 64
    2194:	88 23       	and	r24, r24
    2196:	09 f4       	brne	.+2      	; 0x219a <HAL_Push_Button_ReadBtn+0x1de>
    2198:	94 c0       	rjmp	.+296    	; 0x22c2 <HAL_Push_Button_ReadBtn+0x306>
        {
            if(Local_BtnStatus == Btn_U_Pressed)
    219a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219c:	88 23       	and	r24, r24
    219e:	09 f0       	breq	.+2      	; 0x21a2 <HAL_Push_Button_ReadBtn+0x1e6>
    21a0:	87 c0       	rjmp	.+270    	; 0x22b0 <HAL_Push_Button_ReadBtn+0x2f4>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 ef       	ldi	r26, 0xF0	; 240
    21a8:	b2 e4       	ldi	r27, 0x42	; 66
    21aa:	8b 87       	std	Y+11, r24	; 0x0b
    21ac:	9c 87       	std	Y+12, r25	; 0x0c
    21ae:	ad 87       	std	Y+13, r26	; 0x0d
    21b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a e7       	ldi	r20, 0x7A	; 122
    21c0:	55 e4       	ldi	r21, 0x45	; 69
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8f 83       	std	Y+7, r24	; 0x07
    21cc:	98 87       	std	Y+8, r25	; 0x08
    21ce:	a9 87       	std	Y+9, r26	; 0x09
    21d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <HAL_Push_Button_ReadBtn+0x238>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <HAL_Push_Button_ReadBtn+0x2b6>
	else if (__tmp > 65535)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <HAL_Push_Button_ReadBtn+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6b 85       	ldd	r22, Y+11	; 0x0b
    220e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9e 85       	ldd	r25, Y+14	; 0x0e
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <HAL_Push_Button_ReadBtn+0x298>
    2236:	80 e9       	ldi	r24, 0x90	; 144
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	8b 83       	std	Y+3, r24	; 0x03
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <HAL_Push_Button_ReadBtn+0x286>
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <HAL_Push_Button_ReadBtn+0x27a>
    225c:	1d c0       	rjmp	.+58     	; 0x2298 <HAL_Push_Button_ReadBtn+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <HAL_Push_Button_ReadBtn+0x2c2>
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	08 c0       	rjmp	.+16     	; 0x2298 <HAL_Push_Button_ReadBtn+0x2dc>
            {
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_U_Released)
                {
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
    2288:	ce 01       	movw	r24, r28
    228a:	4f 96       	adiw	r24, 0x1f	; 31
    228c:	9e 01       	movw	r18, r28
    228e:	22 5e       	subi	r18, 0xE2	; 226
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	b9 01       	movw	r22, r18
    2294:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
        else if(Copy_Btn->Connection_Meth == PULL_UP_Connection)
        {
            if(Local_BtnStatus == Btn_U_Pressed)
            {
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_U_Released)
    2298:	8e 8d       	ldd	r24, Y+30	; 0x1e
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	a9 f7       	brne	.-22     	; 0x2288 <HAL_Push_Button_ReadBtn+0x2cc>
                {
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
                }
                *Copy_BtnStatus = Btn_U_Pressed;
    229e:	ea a1       	ldd	r30, Y+34	; 0x22
    22a0:	fb a1       	ldd	r31, Y+35	; 0x23
    22a2:	10 82       	st	Z, r1
                Copy_Btn->Last_Status = Btn_U_Pressed;
    22a4:	e8 a1       	ldd	r30, Y+32	; 0x20
    22a6:	f9 a1       	ldd	r31, Y+33	; 0x21
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 77       	andi	r24, 0x7F	; 127
    22ac:	80 83       	st	Z, r24
    22ae:	09 c0       	rjmp	.+18     	; 0x22c2 <HAL_Push_Button_ReadBtn+0x306>
            }
            else
            {
                *Copy_BtnStatus = Btn_U_Released;
    22b0:	ea a1       	ldd	r30, Y+34	; 0x22
    22b2:	fb a1       	ldd	r31, Y+35	; 0x23
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 83       	st	Z, r24
                Copy_Btn->Last_Status = Btn_U_Released;
    22b8:	e8 a1       	ldd	r30, Y+32	; 0x20
    22ba:	f9 a1       	ldd	r31, Y+33	; 0x21
    22bc:	80 81       	ld	r24, Z
    22be:	80 68       	ori	r24, 0x80	; 128
    22c0:	80 83       	st	Z, r24
            }
        }
        Local_ErrorStatus = E_OK;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    return Local_ErrorStatus;
    22c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    22c8:	a3 96       	adiw	r28, 0x23	; 35
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <HAL_LED_LEDConfig>:

#include "Push_Button_Interface.h"



Std_ReturnType HAL_Push_Button_BtnConfig(const PushBtn_t *Copy_Btn)
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <HAL_LED_LEDConfig+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <HAL_LED_LEDConfig+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
{
    22ea:	19 82       	std	Y+1, r1	; 0x01
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    22ec:	eb 81       	ldd	r30, Y+3	; 0x03
    22ee:	fc 81       	ldd	r31, Y+4	; 0x04
    22f0:	80 81       	ld	r24, Z
    22f2:	87 70       	andi	r24, 0x07	; 7
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	85 30       	cpi	r24, 0x05	; 5
    22fa:	91 05       	cpc	r25, r1
    22fc:	64 f4       	brge	.+24     	; 0x2316 <HAL_LED_LEDConfig+0x3c>
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	80 81       	ld	r24, Z
    2304:	86 95       	lsr	r24
    2306:	86 95       	lsr	r24
    2308:	86 95       	lsr	r24
    230a:	87 70       	andi	r24, 0x07	; 7
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	88 30       	cpi	r24, 0x08	; 8
    2312:	91 05       	cpc	r25, r1
    2314:	14 f0       	brlt	.+4      	; 0x231a <HAL_LED_LEDConfig+0x40>
    if(Copy_Btn->PORT_ID > Btn_PORTE || Copy_Btn->Pin_Num > Btn_PIN7)
    {
    2316:	19 82       	std	Y+1, r1	; 0x01
    2318:	48 c0       	rjmp	.+144    	; 0x23aa <HAL_LED_LEDConfig+0xd0>
    {
        Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
            .Pin_Value = Copy_Btn->Last_Status
    231a:	eb 81       	ldd	r30, Y+3	; 0x03
    231c:	fc 81       	ldd	r31, Y+4	; 0x04
    231e:	80 81       	ld	r24, Z
    2320:	87 70       	andi	r24, 0x07	; 7
    2322:	28 2f       	mov	r18, r24
    2324:	23 70       	andi	r18, 0x03	; 3
    2326:	eb 81       	ldd	r30, Y+3	; 0x03
    2328:	fc 81       	ldd	r31, Y+4	; 0x04
    232a:	80 81       	ld	r24, Z
    232c:	98 2f       	mov	r25, r24
    232e:	96 95       	lsr	r25
    2330:	96 95       	lsr	r25
    2332:	96 95       	lsr	r25
    2334:	97 70       	andi	r25, 0x07	; 7
    2336:	eb 81       	ldd	r30, Y+3	; 0x03
    2338:	fc 81       	ldd	r31, Y+4	; 0x04
    233a:	80 81       	ld	r24, Z
    233c:	38 2f       	mov	r19, r24
    233e:	32 95       	swap	r19
    2340:	36 95       	lsr	r19
    2342:	36 95       	lsr	r19
    2344:	33 70       	andi	r19, 0x03	; 3
    2346:	31 70       	andi	r19, 0x01	; 1
    2348:	23 70       	andi	r18, 0x03	; 3
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	8c 7f       	andi	r24, 0xFC	; 252
    234e:	82 2b       	or	r24, r18
    2350:	8a 83       	std	Y+2, r24	; 0x02
    2352:	89 2f       	mov	r24, r25
    2354:	87 70       	andi	r24, 0x07	; 7
    2356:	98 2f       	mov	r25, r24
    2358:	99 0f       	add	r25, r25
    235a:	99 0f       	add	r25, r25
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	83 7e       	andi	r24, 0xE3	; 227
    2360:	89 2b       	or	r24, r25
    2362:	8a 83       	std	Y+2, r24	; 0x02
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	8f 79       	andi	r24, 0x9F	; 159
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	93 2f       	mov	r25, r19
    236c:	97 95       	ror	r25
    236e:	99 27       	eor	r25, r25
    2370:	97 95       	ror	r25
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	8f 77       	andi	r24, 0x7F	; 127
    2376:	89 2b       	or	r24, r25
    2378:	8a 83       	std	Y+2, r24	; 0x02
        };
    237a:	ce 01       	movw	r24, r28
    237c:	02 96       	adiw	r24, 0x02	; 2
    237e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_SetPinDirection>
    2382:	88 23       	and	r24, r24
    2384:	11 f4       	brne	.+4      	; 0x238a <HAL_LED_LEDConfig+0xb0>
        if(!MCAL_DIO_SetPinDirection(&Btn))
        {
    2386:	19 82       	std	Y+1, r1	; 0x01
    2388:	10 c0       	rjmp	.+32     	; 0x23aa <HAL_LED_LEDConfig+0xd0>
            Local_ErrorStatus = E_NOT_OK;
        }
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	88 1f       	adc	r24, r24
    238e:	88 27       	eor	r24, r24
    2390:	88 1f       	adc	r24, r24
    2392:	28 2f       	mov	r18, r24
    2394:	ce 01       	movw	r24, r28
    2396:	02 96       	adiw	r24, 0x02	; 2
    2398:	62 2f       	mov	r22, r18
    239a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    239e:	88 23       	and	r24, r24
    23a0:	11 f4       	brne	.+4      	; 0x23a6 <HAL_LED_LEDConfig+0xcc>
        else
        {
    23a2:	19 82       	std	Y+1, r1	; 0x01
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <HAL_LED_LEDConfig+0xd0>
            Local_ErrorStatus = E_OK;
        }
    }
    return Local_ErrorStatus;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	89 83       	std	Y+1, r24	; 0x01
}
Std_ReturnType HAL_Push_Button_ReadBtn(PushBtn_t *Copy_Btn, uint8 *Copy_BtnStatus)
{
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <HAL_LED_LEDOn>:
    uint8 Local_BtnStatus = INITIAL_VALUE;
    Pin_Conig_t Btn = {
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <HAL_LED_LEDOn+0x6>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <HAL_LED_LEDOn+0x8>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9c 83       	std	Y+4, r25	; 0x04
    23c8:	8b 83       	std	Y+3, r24	; 0x03
            .PORT_ID = Copy_Btn->PORT_ID,
    23ca:	19 82       	std	Y+1, r1	; 0x01
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
            .Pin_Value = Copy_Btn->Last_Status
    };
    if(!MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus))
    {
    23cc:	eb 81       	ldd	r30, Y+3	; 0x03
    23ce:	fc 81       	ldd	r31, Y+4	; 0x04
    23d0:	80 81       	ld	r24, Z
    23d2:	87 70       	andi	r24, 0x07	; 7
    23d4:	28 2f       	mov	r18, r24
    23d6:	23 70       	andi	r18, 0x03	; 3
    23d8:	eb 81       	ldd	r30, Y+3	; 0x03
    23da:	fc 81       	ldd	r31, Y+4	; 0x04
    23dc:	80 81       	ld	r24, Z
    23de:	98 2f       	mov	r25, r24
    23e0:	96 95       	lsr	r25
    23e2:	96 95       	lsr	r25
    23e4:	96 95       	lsr	r25
    23e6:	97 70       	andi	r25, 0x07	; 7
    23e8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ea:	fc 81       	ldd	r31, Y+4	; 0x04
    23ec:	80 81       	ld	r24, Z
    23ee:	38 2f       	mov	r19, r24
    23f0:	32 95       	swap	r19
    23f2:	36 95       	lsr	r19
    23f4:	36 95       	lsr	r19
    23f6:	33 70       	andi	r19, 0x03	; 3
    23f8:	31 70       	andi	r19, 0x01	; 1
    23fa:	23 70       	andi	r18, 0x03	; 3
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	8c 7f       	andi	r24, 0xFC	; 252
    2400:	82 2b       	or	r24, r18
    2402:	8a 83       	std	Y+2, r24	; 0x02
    2404:	89 2f       	mov	r24, r25
    2406:	87 70       	andi	r24, 0x07	; 7
    2408:	98 2f       	mov	r25, r24
    240a:	99 0f       	add	r25, r25
    240c:	99 0f       	add	r25, r25
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	83 7e       	andi	r24, 0xE3	; 227
    2412:	89 2b       	or	r24, r25
    2414:	8a 83       	std	Y+2, r24	; 0x02
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	8f 79       	andi	r24, 0x9F	; 159
    241a:	8a 83       	std	Y+2, r24	; 0x02
    241c:	93 2f       	mov	r25, r19
    241e:	97 95       	ror	r25
    2420:	99 27       	eor	r25, r25
    2422:	97 95       	ror	r25
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	8f 77       	andi	r24, 0x7F	; 127
    2428:	89 2b       	or	r24, r25
    242a:	8a 83       	std	Y+2, r24	; 0x02
        Local_ErrorStatus = E_NOT_OK;
    242c:	ce 01       	movw	r24, r28
    242e:	02 96       	adiw	r24, 0x02	; 2
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    2436:	88 23       	and	r24, r24
    2438:	11 f4       	brne	.+4      	; 0x243e <HAL_LED_LEDOn+0x84>
    }
    else
    243a:	19 82       	std	Y+1, r1	; 0x01
    243c:	12 c0       	rjmp	.+36     	; 0x2462 <HAL_LED_LEDOn+0xa8>
    {
        if(Copy_Btn->Connection_Meth == PULL_DOWN_Connection)
        {
            if(Local_BtnStatus == Btn_D_Pressed)
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	88 1f       	adc	r24, r24
    2442:	88 27       	eor	r24, r24
    2444:	88 1f       	adc	r24, r24
    2446:	eb 81       	ldd	r30, Y+3	; 0x03
    2448:	fc 81       	ldd	r31, Y+4	; 0x04
    244a:	81 70       	andi	r24, 0x01	; 1
    244c:	98 2f       	mov	r25, r24
    244e:	92 95       	swap	r25
    2450:	99 0f       	add	r25, r25
    2452:	99 0f       	add	r25, r25
    2454:	90 7c       	andi	r25, 0xC0	; 192
    2456:	80 81       	ld	r24, Z
    2458:	8f 7b       	andi	r24, 0xBF	; 191
    245a:	89 2b       	or	r24, r25
    245c:	80 83       	st	Z, r24
            {
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_D_Released)
    2462:	89 81       	ldd	r24, Y+1	; 0x01
                {
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <HAL_LED_LEDOff>:
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
                }
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <HAL_LED_LEDOff+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <HAL_LED_LEDOff+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
                *Copy_BtnStatus = Btn_D_Pressed;
    2482:	19 82       	std	Y+1, r1	; 0x01
                Copy_Btn->Last_Status = Btn_D_Pressed;
            }
            else
            {
                *Copy_BtnStatus = Btn_D_Released;
                Copy_Btn->Last_Status = Btn_D_Released;
    2484:	eb 81       	ldd	r30, Y+3	; 0x03
    2486:	fc 81       	ldd	r31, Y+4	; 0x04
    2488:	80 81       	ld	r24, Z
    248a:	87 70       	andi	r24, 0x07	; 7
    248c:	28 2f       	mov	r18, r24
    248e:	23 70       	andi	r18, 0x03	; 3
    2490:	eb 81       	ldd	r30, Y+3	; 0x03
    2492:	fc 81       	ldd	r31, Y+4	; 0x04
    2494:	80 81       	ld	r24, Z
    2496:	98 2f       	mov	r25, r24
    2498:	96 95       	lsr	r25
    249a:	96 95       	lsr	r25
    249c:	96 95       	lsr	r25
    249e:	97 70       	andi	r25, 0x07	; 7
    24a0:	eb 81       	ldd	r30, Y+3	; 0x03
    24a2:	fc 81       	ldd	r31, Y+4	; 0x04
    24a4:	80 81       	ld	r24, Z
    24a6:	38 2f       	mov	r19, r24
    24a8:	32 95       	swap	r19
    24aa:	36 95       	lsr	r19
    24ac:	36 95       	lsr	r19
    24ae:	33 70       	andi	r19, 0x03	; 3
    24b0:	31 70       	andi	r19, 0x01	; 1
    24b2:	23 70       	andi	r18, 0x03	; 3
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	8c 7f       	andi	r24, 0xFC	; 252
    24b8:	82 2b       	or	r24, r18
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	89 2f       	mov	r24, r25
    24be:	87 70       	andi	r24, 0x07	; 7
    24c0:	98 2f       	mov	r25, r24
    24c2:	99 0f       	add	r25, r25
    24c4:	99 0f       	add	r25, r25
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	83 7e       	andi	r24, 0xE3	; 227
    24ca:	89 2b       	or	r24, r25
    24cc:	8a 83       	std	Y+2, r24	; 0x02
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	8f 79       	andi	r24, 0x9F	; 159
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	93 2f       	mov	r25, r19
    24d6:	97 95       	ror	r25
    24d8:	99 27       	eor	r25, r25
    24da:	97 95       	ror	r25
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	8f 77       	andi	r24, 0x7F	; 127
    24e0:	89 2b       	or	r24, r25
    24e2:	8a 83       	std	Y+2, r24	; 0x02
            }
    24e4:	ce 01       	movw	r24, r28
    24e6:	02 96       	adiw	r24, 0x02	; 2
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    24ee:	88 23       	and	r24, r24
    24f0:	11 f4       	brne	.+4      	; 0x24f6 <HAL_LED_LEDOff+0x84>
        }
        else if(Copy_Btn->Connection_Meth == PULL_UP_Connection)
    24f2:	19 82       	std	Y+1, r1	; 0x01
    24f4:	12 c0       	rjmp	.+36     	; 0x251a <HAL_LED_LEDOff+0xa8>
        {
            if(Local_BtnStatus == Btn_U_Pressed)
            {
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	88 1f       	adc	r24, r24
    24fa:	88 27       	eor	r24, r24
    24fc:	88 1f       	adc	r24, r24
    24fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2500:	fc 81       	ldd	r31, Y+4	; 0x04
    2502:	81 70       	andi	r24, 0x01	; 1
    2504:	98 2f       	mov	r25, r24
    2506:	92 95       	swap	r25
    2508:	99 0f       	add	r25, r25
    250a:	99 0f       	add	r25, r25
    250c:	90 7c       	andi	r25, 0xC0	; 192
    250e:	80 81       	ld	r24, Z
    2510:	8f 7b       	andi	r24, 0xBF	; 191
    2512:	89 2b       	or	r24, r25
    2514:	80 83       	st	Z, r24
                while(Local_BtnStatus != Btn_U_Released)
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	89 83       	std	Y+1, r24	; 0x01
                {
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
                }
    251a:	89 81       	ldd	r24, Y+1	; 0x01
                *Copy_BtnStatus = Btn_U_Pressed;
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <HAL_LED_LEDToggle>:
                Copy_Btn->Last_Status = Btn_U_Pressed;
            }
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <HAL_LED_LEDToggle+0x6>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <HAL_LED_LEDToggle+0x8>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
            else
    253a:	19 82       	std	Y+1, r1	; 0x01
            {
                *Copy_BtnStatus = Btn_U_Released;
                Copy_Btn->Last_Status = Btn_U_Released;
            }
        }
        Local_ErrorStatus = E_OK;
    253c:	eb 81       	ldd	r30, Y+3	; 0x03
    253e:	fc 81       	ldd	r31, Y+4	; 0x04
    2540:	80 81       	ld	r24, Z
    2542:	87 70       	andi	r24, 0x07	; 7
    2544:	28 2f       	mov	r18, r24
    2546:	23 70       	andi	r18, 0x03	; 3
    2548:	eb 81       	ldd	r30, Y+3	; 0x03
    254a:	fc 81       	ldd	r31, Y+4	; 0x04
    254c:	80 81       	ld	r24, Z
    254e:	98 2f       	mov	r25, r24
    2550:	96 95       	lsr	r25
    2552:	96 95       	lsr	r25
    2554:	96 95       	lsr	r25
    2556:	97 70       	andi	r25, 0x07	; 7
    2558:	eb 81       	ldd	r30, Y+3	; 0x03
    255a:	fc 81       	ldd	r31, Y+4	; 0x04
    255c:	80 81       	ld	r24, Z
    255e:	38 2f       	mov	r19, r24
    2560:	32 95       	swap	r19
    2562:	36 95       	lsr	r19
    2564:	36 95       	lsr	r19
    2566:	33 70       	andi	r19, 0x03	; 3
    2568:	31 70       	andi	r19, 0x01	; 1
    256a:	23 70       	andi	r18, 0x03	; 3
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	8c 7f       	andi	r24, 0xFC	; 252
    2570:	82 2b       	or	r24, r18
    2572:	8a 83       	std	Y+2, r24	; 0x02
    2574:	89 2f       	mov	r24, r25
    2576:	87 70       	andi	r24, 0x07	; 7
    2578:	98 2f       	mov	r25, r24
    257a:	99 0f       	add	r25, r25
    257c:	99 0f       	add	r25, r25
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	83 7e       	andi	r24, 0xE3	; 227
    2582:	89 2b       	or	r24, r25
    2584:	8a 83       	std	Y+2, r24	; 0x02
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	8f 79       	andi	r24, 0x9F	; 159
    258a:	8a 83       	std	Y+2, r24	; 0x02
    258c:	93 2f       	mov	r25, r19
    258e:	97 95       	ror	r25
    2590:	99 27       	eor	r25, r25
    2592:	97 95       	ror	r25
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	8f 77       	andi	r24, 0x7F	; 127
    2598:	89 2b       	or	r24, r25
    259a:	8a 83       	std	Y+2, r24	; 0x02
    }
    259c:	ce 01       	movw	r24, r28
    259e:	02 96       	adiw	r24, 0x02	; 2
    25a0:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
    25a4:	88 23       	and	r24, r24
    25a6:	11 f4       	brne	.+4      	; 0x25ac <HAL_LED_LEDToggle+0x82>
    return Local_ErrorStatus;
}
    25a8:	19 82       	std	Y+1, r1	; 0x01
    25aa:	12 c0       	rjmp	.+36     	; 0x25d0 <HAL_LED_LEDToggle+0xa6>
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	88 1f       	adc	r24, r24
    25b0:	88 27       	eor	r24, r24
    25b2:	88 1f       	adc	r24, r24
    25b4:	eb 81       	ldd	r30, Y+3	; 0x03
    25b6:	fc 81       	ldd	r31, Y+4	; 0x04
    25b8:	81 70       	andi	r24, 0x01	; 1
    25ba:	98 2f       	mov	r25, r24
    25bc:	92 95       	swap	r25
    25be:	99 0f       	add	r25, r25
    25c0:	99 0f       	add	r25, r25
    25c2:	90 7c       	andi	r25, 0xC0	; 192
    25c4:	80 81       	ld	r24, Z
    25c6:	8f 7b       	andi	r24, 0xBF	; 191
    25c8:	89 2b       	or	r24, r25
    25ca:	80 83       	st	Z, r24
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <HAL_LED_LEDBlink>:
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	a1 97       	sbiw	r28, 0x21	; 33
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	99 a3       	std	Y+33, r25	; 0x21
    25f6:	88 a3       	std	Y+32, r24	; 0x20
    25f8:	1e 8e       	std	Y+30, r1	; 0x1e
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
    25fe:	e8 a1       	ldd	r30, Y+32	; 0x20
    2600:	f9 a1       	ldd	r31, Y+33	; 0x21
    2602:	80 81       	ld	r24, Z
    2604:	87 70       	andi	r24, 0x07	; 7
    2606:	28 2f       	mov	r18, r24
    2608:	23 70       	andi	r18, 0x03	; 3
    260a:	e8 a1       	ldd	r30, Y+32	; 0x20
    260c:	f9 a1       	ldd	r31, Y+33	; 0x21
    260e:	80 81       	ld	r24, Z
    2610:	98 2f       	mov	r25, r24
    2612:	96 95       	lsr	r25
    2614:	96 95       	lsr	r25
    2616:	96 95       	lsr	r25
    2618:	97 70       	andi	r25, 0x07	; 7
    261a:	e8 a1       	ldd	r30, Y+32	; 0x20
    261c:	f9 a1       	ldd	r31, Y+33	; 0x21
    261e:	80 81       	ld	r24, Z
    2620:	38 2f       	mov	r19, r24
    2622:	32 95       	swap	r19
    2624:	36 95       	lsr	r19
    2626:	36 95       	lsr	r19
    2628:	33 70       	andi	r19, 0x03	; 3
    262a:	31 70       	andi	r19, 0x01	; 1
    262c:	23 70       	andi	r18, 0x03	; 3
    262e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2630:	8c 7f       	andi	r24, 0xFC	; 252
    2632:	82 2b       	or	r24, r18
    2634:	8f 8f       	std	Y+31, r24	; 0x1f
    2636:	89 2f       	mov	r24, r25
    2638:	87 70       	andi	r24, 0x07	; 7
    263a:	98 2f       	mov	r25, r24
    263c:	99 0f       	add	r25, r25
    263e:	99 0f       	add	r25, r25
    2640:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2642:	83 7e       	andi	r24, 0xE3	; 227
    2644:	89 2b       	or	r24, r25
    2646:	8f 8f       	std	Y+31, r24	; 0x1f
    2648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    264a:	8f 79       	andi	r24, 0x9F	; 159
    264c:	8f 8f       	std	Y+31, r24	; 0x1f
    264e:	93 2f       	mov	r25, r19
    2650:	97 95       	ror	r25
    2652:	99 27       	eor	r25, r25
    2654:	97 95       	ror	r25
    2656:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2658:	8f 77       	andi	r24, 0x7F	; 127
    265a:	89 2b       	or	r24, r25
    265c:	8f 8f       	std	Y+31, r24	; 0x1f
    265e:	05 c1       	rjmp	.+522    	; 0x286a <HAL_LED_LEDBlink+0x28a>
    2660:	ce 01       	movw	r24, r28
    2662:	4f 96       	adiw	r24, 0x1f	; 31
    2664:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
    2668:	88 23       	and	r24, r24
    266a:	11 f4       	brne	.+4      	; 0x2670 <HAL_LED_LEDBlink+0x90>
    266c:	1e 8e       	std	Y+30, r1	; 0x1e
    266e:	12 c0       	rjmp	.+36     	; 0x2694 <HAL_LED_LEDBlink+0xb4>
    2670:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2672:	88 1f       	adc	r24, r24
    2674:	88 27       	eor	r24, r24
    2676:	88 1f       	adc	r24, r24
    2678:	e8 a1       	ldd	r30, Y+32	; 0x20
    267a:	f9 a1       	ldd	r31, Y+33	; 0x21
    267c:	81 70       	andi	r24, 0x01	; 1
    267e:	98 2f       	mov	r25, r24
    2680:	92 95       	swap	r25
    2682:	99 0f       	add	r25, r25
    2684:	99 0f       	add	r25, r25
    2686:	90 7c       	andi	r25, 0xC0	; 192
    2688:	80 81       	ld	r24, Z
    268a:	8f 7b       	andi	r24, 0xBF	; 191
    268c:	89 2b       	or	r24, r25
    268e:	80 83       	st	Z, r24
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	8e 8f       	std	Y+30, r24	; 0x1e
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	aa ef       	ldi	r26, 0xFA	; 250
    269a:	b3 e4       	ldi	r27, 0x43	; 67
    269c:	89 8f       	std	Y+25, r24	; 0x19
    269e:	9a 8f       	std	Y+26, r25	; 0x1a
    26a0:	ab 8f       	std	Y+27, r26	; 0x1b
    26a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	69 8d       	ldd	r22, Y+25	; 0x19
    26a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a e7       	ldi	r20, 0x7A	; 122
    26b2:	55 e4       	ldi	r21, 0x45	; 69
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8d 8b       	std	Y+21, r24	; 0x15
    26be:	9e 8b       	std	Y+22, r25	; 0x16
    26c0:	af 8b       	std	Y+23, r26	; 0x17
    26c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26c4:	6d 89       	ldd	r22, Y+21	; 0x15
    26c6:	7e 89       	ldd	r23, Y+22	; 0x16
    26c8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ca:	98 8d       	ldd	r25, Y+24	; 0x18
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <HAL_LED_LEDBlink+0x106>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c 8b       	std	Y+20, r25	; 0x14
    26e2:	8b 8b       	std	Y+19, r24	; 0x13
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <HAL_LED_LEDBlink+0x184>
	else if (__tmp > 65535)
    26e6:	6d 89       	ldd	r22, Y+21	; 0x15
    26e8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <HAL_LED_LEDBlink+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <HAL_LED_LEDBlink+0x166>
    2728:	80 e9       	ldi	r24, 0x90	; 144
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	9a 8b       	std	Y+18, r25	; 0x12
    272e:	89 8b       	std	Y+17, r24	; 0x11
    2730:	89 89       	ldd	r24, Y+17	; 0x11
    2732:	9a 89       	ldd	r25, Y+18	; 0x12
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <HAL_LED_LEDBlink+0x154>
    2738:	9a 8b       	std	Y+18, r25	; 0x12
    273a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9c 8b       	std	Y+20, r25	; 0x14
    2744:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <HAL_LED_LEDBlink+0x148>
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <HAL_LED_LEDBlink+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
    2764:	8b 89       	ldd	r24, Y+19	; 0x13
    2766:	9c 89       	ldd	r25, Y+20	; 0x14
    2768:	98 8b       	std	Y+16, r25	; 0x10
    276a:	8f 87       	std	Y+15, r24	; 0x0f
    276c:	8f 85       	ldd	r24, Y+15	; 0x0f
    276e:	98 89       	ldd	r25, Y+16	; 0x10
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <HAL_LED_LEDBlink+0x190>
    2774:	98 8b       	std	Y+16, r25	; 0x10
    2776:	8f 87       	std	Y+15, r24	; 0x0f
    2778:	ce 01       	movw	r24, r28
    277a:	4f 96       	adiw	r24, 0x1f	; 31
    277c:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	aa ef       	ldi	r26, 0xFA	; 250
    2786:	b3 e4       	ldi	r27, 0x43	; 67
    2788:	8b 87       	std	Y+11, r24	; 0x0b
    278a:	9c 87       	std	Y+12, r25	; 0x0c
    278c:	ad 87       	std	Y+13, r26	; 0x0d
    278e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a e7       	ldi	r20, 0x7A	; 122
    279e:	55 e4       	ldi	r21, 0x45	; 69
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	8f 83       	std	Y+7, r24	; 0x07
    27aa:	98 87       	std	Y+8, r25	; 0x08
    27ac:	a9 87       	std	Y+9, r26	; 0x09
    27ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <HAL_LED_LEDBlink+0x1f2>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	3f c0       	rjmp	.+126    	; 0x2850 <HAL_LED_LEDBlink+0x270>
	else if (__tmp > 65535)
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	4c f5       	brge	.+82     	; 0x283c <HAL_LED_LEDBlink+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e2       	ldi	r20, 0x20	; 32
    27f8:	51 e4       	ldi	r21, 0x41	; 65
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <HAL_LED_LEDBlink+0x252>
    2814:	80 e9       	ldi	r24, 0x90	; 144
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <HAL_LED_LEDBlink+0x240>
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f7       	brne	.-38     	; 0x2814 <HAL_LED_LEDBlink+0x234>
    283a:	14 c0       	rjmp	.+40     	; 0x2864 <HAL_LED_LEDBlink+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <HAL_LED_LEDBlink+0x27c>
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2866:	81 50       	subi	r24, 0x01	; 1
    2868:	8d 8f       	std	Y+29, r24	; 0x1d
    286a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    286c:	88 23       	and	r24, r24
    286e:	09 f0       	breq	.+2      	; 0x2872 <HAL_LED_LEDBlink+0x292>
    2870:	f7 ce       	rjmp	.-530    	; 0x2660 <HAL_LED_LEDBlink+0x80>
    2872:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2874:	a1 96       	adiw	r28, 0x21	; 33
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <HAL_LED_LEDArrayConfig>:
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <HAL_LED_LEDArrayConfig+0x6>
    288c:	00 d0       	rcall	.+0      	; 0x288e <HAL_LED_LEDArrayConfig+0x8>
    288e:	0f 92       	push	r0
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	9d 83       	std	Y+5, r25	; 0x05
    2896:	8c 83       	std	Y+4, r24	; 0x04
    2898:	1a 82       	std	Y+2, r1	; 0x02
    289a:	ec 81       	ldd	r30, Y+4	; 0x04
    289c:	fd 81       	ldd	r31, Y+5	; 0x05
    289e:	80 81       	ld	r24, Z
    28a0:	87 70       	andi	r24, 0x07	; 7
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	85 30       	cpi	r24, 0x05	; 5
    28a8:	91 05       	cpc	r25, r1
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <HAL_LED_LEDArrayConfig+0x30>
    28ac:	ec 81       	ldd	r30, Y+4	; 0x04
    28ae:	fd 81       	ldd	r31, Y+5	; 0x05
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	88 30       	cpi	r24, 0x08	; 8
    28b4:	10 f0       	brcs	.+4      	; 0x28ba <HAL_LED_LEDArrayConfig+0x34>
    28b6:	1a 82       	std	Y+2, r1	; 0x02
    28b8:	38 c0       	rjmp	.+112    	; 0x292a <HAL_LED_LEDArrayConfig+0xa4>
    28ba:	ec 81       	ldd	r30, Y+4	; 0x04
    28bc:	fd 81       	ldd	r31, Y+5	; 0x05
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	26 c0       	rjmp	.+76     	; 0x2910 <HAL_LED_LEDArrayConfig+0x8a>
    28c4:	ec 81       	ldd	r30, Y+4	; 0x04
    28c6:	fd 81       	ldd	r31, Y+5	; 0x05
    28c8:	80 81       	ld	r24, Z
    28ca:	87 70       	andi	r24, 0x07	; 7
    28cc:	98 2f       	mov	r25, r24
    28ce:	93 70       	andi	r25, 0x03	; 3
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	81 50       	subi	r24, 0x01	; 1
    28d4:	28 2f       	mov	r18, r24
    28d6:	27 70       	andi	r18, 0x07	; 7
    28d8:	1b 82       	std	Y+3, r1	; 0x03
    28da:	93 70       	andi	r25, 0x03	; 3
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	8c 7f       	andi	r24, 0xFC	; 252
    28e0:	89 2b       	or	r24, r25
    28e2:	8b 83       	std	Y+3, r24	; 0x03
    28e4:	82 2f       	mov	r24, r18
    28e6:	87 70       	andi	r24, 0x07	; 7
    28e8:	98 2f       	mov	r25, r24
    28ea:	99 0f       	add	r25, r25
    28ec:	99 0f       	add	r25, r25
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	83 7e       	andi	r24, 0xE3	; 227
    28f2:	89 2b       	or	r24, r25
    28f4:	8b 83       	std	Y+3, r24	; 0x03
    28f6:	ce 01       	movw	r24, r28
    28f8:	03 96       	adiw	r24, 0x03	; 3
    28fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_SetPinDirection>
    28fe:	88 23       	and	r24, r24
    2900:	11 f4       	brne	.+4      	; 0x2906 <HAL_LED_LEDArrayConfig+0x80>
    2902:	1a 82       	std	Y+2, r1	; 0x02
    2904:	02 c0       	rjmp	.+4      	; 0x290a <HAL_LED_LEDArrayConfig+0x84>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	8a 83       	std	Y+2, r24	; 0x02
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	33 27       	eor	r19, r19
    2916:	27 fd       	sbrc	r18, 7
    2918:	30 95       	com	r19
    291a:	ec 81       	ldd	r30, Y+4	; 0x04
    291c:	fd 81       	ldd	r31, Y+5	; 0x05
    291e:	81 81       	ldd	r24, Z+1	; 0x01
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	28 17       	cp	r18, r24
    2926:	39 07       	cpc	r19, r25
    2928:	6c f6       	brge	.-102    	; 0x28c4 <HAL_LED_LEDArrayConfig+0x3e>
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <HAL_LED_LEDArrayPatternOn>:
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	00 d0       	rcall	.+0      	; 0x2942 <HAL_LED_LEDArrayPatternOn+0x6>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <HAL_LED_LEDArrayPatternOn+0x8>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <HAL_LED_LEDArrayPatternOn+0xa>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
    294e:	1b 82       	std	Y+3, r1	; 0x03
    2950:	1a 82       	std	Y+2, r1	; 0x02
    2952:	ed 81       	ldd	r30, Y+5	; 0x05
    2954:	fe 81       	ldd	r31, Y+6	; 0x06
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	4a c0       	rjmp	.+148    	; 0x29f0 <HAL_LED_LEDArrayPatternOn+0xb4>
    295c:	ed 81       	ldd	r30, Y+5	; 0x05
    295e:	fe 81       	ldd	r31, Y+6	; 0x06
    2960:	83 81       	ldd	r24, Z+3	; 0x03
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	99 27       	eor	r25, r25
    296a:	87 fd       	sbrc	r24, 7
    296c:	90 95       	com	r25
    296e:	a9 01       	movw	r20, r18
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <HAL_LED_LEDArrayPatternOn+0x3a>
    2972:	55 95       	asr	r21
    2974:	47 95       	ror	r20
    2976:	8a 95       	dec	r24
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <HAL_LED_LEDArrayPatternOn+0x36>
    297a:	ca 01       	movw	r24, r20
    297c:	81 70       	andi	r24, 0x01	; 1
    297e:	8a 83       	std	Y+2, r24	; 0x02
    2980:	ed 81       	ldd	r30, Y+5	; 0x05
    2982:	fe 81       	ldd	r31, Y+6	; 0x06
    2984:	80 81       	ld	r24, Z
    2986:	87 70       	andi	r24, 0x07	; 7
    2988:	98 2f       	mov	r25, r24
    298a:	93 70       	andi	r25, 0x03	; 3
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	28 2f       	mov	r18, r24
    2990:	27 70       	andi	r18, 0x07	; 7
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	38 2f       	mov	r19, r24
    2996:	31 70       	andi	r19, 0x01	; 1
    2998:	93 70       	andi	r25, 0x03	; 3
    299a:	8c 81       	ldd	r24, Y+4	; 0x04
    299c:	8c 7f       	andi	r24, 0xFC	; 252
    299e:	89 2b       	or	r24, r25
    29a0:	8c 83       	std	Y+4, r24	; 0x04
    29a2:	82 2f       	mov	r24, r18
    29a4:	87 70       	andi	r24, 0x07	; 7
    29a6:	98 2f       	mov	r25, r24
    29a8:	99 0f       	add	r25, r25
    29aa:	99 0f       	add	r25, r25
    29ac:	8c 81       	ldd	r24, Y+4	; 0x04
    29ae:	83 7e       	andi	r24, 0xE3	; 227
    29b0:	89 2b       	or	r24, r25
    29b2:	8c 83       	std	Y+4, r24	; 0x04
    29b4:	8c 81       	ldd	r24, Y+4	; 0x04
    29b6:	8f 79       	andi	r24, 0x9F	; 159
    29b8:	8c 83       	std	Y+4, r24	; 0x04
    29ba:	93 2f       	mov	r25, r19
    29bc:	97 95       	ror	r25
    29be:	99 27       	eor	r25, r25
    29c0:	97 95       	ror	r25
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	8f 77       	andi	r24, 0x7F	; 127
    29c6:	89 2b       	or	r24, r25
    29c8:	8c 83       	std	Y+4, r24	; 0x04
    29ca:	8c 81       	ldd	r24, Y+4	; 0x04
    29cc:	88 1f       	adc	r24, r24
    29ce:	88 27       	eor	r24, r24
    29d0:	88 1f       	adc	r24, r24
    29d2:	28 2f       	mov	r18, r24
    29d4:	ce 01       	movw	r24, r28
    29d6:	04 96       	adiw	r24, 0x04	; 4
    29d8:	62 2f       	mov	r22, r18
    29da:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    29de:	88 23       	and	r24, r24
    29e0:	11 f4       	brne	.+4      	; 0x29e6 <HAL_LED_LEDArrayPatternOn+0xaa>
    29e2:	1b 82       	std	Y+3, r1	; 0x03
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <HAL_LED_LEDArrayPatternOn+0xae>
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	8b 83       	std	Y+3, r24	; 0x03
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	81 50       	subi	r24, 0x01	; 1
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	33 27       	eor	r19, r19
    29f6:	27 fd       	sbrc	r18, 7
    29f8:	30 95       	com	r19
    29fa:	ed 81       	ldd	r30, Y+5	; 0x05
    29fc:	fe 81       	ldd	r31, Y+6	; 0x06
    29fe:	81 81       	ldd	r24, Z+1	; 0x01
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	0c f0       	brlt	.+2      	; 0x2a0c <HAL_LED_LEDArrayPatternOn+0xd0>
    2a0a:	a8 cf       	rjmp	.-176    	; 0x295c <HAL_LED_LEDArrayPatternOn+0x20>
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	26 96       	adiw	r28, 0x06	; 6
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <HAL_LED_LEDArrayPatternOff>:
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <HAL_LED_LEDArrayPatternOff+0x6>
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <HAL_LED_LEDArrayPatternOff+0x8>
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9d 83       	std	Y+5, r25	; 0x05
    2a30:	8c 83       	std	Y+4, r24	; 0x04
    2a32:	1a 82       	std	Y+2, r1	; 0x02
    2a34:	ec 81       	ldd	r30, Y+4	; 0x04
    2a36:	fd 81       	ldd	r31, Y+5	; 0x05
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	30 c0       	rjmp	.+96     	; 0x2a9e <HAL_LED_LEDArrayPatternOff+0x7e>
    2a3e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a40:	fd 81       	ldd	r31, Y+5	; 0x05
    2a42:	80 81       	ld	r24, Z
    2a44:	87 70       	andi	r24, 0x07	; 7
    2a46:	98 2f       	mov	r25, r24
    2a48:	93 70       	andi	r25, 0x03	; 3
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	27 70       	andi	r18, 0x07	; 7
    2a50:	93 70       	andi	r25, 0x03	; 3
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	8c 7f       	andi	r24, 0xFC	; 252
    2a56:	89 2b       	or	r24, r25
    2a58:	8b 83       	std	Y+3, r24	; 0x03
    2a5a:	82 2f       	mov	r24, r18
    2a5c:	87 70       	andi	r24, 0x07	; 7
    2a5e:	98 2f       	mov	r25, r24
    2a60:	99 0f       	add	r25, r25
    2a62:	99 0f       	add	r25, r25
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	83 7e       	andi	r24, 0xE3	; 227
    2a68:	89 2b       	or	r24, r25
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	8f 79       	andi	r24, 0x9F	; 159
    2a70:	8b 83       	std	Y+3, r24	; 0x03
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	8f 77       	andi	r24, 0x7F	; 127
    2a76:	8b 83       	std	Y+3, r24	; 0x03
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	88 1f       	adc	r24, r24
    2a7c:	88 27       	eor	r24, r24
    2a7e:	88 1f       	adc	r24, r24
    2a80:	28 2f       	mov	r18, r24
    2a82:	ce 01       	movw	r24, r28
    2a84:	03 96       	adiw	r24, 0x03	; 3
    2a86:	62 2f       	mov	r22, r18
    2a88:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    2a8c:	88 23       	and	r24, r24
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <HAL_LED_LEDArrayPatternOff+0x74>
    2a90:	1a 82       	std	Y+2, r1	; 0x02
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <HAL_LED_LEDArrayPatternOff+0x78>
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	81 50       	subi	r24, 0x01	; 1
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	33 27       	eor	r19, r19
    2aa4:	27 fd       	sbrc	r18, 7
    2aa6:	30 95       	com	r19
    2aa8:	ec 81       	ldd	r30, Y+4	; 0x04
    2aaa:	fd 81       	ldd	r31, Y+5	; 0x05
    2aac:	81 81       	ldd	r24, Z+1	; 0x01
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	28 17       	cp	r18, r24
    2ab4:	39 07       	cpc	r19, r25
    2ab6:	1c f6       	brge	.-122    	; 0x2a3e <HAL_LED_LEDArrayPatternOff+0x1e>
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <HAL_LED_LEDArrayPatternBlink>:
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	a0 97       	sbiw	r28, 0x20	; 32
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	98 a3       	std	Y+32, r25	; 0x20
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae2:	1e 8e       	std	Y+30, r1	; 0x1e
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae8:	f1 c0       	rjmp	.+482    	; 0x2ccc <HAL_LED_LEDArrayPatternBlink+0x202>
    2aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aec:	98 a1       	ldd	r25, Y+32	; 0x20
    2aee:	0e 94 9e 14 	call	0x293c	; 0x293c <HAL_LED_LEDArrayPatternOn>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	aa ef       	ldi	r26, 0xFA	; 250
    2af8:	b3 e4       	ldi	r27, 0x43	; 67
    2afa:	89 8f       	std	Y+25, r24	; 0x19
    2afc:	9a 8f       	std	Y+26, r25	; 0x1a
    2afe:	ab 8f       	std	Y+27, r26	; 0x1b
    2b00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b02:	69 8d       	ldd	r22, Y+25	; 0x19
    2b04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a e7       	ldi	r20, 0x7A	; 122
    2b10:	55 e4       	ldi	r21, 0x45	; 69
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8d 8b       	std	Y+21, r24	; 0x15
    2b1c:	9e 8b       	std	Y+22, r25	; 0x16
    2b1e:	af 8b       	std	Y+23, r26	; 0x17
    2b20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b22:	6d 89       	ldd	r22, Y+21	; 0x15
    2b24:	7e 89       	ldd	r23, Y+22	; 0x16
    2b26:	8f 89       	ldd	r24, Y+23	; 0x17
    2b28:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <HAL_LED_LEDArrayPatternBlink+0x7a>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9c 8b       	std	Y+20, r25	; 0x14
    2b40:	8b 8b       	std	Y+19, r24	; 0x13
    2b42:	3f c0       	rjmp	.+126    	; 0x2bc2 <HAL_LED_LEDArrayPatternBlink+0xf8>
	else if (__tmp > 65535)
    2b44:	6d 89       	ldd	r22, Y+21	; 0x15
    2b46:	7e 89       	ldd	r23, Y+22	; 0x16
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	4c f5       	brge	.+82     	; 0x2bae <HAL_LED_LEDArrayPatternBlink+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e2       	ldi	r20, 0x20	; 32
    2b6a:	51 e4       	ldi	r21, 0x41	; 65
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
    2b84:	0f c0       	rjmp	.+30     	; 0x2ba4 <HAL_LED_LEDArrayPatternBlink+0xda>
    2b86:	80 e9       	ldi	r24, 0x90	; 144
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	9a 8b       	std	Y+18, r25	; 0x12
    2b8c:	89 8b       	std	Y+17, r24	; 0x11
    2b8e:	89 89       	ldd	r24, Y+17	; 0x11
    2b90:	9a 89       	ldd	r25, Y+18	; 0x12
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <HAL_LED_LEDArrayPatternBlink+0xc8>
    2b96:	9a 8b       	std	Y+18, r25	; 0x12
    2b98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	69 f7       	brne	.-38     	; 0x2b86 <HAL_LED_LEDArrayPatternBlink+0xbc>
    2bac:	14 c0       	rjmp	.+40     	; 0x2bd6 <HAL_LED_LEDArrayPatternBlink+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9c 8b       	std	Y+20, r25	; 0x14
    2bc0:	8b 8b       	std	Y+19, r24	; 0x13
    2bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc6:	98 8b       	std	Y+16, r25	; 0x10
    2bc8:	8f 87       	std	Y+15, r24	; 0x0f
    2bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bcc:	98 89       	ldd	r25, Y+16	; 0x10
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <HAL_LED_LEDArrayPatternBlink+0x104>
    2bd2:	98 8b       	std	Y+16, r25	; 0x10
    2bd4:	8f 87       	std	Y+15, r24	; 0x0f
    2bd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd8:	98 a1       	ldd	r25, Y+32	; 0x20
    2bda:	0e 94 10 15 	call	0x2a20	; 0x2a20 <HAL_LED_LEDArrayPatternOff>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	aa ef       	ldi	r26, 0xFA	; 250
    2be4:	b3 e4       	ldi	r27, 0x43	; 67
    2be6:	8b 87       	std	Y+11, r24	; 0x0b
    2be8:	9c 87       	std	Y+12, r25	; 0x0c
    2bea:	ad 87       	std	Y+13, r26	; 0x0d
    2bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4a e7       	ldi	r20, 0x7A	; 122
    2bfc:	55 e4       	ldi	r21, 0x45	; 69
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	8f 83       	std	Y+7, r24	; 0x07
    2c08:	98 87       	std	Y+8, r25	; 0x08
    2c0a:	a9 87       	std	Y+9, r26	; 0x09
    2c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5f e3       	ldi	r21, 0x3F	; 63
    2c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	2c f4       	brge	.+10     	; 0x2c30 <HAL_LED_LEDArrayPatternBlink+0x166>
		__ticks = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	3f c0       	rjmp	.+126    	; 0x2cae <HAL_LED_LEDArrayPatternBlink+0x1e4>
	else if (__tmp > 65535)
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	3f ef       	ldi	r19, 0xFF	; 255
    2c3c:	4f e7       	ldi	r20, 0x7F	; 127
    2c3e:	57 e4       	ldi	r21, 0x47	; 71
    2c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c44:	18 16       	cp	r1, r24
    2c46:	4c f5       	brge	.+82     	; 0x2c9a <HAL_LED_LEDArrayPatternBlink+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e2       	ldi	r20, 0x20	; 32
    2c56:	51 e4       	ldi	r21, 0x41	; 65
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <HAL_LED_LEDArrayPatternBlink+0x1c6>
    2c72:	80 e9       	ldi	r24, 0x90	; 144
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <HAL_LED_LEDArrayPatternBlink+0x1b4>
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <HAL_LED_LEDArrayPatternBlink+0x1a8>
    2c98:	14 c0       	rjmp	.+40     	; 0x2cc2 <HAL_LED_LEDArrayPatternBlink+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <HAL_LED_LEDArrayPatternBlink+0x1f0>
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc8:	81 50       	subi	r24, 0x01	; 1
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
    2ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cce:	18 16       	cp	r1, r24
    2cd0:	0c f4       	brge	.+2      	; 0x2cd4 <HAL_LED_LEDArrayPatternBlink+0x20a>
    2cd2:	0b cf       	rjmp	.-490    	; 0x2aea <HAL_LED_LEDArrayPatternBlink+0x20>
    2cd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cd6:	a0 96       	adiw	r28, 0x20	; 32
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <HAL_KeyPad_KeyPadInit>:
#include <util/delay.h>

#include "Push_Button_Interface.h"



    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <HAL_KeyPad_KeyPadInit+0x6>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <HAL_KeyPad_KeyPadInit+0x8>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9c 83       	std	Y+4, r25	; 0x04
    2cf6:	8b 83       	std	Y+3, r24	; 0x03
Std_ReturnType HAL_Push_Button_BtnConfig(const PushBtn_t *Copy_Btn)
    2cf8:	1a 82       	std	Y+2, r1	; 0x02
{
    2cfa:	19 82       	std	Y+1, r1	; 0x01
    2cfc:	2d c0       	rjmp	.+90     	; 0x2d58 <HAL_KeyPad_KeyPadInit+0x70>
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    if(Copy_Btn->PORT_ID > Btn_PORTE || Copy_Btn->Pin_Num > Btn_PIN7)
    {
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	9c 81       	ldd	r25, Y+4	; 0x04
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e2 0f       	add	r30, r18
    2d0c:	f3 1f       	adc	r31, r19
    2d0e:	80 81       	ld	r24, Z
    2d10:	8f 79       	andi	r24, 0x9F	; 159
    2d12:	80 83       	st	Z, r24
        Local_ErrorStatus = E_NOT_OK;
    2d14:	2b 81       	ldd	r18, Y+3	; 0x03
    2d16:	3c 81       	ldd	r19, Y+4	; 0x04
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	82 0f       	add	r24, r18
    2d20:	93 1f       	adc	r25, r19
    2d22:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_SetPinDirection>
    2d26:	88 23       	and	r24, r24
    2d28:	11 f4       	brne	.+4      	; 0x2d2e <HAL_KeyPad_KeyPadInit+0x46>
    }
    else
    2d2a:	1a 82       	std	Y+2, r1	; 0x02
    2d2c:	18 c0       	rjmp	.+48     	; 0x2d5e <HAL_KeyPad_KeyPadInit+0x76>
    {
        Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	8a 83       	std	Y+2, r24	; 0x02
            .Pin_Value = Copy_Btn->Last_Status
        };
    2d32:	2b 81       	ldd	r18, Y+3	; 0x03
    2d34:	3c 81       	ldd	r19, Y+4	; 0x04
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	88 2f       	mov	r24, r24
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	82 0f       	add	r24, r18
    2d3e:	93 1f       	adc	r25, r19
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MCAL_DIO_SetPinValue>
    2d46:	88 23       	and	r24, r24
    2d48:	11 f4       	brne	.+4      	; 0x2d4e <HAL_KeyPad_KeyPadInit+0x66>
        if(!MCAL_DIO_SetPinDirection(&Btn))
        {
    2d4a:	1a 82       	std	Y+2, r1	; 0x02
    2d4c:	08 c0       	rjmp	.+16     	; 0x2d5e <HAL_KeyPad_KeyPadInit+0x76>
            Local_ErrorStatus = E_NOT_OK;
        }
        else
        {
            Local_ErrorStatus = E_OK;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	8a 83       	std	Y+2, r24	; 0x02



Std_ReturnType HAL_Push_Button_BtnConfig(const PushBtn_t *Copy_Btn)
{
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	8f 5f       	subi	r24, 0xFF	; 255
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	84 30       	cpi	r24, 0x04	; 4
    2d5c:	80 f2       	brcs	.-96     	; 0x2cfe <HAL_KeyPad_KeyPadInit+0x16>
        else
        {
            Local_ErrorStatus = E_OK;
        }
    }
    return Local_ErrorStatus;
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	88 23       	and	r24, r24
    2d62:	39 f1       	breq	.+78     	; 0x2db2 <HAL_KeyPad_KeyPadInit+0xca>
}
Std_ReturnType HAL_Push_Button_ReadBtn(PushBtn_t *Copy_Btn, uint8 *Copy_BtnStatus)
{
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    uint8 Local_BtnStatus = INITIAL_VALUE;
    Pin_Conig_t Btn = {
    2d64:	19 82       	std	Y+1, r1	; 0x01
    2d66:	22 c0       	rjmp	.+68     	; 0x2dac <HAL_KeyPad_KeyPadInit+0xc4>
            .PORT_ID = Copy_Btn->PORT_ID,
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	82 0f       	add	r24, r18
    2d74:	93 1f       	adc	r25, r19
    2d76:	fc 01       	movw	r30, r24
    2d78:	34 96       	adiw	r30, 0x04	; 4
    2d7a:	80 81       	ld	r24, Z
    2d7c:	8f 79       	andi	r24, 0x9F	; 159
    2d7e:	80 62       	ori	r24, 0x20	; 32
    2d80:	80 83       	st	Z, r24
            .Pin_Value = Copy_Btn->Last_Status
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	9c 81       	ldd	r25, Y+4	; 0x04
    2d86:	9c 01       	movw	r18, r24
    2d88:	2c 5f       	subi	r18, 0xFC	; 252
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	88 2f       	mov	r24, r24
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	82 0f       	add	r24, r18
    2d94:	93 1f       	adc	r25, r19
    2d96:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_SetPinDirection>
    2d9a:	88 23       	and	r24, r24
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <HAL_KeyPad_KeyPadInit+0xba>
    };
    if(!MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus))
    2d9e:	1a 82       	std	Y+2, r1	; 0x02
    2da0:	08 c0       	rjmp	.+16     	; 0x2db2 <HAL_KeyPad_KeyPadInit+0xca>
    {
        Local_ErrorStatus = E_NOT_OK;
    }
    else
    {
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType HAL_Push_Button_ReadBtn(PushBtn_t *Copy_Btn, uint8 *Copy_BtnStatus)
{
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    uint8 Local_BtnStatus = INITIAL_VALUE;
    Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	8f 5f       	subi	r24, 0xFF	; 255
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	84 30       	cpi	r24, 0x04	; 4
    2db0:	d8 f2       	brcs	.-74     	; 0x2d68 <HAL_KeyPad_KeyPadInit+0x80>
    else
    {
        if(Copy_Btn->Connection_Meth == PULL_DOWN_Connection)
        {
            if(Local_BtnStatus == Btn_D_Pressed)
            {
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <HAL_KeyPad_KeyPadReadCharacter>:
                while(Local_BtnStatus != Btn_D_Released)
                {
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	66 97       	sbiw	r28, 0x16	; 22
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	7e 8b       	std	Y+22, r23	; 0x16
    2ddc:	6d 8b       	std	Y+21, r22	; 0x15
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
    2dde:	19 8a       	std	Y+17, r1	; 0x11
                }
    2de0:	18 8a       	std	Y+16, r1	; 0x10
                *Copy_BtnStatus = Btn_D_Pressed;
    2de2:	1f 86       	std	Y+15, r1	; 0x0f
                Copy_Btn->Last_Status = Btn_D_Pressed;
    2de4:	1a 8a       	std	Y+18, r1	; 0x12
            }
    2de6:	ed 89       	ldd	r30, Y+21	; 0x15
    2de8:	fe 89       	ldd	r31, Y+22	; 0x16
    2dea:	10 82       	st	Z, r1
    2dec:	db c0       	rjmp	.+438    	; 0x2fa4 <HAL_KeyPad_KeyPadReadCharacter+0x1e2>
            else
            {
                *Copy_BtnStatus = Btn_D_Released;
    2dee:	8b 89       	ldd	r24, Y+19	; 0x13
    2df0:	9c 89       	ldd	r25, Y+20	; 0x14
    2df2:	9c 01       	movw	r18, r24
    2df4:	88 89       	ldd	r24, Y+16	; 0x10
    2df6:	88 2f       	mov	r24, r24
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	82 0f       	add	r24, r18
    2dfc:	93 1f       	adc	r25, r19
    2dfe:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
    2e02:	88 23       	and	r24, r24
    2e04:	11 f4       	brne	.+4      	; 0x2e0a <HAL_KeyPad_KeyPadReadCharacter+0x48>
                Copy_Btn->Last_Status = Btn_D_Released;
            }
    2e06:	19 8a       	std	Y+17, r1	; 0x11
    2e08:	d1 c0       	rjmp	.+418    	; 0x2fac <HAL_KeyPad_KeyPadReadCharacter+0x1ea>
        }
        else if(Copy_Btn->Connection_Meth == PULL_UP_Connection)
        {
            if(Local_BtnStatus == Btn_U_Pressed)
            {
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 8b       	std	Y+17, r24	; 0x11
    2e0e:	b8 c0       	rjmp	.+368    	; 0x2f80 <HAL_KeyPad_KeyPadReadCharacter+0x1be>
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_U_Released)
                {
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
    2e10:	8b 89       	ldd	r24, Y+19	; 0x13
    2e12:	9c 89       	ldd	r25, Y+20	; 0x14
    2e14:	9c 01       	movw	r18, r24
    2e16:	2c 5f       	subi	r18, 0xFC	; 252
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	9e 01       	movw	r18, r28
    2e26:	2e 5e       	subi	r18, 0xEE	; 238
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	b9 01       	movw	r22, r18
    2e2c:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
    2e30:	88 23       	and	r24, r24
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <HAL_KeyPad_KeyPadReadCharacter+0x76>
                }
                *Copy_BtnStatus = Btn_U_Pressed;
    2e34:	19 8a       	std	Y+17, r1	; 0x11
    2e36:	a8 c0       	rjmp	.+336    	; 0x2f88 <HAL_KeyPad_KeyPadReadCharacter+0x1c6>
                Copy_Btn->Last_Status = Btn_U_Pressed;
            }
            else
            {
                *Copy_BtnStatus = Btn_U_Released;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	89 8b       	std	Y+17, r24	; 0x11
                Copy_Btn->Last_Status = Btn_U_Released;
    2e3c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <HAL_KeyPad_KeyPadReadCharacter+0x82>
    2e42:	9b c0       	rjmp	.+310    	; 0x2f7a <HAL_KeyPad_KeyPadReadCharacter+0x1b8>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 ef       	ldi	r26, 0xF0	; 240
    2e4a:	b2 e4       	ldi	r27, 0x42	; 66
    2e4c:	8b 87       	std	Y+11, r24	; 0x0b
    2e4e:	9c 87       	std	Y+12, r25	; 0x0c
    2e50:	ad 87       	std	Y+13, r26	; 0x0d
    2e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a e7       	ldi	r20, 0x7A	; 122
    2e62:	55 e4       	ldi	r21, 0x45	; 69
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    2e70:	a9 87       	std	Y+9, r26	; 0x09
    2e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	2c f4       	brge	.+10     	; 0x2e96 <HAL_KeyPad_KeyPadReadCharacter+0xd4>
		__ticks = 1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	3f c0       	rjmp	.+126    	; 0x2f14 <HAL_KeyPad_KeyPadReadCharacter+0x152>
	else if (__tmp > 65535)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eaa:	18 16       	cp	r1, r24
    2eac:	4c f5       	brge	.+82     	; 0x2f00 <HAL_KeyPad_KeyPadReadCharacter+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <HAL_KeyPad_KeyPadReadCharacter+0x134>
    2ed8:	80 e9       	ldi	r24, 0x90	; 144
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <HAL_KeyPad_KeyPadReadCharacter+0x122>
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
    2eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	69 f7       	brne	.-38     	; 0x2ed8 <HAL_KeyPad_KeyPadReadCharacter+0x116>
    2efe:	25 c0       	rjmp	.+74     	; 0x2f4a <HAL_KeyPad_KeyPadReadCharacter+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <HAL_KeyPad_KeyPadReadCharacter+0x15e>
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	10 c0       	rjmp	.+32     	; 0x2f4a <HAL_KeyPad_KeyPadReadCharacter+0x188>
            }
        }
        Local_ErrorStatus = E_OK;
    }
    return Local_ErrorStatus;
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	9c 01       	movw	r18, r24
    2f30:	2c 5f       	subi	r18, 0xFC	; 252
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	9e 01       	movw	r18, r28
    2f40:	2e 5e       	subi	r18, 0xEE	; 238
    2f42:	3f 4f       	sbci	r19, 0xFF	; 255
    2f44:	b9 01       	movw	r22, r18
    2f46:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
            {
                *Copy_BtnStatus = Btn_U_Released;
                Copy_Btn->Last_Status = Btn_U_Released;
            }
        }
        Local_ErrorStatus = E_OK;
    2f4a:	8a 89       	ldd	r24, Y+18	; 0x12
    2f4c:	81 30       	cpi	r24, 0x01	; 1
    2f4e:	69 f3       	breq	.-38     	; 0x2f2a <HAL_KeyPad_KeyPadReadCharacter+0x168>
    }
    return Local_ErrorStatus;
}
    2f50:	88 89       	ldd	r24, Y+16	; 0x10
    2f52:	48 2f       	mov	r20, r24
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	ca 01       	movw	r24, r20
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	82 0f       	add	r24, r18
    2f68:	93 1f       	adc	r25, r19
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	ec 58       	subi	r30, 0x8C	; 140
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	ed 89       	ldd	r30, Y+21	; 0x15
    2f74:	fe 89       	ldd	r31, Y+22	; 0x16
    2f76:	80 83       	st	Z, r24
    2f78:	07 c0       	rjmp	.+14     	; 0x2f88 <HAL_KeyPad_KeyPadReadCharacter+0x1c6>
        else if(Copy_Btn->Connection_Meth == PULL_UP_Connection)
        {
            if(Local_BtnStatus == Btn_U_Pressed)
            {
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
                while(Local_BtnStatus != Btn_U_Released)
    2f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f7c:	8f 5f       	subi	r24, 0xFF	; 255
    2f7e:	8f 87       	std	Y+15, r24	; 0x0f
    2f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f82:	84 30       	cpi	r24, 0x04	; 4
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <HAL_KeyPad_KeyPadReadCharacter+0x1c6>
    2f86:	44 cf       	rjmp	.-376    	; 0x2e10 <HAL_KeyPad_KeyPadReadCharacter+0x4e>
    2f88:	1f 86       	std	Y+15, r1	; 0x0f
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	9c 01       	movw	r18, r24
    2f90:	88 89       	ldd	r24, Y+16	; 0x10
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	82 0f       	add	r24, r18
    2f98:	93 1f       	adc	r25, r19
    2f9a:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
                    MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus);
                }
                *Copy_BtnStatus = Btn_D_Pressed;
                Copy_Btn->Last_Status = Btn_D_Pressed;
            }
            else
    2f9e:	88 89       	ldd	r24, Y+16	; 0x10
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	88 8b       	std	Y+16, r24	; 0x10
    2fa4:	88 89       	ldd	r24, Y+16	; 0x10
    2fa6:	84 30       	cpi	r24, 0x04	; 4
    2fa8:	08 f4       	brcc	.+2      	; 0x2fac <HAL_KeyPad_KeyPadReadCharacter+0x1ea>
    2faa:	21 cf       	rjmp	.-446    	; 0x2dee <HAL_KeyPad_KeyPadReadCharacter+0x2c>
    2fac:	89 89       	ldd	r24, Y+17	; 0x11
    2fae:	66 96       	adiw	r28, 0x16	; 22
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <HAL_KeyPad_KeyPadReadNumber>:
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	66 97       	sbiw	r28, 0x16	; 22
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	9c 8b       	std	Y+20, r25	; 0x14
    2fd6:	8b 8b       	std	Y+19, r24	; 0x13
    2fd8:	7e 8b       	std	Y+22, r23	; 0x16
    2fda:	6d 8b       	std	Y+21, r22	; 0x15
    2fdc:	19 8a       	std	Y+17, r1	; 0x11
    2fde:	18 8a       	std	Y+16, r1	; 0x10
    2fe0:	1f 86       	std	Y+15, r1	; 0x0f
    2fe2:	1a 8a       	std	Y+18, r1	; 0x12
    2fe4:	ed 89       	ldd	r30, Y+21	; 0x15
    2fe6:	fe 89       	ldd	r31, Y+22	; 0x16
    2fe8:	10 82       	st	Z, r1
    2fea:	dc c0       	rjmp	.+440    	; 0x31a4 <HAL_KeyPad_KeyPadReadNumber+0x1e4>
    2fec:	8b 89       	ldd	r24, Y+19	; 0x13
    2fee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff0:	9c 01       	movw	r18, r24
    2ff2:	88 89       	ldd	r24, Y+16	; 0x10
    2ff4:	88 2f       	mov	r24, r24
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	82 0f       	add	r24, r18
    2ffa:	93 1f       	adc	r25, r19
    2ffc:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
    3000:	88 23       	and	r24, r24
    3002:	11 f4       	brne	.+4      	; 0x3008 <HAL_KeyPad_KeyPadReadNumber+0x48>
    3004:	19 8a       	std	Y+17, r1	; 0x11
    3006:	d2 c0       	rjmp	.+420    	; 0x31ac <HAL_KeyPad_KeyPadReadNumber+0x1ec>
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	89 8b       	std	Y+17, r24	; 0x11
    300c:	b9 c0       	rjmp	.+370    	; 0x3180 <HAL_KeyPad_KeyPadReadNumber+0x1c0>
    300e:	8b 89       	ldd	r24, Y+19	; 0x13
    3010:	9c 89       	ldd	r25, Y+20	; 0x14
    3012:	9c 01       	movw	r18, r24
    3014:	2c 5f       	subi	r18, 0xFC	; 252
    3016:	3f 4f       	sbci	r19, 0xFF	; 255
    3018:	8f 85       	ldd	r24, Y+15	; 0x0f
    301a:	88 2f       	mov	r24, r24
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	82 0f       	add	r24, r18
    3020:	93 1f       	adc	r25, r19
    3022:	9e 01       	movw	r18, r28
    3024:	2e 5e       	subi	r18, 0xEE	; 238
    3026:	3f 4f       	sbci	r19, 0xFF	; 255
    3028:	b9 01       	movw	r22, r18
    302a:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
    302e:	88 23       	and	r24, r24
    3030:	11 f4       	brne	.+4      	; 0x3036 <HAL_KeyPad_KeyPadReadNumber+0x76>
    3032:	19 8a       	std	Y+17, r1	; 0x11
    3034:	a9 c0       	rjmp	.+338    	; 0x3188 <HAL_KeyPad_KeyPadReadNumber+0x1c8>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	89 8b       	std	Y+17, r24	; 0x11
    303a:	8a 89       	ldd	r24, Y+18	; 0x12
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	09 f0       	breq	.+2      	; 0x3042 <HAL_KeyPad_KeyPadReadNumber+0x82>
    3040:	9c c0       	rjmp	.+312    	; 0x317a <HAL_KeyPad_KeyPadReadNumber+0x1ba>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a0 ef       	ldi	r26, 0xF0	; 240
    3048:	b2 e4       	ldi	r27, 0x42	; 66
    304a:	8b 87       	std	Y+11, r24	; 0x0b
    304c:	9c 87       	std	Y+12, r25	; 0x0c
    304e:	ad 87       	std	Y+13, r26	; 0x0d
    3050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	4a e7       	ldi	r20, 0x7A	; 122
    3060:	55 e4       	ldi	r21, 0x45	; 69
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8f 83       	std	Y+7, r24	; 0x07
    306c:	98 87       	std	Y+8, r25	; 0x08
    306e:	a9 87       	std	Y+9, r26	; 0x09
    3070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3072:	6f 81       	ldd	r22, Y+7	; 0x07
    3074:	78 85       	ldd	r23, Y+8	; 0x08
    3076:	89 85       	ldd	r24, Y+9	; 0x09
    3078:	9a 85       	ldd	r25, Y+10	; 0x0a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	2c f4       	brge	.+10     	; 0x3094 <HAL_KeyPad_KeyPadReadNumber+0xd4>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	3f c0       	rjmp	.+126    	; 0x3112 <HAL_KeyPad_KeyPadReadNumber+0x152>
	else if (__tmp > 65535)
    3094:	6f 81       	ldd	r22, Y+7	; 0x07
    3096:	78 85       	ldd	r23, Y+8	; 0x08
    3098:	89 85       	ldd	r24, Y+9	; 0x09
    309a:	9a 85       	ldd	r25, Y+10	; 0x0a
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	4c f5       	brge	.+82     	; 0x30fe <HAL_KeyPad_KeyPadReadNumber+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e2       	ldi	r20, 0x20	; 32
    30ba:	51 e4       	ldi	r21, 0x41	; 65
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
    30d4:	0f c0       	rjmp	.+30     	; 0x30f4 <HAL_KeyPad_KeyPadReadNumber+0x134>
    30d6:	80 e9       	ldi	r24, 0x90	; 144
    30d8:	91 e0       	ldi	r25, 0x01	; 1
    30da:	9c 83       	std	Y+4, r25	; 0x04
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	9c 81       	ldd	r25, Y+4	; 0x04
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <HAL_KeyPad_KeyPadReadNumber+0x122>
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	9e 83       	std	Y+6, r25	; 0x06
    30f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f4:	8d 81       	ldd	r24, Y+5	; 0x05
    30f6:	9e 81       	ldd	r25, Y+6	; 0x06
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	69 f7       	brne	.-38     	; 0x30d6 <HAL_KeyPad_KeyPadReadNumber+0x116>
    30fc:	25 c0       	rjmp	.+74     	; 0x3148 <HAL_KeyPad_KeyPadReadNumber+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3100:	78 85       	ldd	r23, Y+8	; 0x08
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	9a 83       	std	Y+2, r25	; 0x02
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	9a 81       	ldd	r25, Y+2	; 0x02
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <HAL_KeyPad_KeyPadReadNumber+0x15e>
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	10 c0       	rjmp	.+32     	; 0x3148 <HAL_KeyPad_KeyPadReadNumber+0x188>
    3128:	8b 89       	ldd	r24, Y+19	; 0x13
    312a:	9c 89       	ldd	r25, Y+20	; 0x14
    312c:	9c 01       	movw	r18, r24
    312e:	2c 5f       	subi	r18, 0xFC	; 252
    3130:	3f 4f       	sbci	r19, 0xFF	; 255
    3132:	8f 85       	ldd	r24, Y+15	; 0x0f
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	82 0f       	add	r24, r18
    313a:	93 1f       	adc	r25, r19
    313c:	9e 01       	movw	r18, r28
    313e:	2e 5e       	subi	r18, 0xEE	; 238
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	b9 01       	movw	r22, r18
    3144:	0e 94 39 0b 	call	0x1672	; 0x1672 <MCAL_DIO_ReadPinValue>
    3148:	8a 89       	ldd	r24, Y+18	; 0x12
    314a:	81 30       	cpi	r24, 0x01	; 1
    314c:	69 f3       	breq	.-38     	; 0x3128 <HAL_KeyPad_KeyPadReadNumber+0x168>
    314e:	88 89       	ldd	r24, Y+16	; 0x10
    3150:	48 2f       	mov	r20, r24
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	8f 85       	ldd	r24, Y+15	; 0x0f
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	ca 01       	movw	r24, r20
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	82 0f       	add	r24, r18
    3166:	93 1f       	adc	r25, r19
    3168:	fc 01       	movw	r30, r24
    316a:	ec 58       	subi	r30, 0x8C	; 140
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 81       	ld	r24, Z
    3170:	80 53       	subi	r24, 0x30	; 48
    3172:	ed 89       	ldd	r30, Y+21	; 0x15
    3174:	fe 89       	ldd	r31, Y+22	; 0x16
    3176:	80 83       	st	Z, r24
    3178:	07 c0       	rjmp	.+14     	; 0x3188 <HAL_KeyPad_KeyPadReadNumber+0x1c8>
    317a:	8f 85       	ldd	r24, Y+15	; 0x0f
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	8f 87       	std	Y+15, r24	; 0x0f
    3180:	8f 85       	ldd	r24, Y+15	; 0x0f
    3182:	84 30       	cpi	r24, 0x04	; 4
    3184:	08 f4       	brcc	.+2      	; 0x3188 <HAL_KeyPad_KeyPadReadNumber+0x1c8>
    3186:	43 cf       	rjmp	.-378    	; 0x300e <HAL_KeyPad_KeyPadReadNumber+0x4e>
    3188:	1f 86       	std	Y+15, r1	; 0x0f
    318a:	8b 89       	ldd	r24, Y+19	; 0x13
    318c:	9c 89       	ldd	r25, Y+20	; 0x14
    318e:	9c 01       	movw	r18, r24
    3190:	88 89       	ldd	r24, Y+16	; 0x10
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	82 0f       	add	r24, r18
    3198:	93 1f       	adc	r25, r19
    319a:	0e 94 22 0c 	call	0x1844	; 0x1844 <MCAL_DIO_TogglePinValue>
    319e:	88 89       	ldd	r24, Y+16	; 0x10
    31a0:	8f 5f       	subi	r24, 0xFF	; 255
    31a2:	88 8b       	std	Y+16, r24	; 0x10
    31a4:	88 89       	ldd	r24, Y+16	; 0x10
    31a6:	84 30       	cpi	r24, 0x04	; 4
    31a8:	08 f4       	brcc	.+2      	; 0x31ac <HAL_KeyPad_KeyPadReadNumber+0x1ec>
    31aa:	20 cf       	rjmp	.-448    	; 0x2fec <HAL_KeyPad_KeyPadReadNumber+0x2c>
    31ac:	89 89       	ldd	r24, Y+17	; 0x11
    31ae:	66 96       	adiw	r28, 0x16	; 22
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <APP_APPInit>:
                }
                *Copy_BtnStatus = Btn_D_Pressed;
                Copy_Btn->Last_Status = Btn_D_Pressed;
            }
            else
            {
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	0f 92       	push	r0
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
                *Copy_BtnStatus = Btn_D_Released;
    31ca:	19 82       	std	Y+1, r1	; 0x01
                Copy_Btn->Last_Status = Btn_D_Released;
    31cc:	80 e7       	ldi	r24, 0x70	; 112
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 6d 11 	call	0x22da	; 0x22da <HAL_LED_LEDConfig>
            }
    31d4:	81 e7       	ldi	r24, 0x71	; 113
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 94 6d 11 	call	0x22da	; 0x22da <HAL_LED_LEDConfig>
        }
    31dc:	82 e7       	ldi	r24, 0x72	; 114
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	0e 94 6d 11 	call	0x22da	; 0x22da <HAL_LED_LEDConfig>
        else if(Copy_Btn->Connection_Meth == PULL_UP_Connection)
    31e4:	83 e7       	ldi	r24, 0x73	; 115
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <HAL_Push_Button_BtnConfig>
        {
    31ec:	88 e6       	ldi	r24, 0x68	; 104
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <HAL_KeyPad_KeyPadInit>
            if(Local_BtnStatus == Btn_U_Pressed)
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	89 83       	std	Y+1, r24	; 0x01
            {
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
                _delay_ms(PUSH_BTN_DEBOUNCING_TIME);
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <main>:
 */



#include <util/delay.h>

    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
#include "Push_Button_Interface.h"
    320a:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <APP_APPInit>
    320e:	0e c0       	rjmp	.+28     	; 0x322c <main+0x2a>
    else
    {
        Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
    3210:	88 e6       	ldi	r24, 0x68	; 104
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	24 ea       	ldi	r18, 0xA4	; 164
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	b9 01       	movw	r22, r18
    321a:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <HAL_KeyPad_KeyPadReadCharacter>
            .Pin_Value = Copy_Btn->Last_Status
    321e:	83 e7       	ldi	r24, 0x73	; 115
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	25 ea       	ldi	r18, 0xA5	; 165
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	b9 01       	movw	r22, r18
    3228:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <HAL_Push_Button_ReadBtn>
        Local_ErrorStatus = E_NOT_OK;
    }
    else
    {
        Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
    322c:	80 91 a5 00 	lds	r24, 0x00A5
    3230:	88 23       	and	r24, r24
    3232:	21 f4       	brne	.+8      	; 0x323c <main+0x3a>
    3234:	80 91 a4 00 	lds	r24, 0x00A4
    3238:	88 23       	and	r24, r24
    323a:	51 f3       	breq	.-44     	; 0x3210 <main+0xe>
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
            .Pin_Value = Copy_Btn->Last_Status
        };
        if(!MCAL_DIO_SetPinDirection(&Btn))
        {
    323c:	80 91 a5 00 	lds	r24, 0x00A5
    3240:	88 23       	and	r24, r24
    3242:	69 f0       	breq	.+26     	; 0x325e <main+0x5c>
            Local_ErrorStatus = E_NOT_OK;
        }
    3244:	80 e7       	ldi	r24, 0x70	; 112
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HAL_LED_LEDBlink>
        else
    324c:	81 e7       	ldi	r24, 0x71	; 113
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HAL_LED_LEDBlink>
        {
    3254:	82 e7       	ldi	r24, 0x72	; 114
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HAL_LED_LEDBlink>
    325c:	1e c0       	rjmp	.+60     	; 0x329a <main+0x98>
            Local_ErrorStatus = E_OK;
        }
    325e:	80 91 a4 00 	lds	r24, 0x00A4
    3262:	88 23       	and	r24, r24
    3264:	d1 f0       	breq	.+52     	; 0x329a <main+0x98>
    }
    return Local_ErrorStatus;
    3266:	80 91 a4 00 	lds	r24, 0x00A4
    326a:	81 33       	cpi	r24, 0x31	; 49
    326c:	29 f4       	brne	.+10     	; 0x3278 <main+0x76>
}
Std_ReturnType HAL_Push_Button_ReadBtn(PushBtn_t *Copy_Btn, uint8 *Copy_BtnStatus)
    326e:	80 e7       	ldi	r24, 0x70	; 112
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HAL_LED_LEDBlink>
    3276:	11 c0       	rjmp	.+34     	; 0x329a <main+0x98>
{
    Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    uint8 Local_BtnStatus = INITIAL_VALUE;
    3278:	80 91 a4 00 	lds	r24, 0x00A4
    327c:	85 33       	cpi	r24, 0x35	; 53
    327e:	29 f4       	brne	.+10     	; 0x328a <main+0x88>
    Pin_Conig_t Btn = {
            .PORT_ID = Copy_Btn->PORT_ID,
    3280:	81 e7       	ldi	r24, 0x71	; 113
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HAL_LED_LEDBlink>
    3288:	08 c0       	rjmp	.+16     	; 0x329a <main+0x98>
            .Pin_Num = Copy_Btn->Pin_Num,
            .Pin_Direction = DIO_PIN_INPUT,
            .Pin_Value = Copy_Btn->Last_Status
    328a:	80 91 a4 00 	lds	r24, 0x00A4
    328e:	89 33       	cpi	r24, 0x39	; 57
    3290:	21 f4       	brne	.+8      	; 0x329a <main+0x98>
    };
    if(!MCAL_DIO_ReadPinValue(&Btn, &Local_BtnStatus))
    3292:	82 e7       	ldi	r24, 0x72	; 114
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HAL_LED_LEDBlink>
    {
        Local_ErrorStatus = E_NOT_OK;
    }
    329a:	10 92 a4 00 	sts	0x00A4, r1
    else
    329e:	10 92 a5 00 	sts	0x00A5, r1
    32a2:	c4 cf       	rjmp	.-120    	; 0x322c <main+0x2a>

000032a4 <__prologue_saves__>:
    32a4:	2f 92       	push	r2
    32a6:	3f 92       	push	r3
    32a8:	4f 92       	push	r4
    32aa:	5f 92       	push	r5
    32ac:	6f 92       	push	r6
    32ae:	7f 92       	push	r7
    32b0:	8f 92       	push	r8
    32b2:	9f 92       	push	r9
    32b4:	af 92       	push	r10
    32b6:	bf 92       	push	r11
    32b8:	cf 92       	push	r12
    32ba:	df 92       	push	r13
    32bc:	ef 92       	push	r14
    32be:	ff 92       	push	r15
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	ca 1b       	sub	r28, r26
    32ce:	db 0b       	sbc	r29, r27
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	09 94       	ijmp

000032dc <__epilogue_restores__>:
    32dc:	2a 88       	ldd	r2, Y+18	; 0x12
    32de:	39 88       	ldd	r3, Y+17	; 0x11
    32e0:	48 88       	ldd	r4, Y+16	; 0x10
    32e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    32e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    32e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    32e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    32ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    32ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    32ee:	b9 84       	ldd	r11, Y+9	; 0x09
    32f0:	c8 84       	ldd	r12, Y+8	; 0x08
    32f2:	df 80       	ldd	r13, Y+7	; 0x07
    32f4:	ee 80       	ldd	r14, Y+6	; 0x06
    32f6:	fd 80       	ldd	r15, Y+5	; 0x05
    32f8:	0c 81       	ldd	r16, Y+4	; 0x04
    32fa:	1b 81       	ldd	r17, Y+3	; 0x03
    32fc:	aa 81       	ldd	r26, Y+2	; 0x02
    32fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3300:	ce 0f       	add	r28, r30
    3302:	d1 1d       	adc	r29, r1
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	ed 01       	movw	r28, r26
    3310:	08 95       	ret

00003312 <_exit>:
    3312:	f8 94       	cli

00003314 <__stop_program>:
    3314:	ff cf       	rjmp	.-2      	; 0x3314 <__stop_program>
