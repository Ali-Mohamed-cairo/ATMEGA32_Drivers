
ATMEGA_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00008900  00008994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  008001ca  008001ca  00008afe  2**0
                  ALLOC
  3 .stab         0000d968  00000000  00000000  00008b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000d459  00000000  00000000  00016468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000238c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00023a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00023c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0002605e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000273e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000285bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0002877c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00028a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000293e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <__vector_1>
       8:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__vector_2>
       c:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__vector_6>
      1c:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__vector_7>
      20:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__vector_8>
      24:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__vector_9>
      28:	0c 94 47 10 	jmp	0x208e	; 0x208e <__vector_10>
      2c:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_13>
      38:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_14>
      3c:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_15>
      40:	0c 94 ff 2b 	jmp	0x57fe	; 0x57fe <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f9 e8       	ldi	r31, 0x89	; 137
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 43 	call	0x8754	; 0x8754 <main>
      8a:	0c 94 7e 44 	jmp	0x88fc	; 0x88fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 44 	jmp	0x888e	; 0x888e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 44 	jmp	0x88c6	; 0x88c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 44 	jmp	0x88a6	; 0x88a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 44 	jmp	0x88de	; 0x88de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 44 	jmp	0x88a6	; 0x88a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 44 	jmp	0x88de	; 0x88de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 44 	jmp	0x888e	; 0x888e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 44 	jmp	0x88c6	; 0x88c6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 44 	jmp	0x889e	; 0x889e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6b 44 	jmp	0x88d6	; 0x88d6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 53 44 	jmp	0x88a6	; 0x88a6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6f 44 	jmp	0x88de	; 0x88de <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 53 44 	jmp	0x88a6	; 0x88a6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6f 44 	jmp	0x88de	; 0x88de <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 53 44 	jmp	0x88a6	; 0x88a6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6f 44 	jmp	0x88de	; 0x88de <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 57 44 	jmp	0x88ae	; 0x88ae <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 73 44 	jmp	0x88e6	; 0x88e6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4f 44 	jmp	0x889e	; 0x889e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 6b 44 	jmp	0x88d6	; 0x88d6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MCAL_USART_USARTInit>:
void (*UART_Rx_Complete_Ptr)(void)  = NULL_PTR;

void (*UART_Tx_BuffEmpty_Ptr)(void) = NULL_PTR;

Std_ReturnType MCAL_USART_USARTInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
     e38:	19 82       	std	Y+1, r1	; 0x01
	Local_ErrorStatus = MCAL_USART_USARTTransmitterStatus(DISABLE);
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 44 07 	call	0xe88	; 0xe88 <MCAL_USART_USARTTransmitterStatus>
     e40:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = MCAL_USART_USARTReceiverStatus(DISABLE);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	0e 94 87 07 	call	0xf0e	; 0xf0e <MCAL_USART_USARTReceiverStatus>
     e48:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = MCAL_USART_SetBaudRate(UART_Module.Copy_SystemClockFreq, UART_Module.BaudRate);
     e4a:	80 91 f5 01 	lds	r24, 0x01F5
     e4e:	90 91 f6 01 	lds	r25, 0x01F6
     e52:	20 91 f7 01 	lds	r18, 0x01F7
     e56:	30 91 f8 01 	lds	r19, 0x01F8
     e5a:	b9 01       	movw	r22, r18
     e5c:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_USART_SetBaudRate>
     e60:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = MCAL_USART_SetSyncStatusAndFrameFormat(UART_Module.Sync_Mode, UART_Module.Parity_Check,
     e62:	80 91 f9 01 	lds	r24, 0x01F9
     e66:	90 91 fb 01 	lds	r25, 0x01FB
     e6a:	20 91 fc 01 	lds	r18, 0x01FC
     e6e:	30 91 fa 01 	lds	r19, 0x01FA
     e72:	69 2f       	mov	r22, r25
     e74:	42 2f       	mov	r20, r18
     e76:	23 2f       	mov	r18, r19
     e78:	0e 94 da 08 	call	0x11b4	; 0x11b4 <MCAL_USART_SetSyncStatusAndFrameFormat>
     e7c:	89 83       	std	Y+1, r24	; 0x01
										  UART_Module.Stop_Bits, UART_Module.Data_Bits);

	return Local_ErrorStatus;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <MCAL_USART_USARTTransmitterStatus>:

Std_ReturnType MCAL_USART_USARTTransmitterStatus(uint8 Copy_TxStatus)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <MCAL_USART_USARTTransmitterStatus+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
     e94:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.TXEN_Bit3 = Copy_TxStatus;
     e96:	ea e2       	ldi	r30, 0x2A	; 42
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	81 70       	andi	r24, 0x01	; 1
     e9e:	81 70       	andi	r24, 0x01	; 1
     ea0:	98 2f       	mov	r25, r24
     ea2:	99 0f       	add	r25, r25
     ea4:	99 0f       	add	r25, r25
     ea6:	99 0f       	add	r25, r25
     ea8:	80 81       	ld	r24, Z
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	89 2b       	or	r24, r25
     eae:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <MCAL_USART_USARTSendData>:
Std_ReturnType MCAL_USART_USARTSendData(uint16 Copy_DataToBeSend)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <MCAL_USART_USARTSendData+0x6>
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
     ed0:	19 82       	std	Y+1, r1	; 0x01
	if(UART_Module.Data_Bits == Bits_9)
     ed2:	80 91 fa 01 	lds	r24, 0x01FA
     ed6:	87 30       	cpi	r24, 0x07	; 7
     ed8:	69 f4       	brne	.+26     	; 0xef4 <MCAL_USART_USARTSendData+0x34>
		UCSRB_REG.TXB8_Bit0 = Copy_DataToBeSend >> 8;
     eda:	ea e2       	ldi	r30, 0x2A	; 42
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	89 2f       	mov	r24, r25
     ee4:	99 27       	eor	r25, r25
     ee6:	81 70       	andi	r24, 0x01	; 1
     ee8:	98 2f       	mov	r25, r24
     eea:	91 70       	andi	r25, 0x01	; 1
     eec:	80 81       	ld	r24, Z
     eee:	8e 7f       	andi	r24, 0xFE	; 254
     ef0:	89 2b       	or	r24, r25
     ef2:	80 83       	st	Z, r24
	UDR_REG = Copy_DataToBeSend;
     ef4:	ec e2       	ldi	r30, 0x2C	; 44
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <MCAL_USART_USARTReceiverStatus>:
Std_ReturnType MCAL_USART_USARTReceiverStatus(uint8 Copy_RxStatus)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <MCAL_USART_USARTReceiverStatus+0x6>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.RXEN_Bit4 = Copy_RxStatus;
     f1c:	ea e2       	ldi	r30, 0x2A	; 42
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	81 70       	andi	r24, 0x01	; 1
     f26:	98 2f       	mov	r25, r24
     f28:	92 95       	swap	r25
     f2a:	90 7f       	andi	r25, 0xF0	; 240
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	89 2b       	or	r24, r25
     f32:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <MCAL_USART_USARTReceiveData>:
Std_ReturnType MCAL_USART_USARTReceiveData(uint16 *Copy_ReceivedData)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <MCAL_USART_USARTReceiveData+0x6>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9b 83       	std	Y+3, r25	; 0x03
     f52:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
     f54:	19 82       	std	Y+1, r1	; 0x01
	*Copy_ReceivedData = 0;
     f56:	ea 81       	ldd	r30, Y+2	; 0x02
     f58:	fb 81       	ldd	r31, Y+3	; 0x03
     f5a:	11 82       	std	Z+1, r1	; 0x01
     f5c:	10 82       	st	Z, r1
	if(UCSRA_REG.FE_Bit4 | UCSRA_REG.PE_Bit2)//Handling the Frame Error and the Parity Error cases.
     f5e:	eb e2       	ldi	r30, 0x2B	; 43
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	82 95       	swap	r24
     f66:	8f 70       	andi	r24, 0x0F	; 15
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	eb e2       	ldi	r30, 0x2B	; 43
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	86 95       	lsr	r24
     f76:	86 95       	lsr	r24
     f78:	81 70       	andi	r24, 0x01	; 1
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	82 2b       	or	r24, r18
     f80:	93 2b       	or	r25, r19
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	89 f0       	breq	.+34     	; 0xfa8 <MCAL_USART_USARTReceiveData+0x64>
	{
		*Copy_ReceivedData = UDR_REG;
     f86:	ec e2       	ldi	r30, 0x2C	; 44
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	ea 81       	ldd	r30, Y+2	; 0x02
     f92:	fb 81       	ldd	r31, Y+3	; 0x03
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
		*Copy_ReceivedData = INVALID_RECEIVED_DATA;
     f98:	ea 81       	ldd	r30, Y+2	; 0x02
     f9a:	fb 81       	ldd	r31, Y+3	; 0x03
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	94 ee       	ldi	r25, 0xE4	; 228
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
		Local_ErrorStatus = E_NOT_OK;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	28 c0       	rjmp	.+80     	; 0xff8 <MCAL_USART_USARTReceiveData+0xb4>
	}
	else
	{
		while(UCSRA_REG.RXC_Bit7 == USART_STILL_RECIEVE);
     fa8:	eb e2       	ldi	r30, 0x2B	; 43
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 78       	andi	r24, 0x80	; 128
     fb0:	88 23       	and	r24, r24
     fb2:	d1 f3       	breq	.-12     	; 0xfa8 <MCAL_USART_USARTReceiveData+0x64>
		if(UART_Module.Data_Bits == Bits_9)
     fb4:	80 91 fa 01 	lds	r24, 0x01FA
     fb8:	87 30       	cpi	r24, 0x07	; 7
     fba:	59 f4       	brne	.+22     	; 0xfd2 <MCAL_USART_USARTReceiveData+0x8e>
			*Copy_ReceivedData = UCSRB_REG.RXB8_Bit1;
     fbc:	ea e2       	ldi	r30, 0x2A	; 42
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	86 95       	lsr	r24
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	ea 81       	ldd	r30, Y+2	; 0x02
     fcc:	fb 81       	ldd	r31, Y+3	; 0x03
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
		*Copy_ReceivedData = (*Copy_ReceivedData << 8) | UDR_REG;
     fd2:	ea 81       	ldd	r30, Y+2	; 0x02
     fd4:	fb 81       	ldd	r31, Y+3	; 0x03
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	38 2f       	mov	r19, r24
     fdc:	22 27       	eor	r18, r18
     fde:	ec e2       	ldi	r30, 0x2C	; 44
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	82 2b       	or	r24, r18
     fea:	93 2b       	or	r25, r19
     fec:	ea 81       	ldd	r30, Y+2	; 0x02
     fee:	fb 81       	ldd	r31, Y+3	; 0x03
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
		Local_ErrorStatus = E_OK;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <MCAL_USART_SetBaudRate>:
Std_ReturnType MCAL_USART_SetBaudRate(const uint32 Copy_SystemClockFreq, const uint32 Copy_BaudRate)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	29 97       	sbiw	r28, 0x09	; 9
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	9d 83       	std	Y+5, r25	; 0x05
    101c:	8c 83       	std	Y+4, r24	; 0x04
    101e:	7f 83       	std	Y+7, r23	; 0x07
    1020:	6e 83       	std	Y+6, r22	; 0x06
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1022:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_UBRRValue = 0;
    1024:	1a 82       	std	Y+2, r1	; 0x02
    1026:	19 82       	std	Y+1, r1	; 0x01
	if(((UCSRB_REG.TXEN_Bit3) & (~(UCSRA_REG.UDRE_Bit5))) /*Transmission in progress*/
    1028:	ea e2       	ldi	r30, 0x2A	; 42
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	86 95       	lsr	r24
    1030:	86 95       	lsr	r24
    1032:	86 95       	lsr	r24
    1034:	81 70       	andi	r24, 0x01	; 1
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	eb e2       	ldi	r30, 0x2B	; 43
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	82 95       	swap	r24
    1042:	86 95       	lsr	r24
    1044:	87 70       	andi	r24, 0x07	; 7
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	80 95       	com	r24
    104e:	90 95       	com	r25
    1050:	82 23       	and	r24, r18
    1052:	93 23       	and	r25, r19
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	a1 f4       	brne	.+40     	; 0x1080 <MCAL_USART_SetBaudRate+0x7a>
    1058:	ea e2       	ldi	r30, 0x2A	; 42
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	82 95       	swap	r24
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	eb e2       	ldi	r30, 0x2B	; 43
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 1f       	adc	r24, r24
    1070:	88 27       	eor	r24, r24
    1072:	88 1f       	adc	r24, r24
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	82 23       	and	r24, r18
    107a:	93 23       	and	r25, r19
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	11 f0       	breq	.+4      	; 0x1084 <MCAL_USART_SetBaudRate+0x7e>
	   || ((UCSRB_REG.RXEN_Bit4) & (UCSRA_REG.RXC_Bit7))) /*Reception in progress or done but not read*/
	{
		Local_ErrorStatus = E_NOT_OK;
    1080:	1b 82       	std	Y+3, r1	; 0x03
    1082:	8e c0       	rjmp	.+284    	; 0x11a0 <MCAL_USART_SetBaudRate+0x19a>
	}
	else
	{
		switch(UART_Module.Sync_Mode)
    1084:	80 91 f9 01 	lds	r24, 0x01F9
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	39 87       	std	Y+9, r19	; 0x09
    108e:	28 87       	std	Y+8, r18	; 0x08
    1090:	88 85       	ldd	r24, Y+8	; 0x08
    1092:	99 85       	ldd	r25, Y+9	; 0x09
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	c1 f1       	breq	.+112    	; 0x110a <MCAL_USART_SetBaudRate+0x104>
    109a:	28 85       	ldd	r18, Y+8	; 0x08
    109c:	39 85       	ldd	r19, Y+9	; 0x09
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	2c f4       	brge	.+10     	; 0x10ae <MCAL_USART_SetBaudRate+0xa8>
    10a4:	88 85       	ldd	r24, Y+8	; 0x08
    10a6:	99 85       	ldd	r25, Y+9	; 0x09
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	41 f0       	breq	.+16     	; 0x10bc <MCAL_USART_SetBaudRate+0xb6>
    10ac:	78 c0       	rjmp	.+240    	; 0x119e <MCAL_USART_SetBaudRate+0x198>
    10ae:	28 85       	ldd	r18, Y+8	; 0x08
    10b0:	39 85       	ldd	r19, Y+9	; 0x09
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	31 05       	cpc	r19, r1
    10b6:	0c f0       	brlt	.+2      	; 0x10ba <MCAL_USART_SetBaudRate+0xb4>
    10b8:	72 c0       	rjmp	.+228    	; 0x119e <MCAL_USART_SetBaudRate+0x198>
    10ba:	4e c0       	rjmp	.+156    	; 0x1158 <MCAL_USART_SetBaudRate+0x152>
		{
		case Normal_Async_mode:
			Local_UBRRValue =(Copy_SystemClockFreq / (16 * Copy_BaudRate)) - 1;
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	9c 01       	movw	r18, r24
    10c2:	22 95       	swap	r18
    10c4:	32 95       	swap	r19
    10c6:	30 7f       	andi	r19, 0xF0	; 240
    10c8:	32 27       	eor	r19, r18
    10ca:	20 7f       	andi	r18, 0xF0	; 240
    10cc:	32 27       	eor	r19, r18
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	b9 01       	movw	r22, r18
    10d4:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    10d8:	cb 01       	movw	r24, r22
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
			UBRRL_REG = Local_UBRRValue;
    10e0:	e9 e2       	ldi	r30, 0x29	; 41
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	80 83       	st	Z, r24
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    10e8:	e0 e4       	ldi	r30, 0x40	; 64
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	89 2f       	mov	r24, r25
    10f2:	99 27       	eor	r25, r25
    10f4:	8f 70       	andi	r24, 0x0F	; 15
    10f6:	80 83       	st	Z, r24
			UART_Module.BaudRate = Copy_BaudRate;
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	90 93 f8 01 	sts	0x01F8, r25
    1100:	80 93 f7 01 	sts	0x01F7, r24
			Local_ErrorStatus = E_OK;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	8b 83       	std	Y+3, r24	; 0x03
    1108:	4b c0       	rjmp	.+150    	; 0x11a0 <MCAL_USART_SetBaudRate+0x19a>
			break;
		case Double_Speed_Async_mode:
			Local_UBRRValue =(Copy_SystemClockFreq / (8 * Copy_BaudRate)) - 1;
    110a:	8e 81       	ldd	r24, Y+6	; 0x06
    110c:	9f 81       	ldd	r25, Y+7	; 0x07
    110e:	9c 01       	movw	r18, r24
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	b9 01       	movw	r22, r18
    1122:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    1126:	cb 01       	movw	r24, r22
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
			UBRRL_REG = Local_UBRRValue;
    112e:	e9 e2       	ldi	r30, 0x29	; 41
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	80 83       	st	Z, r24
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    1136:	e0 e4       	ldi	r30, 0x40	; 64
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	89 2f       	mov	r24, r25
    1140:	99 27       	eor	r25, r25
    1142:	8f 70       	andi	r24, 0x0F	; 15
    1144:	80 83       	st	Z, r24
			UART_Module.BaudRate = Copy_BaudRate;
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	90 93 f8 01 	sts	0x01F8, r25
    114e:	80 93 f7 01 	sts	0x01F7, r24
			Local_ErrorStatus = E_OK;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	8b 83       	std	Y+3, r24	; 0x03
    1156:	24 c0       	rjmp	.+72     	; 0x11a0 <MCAL_USART_SetBaudRate+0x19a>
			break;
		case Sync_Master_Tx_Rx:
		case Sync_Master_Rx_Tx:
			Local_UBRRValue =(Copy_SystemClockFreq / (2 * Copy_BaudRate)) - 1;
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	9c 01       	movw	r18, r24
    115e:	22 0f       	add	r18, r18
    1160:	33 1f       	adc	r19, r19
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	b9 01       	movw	r22, r18
    1168:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    116c:	cb 01       	movw	r24, r22
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
			UBRRL_REG = Local_UBRRValue;
    1174:	e9 e2       	ldi	r30, 0x29	; 41
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	80 83       	st	Z, r24
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    117c:	e0 e4       	ldi	r30, 0x40	; 64
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	89 2f       	mov	r24, r25
    1186:	99 27       	eor	r25, r25
    1188:	8f 70       	andi	r24, 0x0F	; 15
    118a:	80 83       	st	Z, r24
			UART_Module.BaudRate = Copy_BaudRate;
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	9f 81       	ldd	r25, Y+7	; 0x07
    1190:	90 93 f8 01 	sts	0x01F8, r25
    1194:	80 93 f7 01 	sts	0x01F7, r24
			Local_ErrorStatus = E_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	8b 83       	std	Y+3, r24	; 0x03
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <MCAL_USART_SetBaudRate+0x19a>
			break;
		default:
			Local_ErrorStatus = E_NOT_OK;
    119e:	1b 82       	std	Y+3, r1	; 0x03
			break;
		}
	}
	return Local_ErrorStatus;
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11a2:	29 96       	adiw	r28, 0x09	; 9
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <MCAL_USART_SetSyncStatusAndFrameFormat>:

Std_ReturnType MCAL_USART_SetSyncStatusAndFrameFormat(const Clock_Generation_Mode_t Copy_SyncStatus,
													  const Parity_Frame_Format_t Copy_Parity_Check,
													  const Stop_Bits_Frame_Format_t Copy_Stop_Bits,
													  const Data_Bits_Frame_Format_t Copy_Data_Bits)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	29 97       	sbiw	r28, 0x09	; 9
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	6e 83       	std	Y+6, r22	; 0x06
    11cc:	4f 83       	std	Y+7, r20	; 0x07
    11ce:	28 87       	std	Y+8, r18	; 0x08
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    11d0:	19 82       	std	Y+1, r1	; 0x01
	UCSRC_REG_t Local_UCSRCValue;
	//Choose to write in UCSRC not UBRRH.
	Local_UCSRCValue.URSEL_Bit7 = SET;
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	8a 83       	std	Y+2, r24	; 0x02
	/* Since we will write in UCSRA during setting the synchronization modes, it's recommended
	* from the data-sheet to write the bits: FE, DOR, and PE in UCSRA by zero when writing in USCRA.
	*/
	UCSRA_REG.FE_Bit4  = CLEAR;
    11d8:	eb e2       	ldi	r30, 0x2B	; 43
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7e       	andi	r24, 0xEF	; 239
    11e0:	80 83       	st	Z, r24
	UCSRA_REG.DOR_Bit3 = CLEAR;
    11e2:	eb e2       	ldi	r30, 0x2B	; 43
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	87 7f       	andi	r24, 0xF7	; 247
    11ea:	80 83       	st	Z, r24
	UCSRA_REG.PE_Bit2  = CLEAR;
    11ec:	eb e2       	ldi	r30, 0x2B	; 43
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	80 83       	st	Z, r24
	//Set the Synchronization mode settings
	if((Copy_SyncStatus == Normal_Async_mode) || (Copy_SyncStatus == Double_Speed_Async_mode))
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	88 23       	and	r24, r24
    11fa:	19 f0       	breq	.+6      	; 0x1202 <MCAL_USART_SetSyncStatusAndFrameFormat+0x4e>
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	d1 f4       	brne	.+52     	; 0x1236 <MCAL_USART_SetSyncStatusAndFrameFormat+0x82>
	{
		Local_UCSRCValue.UMSEL_Bit6 = CLEAR;
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	8f 7b       	andi	r24, 0xBF	; 191
    1206:	8a 83       	std	Y+2, r24	; 0x02
		Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	8e 7f       	andi	r24, 0xFE	; 254
    120c:	8a 83       	std	Y+2, r24	; 0x02
		if(Copy_SyncStatus == Normal_Async_mode)
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	88 23       	and	r24, r24
    1212:	31 f4       	brne	.+12     	; 0x1220 <MCAL_USART_SetSyncStatusAndFrameFormat+0x6c>
			UCSRA_REG.U2X_Bit1 = CLEAR;
    1214:	eb e2       	ldi	r30, 0x2B	; 43
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8d 7f       	andi	r24, 0xFD	; 253
    121c:	80 83       	st	Z, r24
    121e:	05 c0       	rjmp	.+10     	; 0x122a <MCAL_USART_SetSyncStatusAndFrameFormat+0x76>
		else
			UCSRA_REG.U2X_Bit1 = SET;
    1220:	eb e2       	ldi	r30, 0x2B	; 43
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	82 60       	ori	r24, 0x02	; 2
    1228:	80 83       	st	Z, r24
		UART_Module.Sync_Mode = Copy_SyncStatus;
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	80 93 f9 01 	sts	0x01F9, r24
		Local_ErrorStatus = E_OK;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	4d c0       	rjmp	.+154    	; 0x12d0 <MCAL_USART_SetSyncStatusAndFrameFormat+0x11c>
	}
	else if((Copy_SyncStatus == Sync_Master_Tx_Rx) || (Copy_SyncStatus == Sync_Master_Rx_Tx) ||
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	51 f0       	breq	.+20     	; 0x1250 <MCAL_USART_SetSyncStatusAndFrameFormat+0x9c>
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	39 f0       	breq	.+14     	; 0x1250 <MCAL_USART_SetSyncStatusAndFrameFormat+0x9c>
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	84 30       	cpi	r24, 0x04	; 4
    1246:	21 f0       	breq	.+8      	; 0x1250 <MCAL_USART_SetSyncStatusAndFrameFormat+0x9c>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	85 30       	cpi	r24, 0x05	; 5
    124c:	09 f0       	breq	.+2      	; 0x1250 <MCAL_USART_SetSyncStatusAndFrameFormat+0x9c>
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <MCAL_USART_SetSyncStatusAndFrameFormat+0x11a>
			(Copy_SyncStatus == Sync_Slave_Tx_Rx) || (Copy_SyncStatus == Sync_Slave_Rx_Tx))
	{
		Local_UCSRCValue.UMSEL_Bit6 = SET;
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	8a 83       	std	Y+2, r24	; 0x02
		UCSRA_REG.U2X_Bit1 = CLEAR;
    1256:	eb e2       	ldi	r30, 0x2B	; 43
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8d 7f       	andi	r24, 0xFD	; 253
    125e:	80 83       	st	Z, r24
		if((Copy_SyncStatus == Sync_Master_Tx_Rx) || (Copy_SyncStatus == Sync_Master_Rx_Tx))
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	19 f0       	breq	.+6      	; 0x126c <MCAL_USART_SetSyncStatusAndFrameFormat+0xb8>
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	a9 f4       	brne	.+42     	; 0x1296 <MCAL_USART_SetSyncStatusAndFrameFormat+0xe2>
		{
			Pin_Conig_t Local_XCKPin = {
					.PORT_ID = DIO_PORTB,
					.Pin_Num = DIO_PIN0,
					.Pin_Direction = DIO_PIN_OUTPUT
			};
    126c:	1b 82       	std	Y+3, r1	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	8c 7f       	andi	r24, 0xFC	; 252
    1272:	81 60       	ori	r24, 0x01	; 1
    1274:	8b 83       	std	Y+3, r24	; 0x03
			Local_ErrorStatus = MCAL_DIO_SetPinDirection(&Local_XCKPin);
    1276:	ce 01       	movw	r24, r28
    1278:	03 96       	adiw	r24, 0x03	; 3
    127a:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    127e:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_SyncStatus == Sync_Master_Tx_Rx)
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	21 f4       	brne	.+8      	; 0x128e <MCAL_USART_SetSyncStatusAndFrameFormat+0xda>
				Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	8e 7f       	andi	r24, 0xFE	; 254
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	1c c0       	rjmp	.+56     	; 0x12c6 <MCAL_USART_SetSyncStatusAndFrameFormat+0x112>
			else
				Local_UCSRCValue.UCPOL_Bit0 = SET;
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	18 c0       	rjmp	.+48     	; 0x12c6 <MCAL_USART_SetSyncStatusAndFrameFormat+0x112>
		{
			Pin_Conig_t Local_XCKPin = {
					.PORT_ID = DIO_PORTB,
					.Pin_Num = DIO_PIN0,
					.Pin_Direction = DIO_PIN_INPUT
			};
    1296:	1c 82       	std	Y+4, r1	; 0x04
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	8c 7f       	andi	r24, 0xFC	; 252
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	8c 83       	std	Y+4, r24	; 0x04
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	8f 79       	andi	r24, 0x9F	; 159
    12a4:	80 62       	ori	r24, 0x20	; 32
    12a6:	8c 83       	std	Y+4, r24	; 0x04
			Local_ErrorStatus = MCAL_DIO_SetPinDirection(&Local_XCKPin);
    12a8:	ce 01       	movw	r24, r28
    12aa:	04 96       	adiw	r24, 0x04	; 4
    12ac:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    12b0:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_SyncStatus == Sync_Slave_Tx_Rx)
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <MCAL_USART_SetSyncStatusAndFrameFormat+0x10c>
				Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	8e 7f       	andi	r24, 0xFE	; 254
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <MCAL_USART_SetSyncStatusAndFrameFormat+0x112>
			else
				Local_UCSRCValue.UCPOL_Bit0 = SET;
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	8a 83       	std	Y+2, r24	; 0x02
		}
		UART_Module.Sync_Mode = Copy_SyncStatus;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	80 93 f9 01 	sts	0x01F9, r24
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <MCAL_USART_SetSyncStatusAndFrameFormat+0x11c>
	}
	else
		Local_ErrorStatus = E_NOT_OK;
    12ce:	19 82       	std	Y+1, r1	; 0x01
	//Set the parity check mode
	Local_UCSRCValue.UPM_BITs = Copy_Parity_Check;
    12d0:	8e 81       	ldd	r24, Y+6	; 0x06
    12d2:	83 70       	andi	r24, 0x03	; 3
    12d4:	83 70       	andi	r24, 0x03	; 3
    12d6:	98 2f       	mov	r25, r24
    12d8:	92 95       	swap	r25
    12da:	90 7f       	andi	r25, 0xF0	; 240
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	8f 7c       	andi	r24, 0xCF	; 207
    12e0:	89 2b       	or	r24, r25
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	//Set the stop bits number
	Local_UCSRCValue.USBS_Bit3 = Copy_Stop_Bits;
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	81 70       	andi	r24, 0x01	; 1
    12ea:	98 2f       	mov	r25, r24
    12ec:	99 0f       	add	r25, r25
    12ee:	99 0f       	add	r25, r25
    12f0:	99 0f       	add	r25, r25
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	87 7f       	andi	r24, 0xF7	; 247
    12f6:	89 2b       	or	r24, r25
    12f8:	8a 83       	std	Y+2, r24	; 0x02
	//Set the data(character) bits number in a frame.
	Local_UCSRCValue.UCSZ_1_0_BITs = Copy_Data_Bits;
    12fa:	88 85       	ldd	r24, Y+8	; 0x08
    12fc:	83 70       	andi	r24, 0x03	; 3
    12fe:	83 70       	andi	r24, 0x03	; 3
    1300:	98 2f       	mov	r25, r24
    1302:	99 0f       	add	r25, r25
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	89 7f       	andi	r24, 0xF9	; 249
    1308:	89 2b       	or	r24, r25
    130a:	8a 83       	std	Y+2, r24	; 0x02
	UCSRB_REG.UCSZ2_Bit2 = ((uint8)Copy_Data_Bits) >> 2; //In case of 9-bits data, the UCSZ2 bit UCSRB must be set, otherwise it's cleared
    130c:	ea e2       	ldi	r30, 0x2A	; 42
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	88 85       	ldd	r24, Y+8	; 0x08
    1312:	86 95       	lsr	r24
    1314:	86 95       	lsr	r24
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	98 2f       	mov	r25, r24
    131c:	99 0f       	add	r25, r25
    131e:	99 0f       	add	r25, r25
    1320:	80 81       	ld	r24, Z
    1322:	8b 7f       	andi	r24, 0xFB	; 251
    1324:	89 2b       	or	r24, r25
    1326:	80 83       	st	Z, r24
	//Assign the UCSRC value to it.
	UCSRC_REG = Local_UCSRCValue.UCSRC_Register;
    1328:	e0 e4       	ldi	r30, 0x40	; 64
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
	Local_ErrorStatus = Local_ErrorStatus && E_OK;
    1330:	19 86       	std	Y+9, r1	; 0x09
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 23       	and	r24, r24
    1336:	11 f0       	breq	.+4      	; 0x133c <MCAL_USART_SetSyncStatusAndFrameFormat+0x188>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 87       	std	Y+9, r24	; 0x09
    133c:	89 85       	ldd	r24, Y+9	; 0x09
    133e:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
}
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <MCAL_USART_ReadUBRRHorUCSRC>:
Std_ReturnType MCAL_USART_ReadUBRRHorUCSRC(uint8 Copy_RegToBeRead, uint8 *Copy_RegValue)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <MCAL_USART_ReadUBRRHorUCSRC+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <MCAL_USART_ReadUBRRHorUCSRC+0x8>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	7c 83       	std	Y+4, r23	; 0x04
    1364:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1366:	19 82       	std	Y+1, r1	; 0x01
	*Copy_RegValue = UBRRH_REG;
    1368:	e0 e4       	ldi	r30, 0x40	; 64
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	eb 81       	ldd	r30, Y+3	; 0x03
    1370:	fc 81       	ldd	r31, Y+4	; 0x04
    1372:	80 83       	st	Z, r24
	if(Copy_RegToBeRead == READ_UCSRC)
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	88 23       	and	r24, r24
    1378:	31 f4       	brne	.+12     	; 0x1386 <MCAL_USART_ReadUBRRHorUCSRC+0x32>
		*Copy_RegValue = UCSRC_REG;
    137a:	e0 e4       	ldi	r30, 0x40	; 64
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	eb 81       	ldd	r30, Y+3	; 0x03
    1382:	fc 81       	ldd	r31, Y+4	; 0x04
    1384:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <MCAL_USART_USARTTxCompleteINTStatus>:

Std_ReturnType MCAL_USART_USARTTxCompleteINTStatus(uint8 Copy_TxINTStatus)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <MCAL_USART_USARTTxCompleteINTStatus+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    13a6:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.TXCIE_Bit6 = Copy_TxINTStatus;
    13a8:	ea e2       	ldi	r30, 0x2A	; 42
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	98 2f       	mov	r25, r24
    13b4:	92 95       	swap	r25
    13b6:	99 0f       	add	r25, r25
    13b8:	99 0f       	add	r25, r25
    13ba:	90 7c       	andi	r25, 0xC0	; 192
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7b       	andi	r24, 0xBF	; 191
    13c0:	89 2b       	or	r24, r25
    13c2:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <MCAL_USART_SetCallBackTxComplete>:

Std_ReturnType MCAL_USART_SetCallBackTxComplete(void (*Copy_UART_Tx_Complete_Ptr)(void))
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <MCAL_USART_SetCallBackTxComplete+0x6>
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    13e4:	19 82       	std	Y+1, r1	; 0x01
	UART_Tx_Complete_Ptr = Copy_UART_Tx_Complete_Ptr;
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	90 93 cb 01 	sts	0x01CB, r25
    13ee:	80 93 ca 01 	sts	0x01CA, r24
	Local_ErrorStatus = E_OK;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <MCAL_USART_USARTRxCompleteINTStatus>:

Std_ReturnType MCAL_USART_USARTRxCompleteINTStatus(uint8 Copy_RxINTStatus)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <MCAL_USART_USARTRxCompleteINTStatus+0x6>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1410:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.RXCIE_Bit7 = Copy_RxINTStatus;
    1412:	ea e2       	ldi	r30, 0x2A	; 42
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	98 2f       	mov	r25, r24
    141c:	97 95       	ror	r25
    141e:	99 27       	eor	r25, r25
    1420:	97 95       	ror	r25
    1422:	80 81       	ld	r24, Z
    1424:	8f 77       	andi	r24, 0x7F	; 127
    1426:	89 2b       	or	r24, r25
    1428:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <MCAL_USART_SetCallBackRxComplete>:

Std_ReturnType MCAL_USART_SetCallBackRxComplete(void (*Copy_UART_Rx_Complete_Ptr)(void))
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <MCAL_USART_SetCallBackRxComplete+0x6>
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    144a:	19 82       	std	Y+1, r1	; 0x01
	UART_Rx_Complete_Ptr = Copy_UART_Rx_Complete_Ptr;
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	90 93 cd 01 	sts	0x01CD, r25
    1454:	80 93 cc 01 	sts	0x01CC, r24
	Local_ErrorStatus = E_OK;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <MCAL_USART_USARTTxBufferEmptyINTStatus>:

Std_ReturnType MCAL_USART_USARTTxBufferEmptyINTStatus(uint8 Copy_UDRINTStatus)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <MCAL_USART_USARTTxBufferEmptyINTStatus+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1476:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.UDRIE_Bit5 = Copy_UDRINTStatus;
    1478:	ea e2       	ldi	r30, 0x2A	; 42
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	98 2f       	mov	r25, r24
    1484:	92 95       	swap	r25
    1486:	99 0f       	add	r25, r25
    1488:	90 7e       	andi	r25, 0xE0	; 224
    148a:	80 81       	ld	r24, Z
    148c:	8f 7d       	andi	r24, 0xDF	; 223
    148e:	89 2b       	or	r24, r25
    1490:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <MCAL_USART_SetCallBackTxBufferEmpty>:

Std_ReturnType MCAL_USART_SetCallBackTxBufferEmpty(void (*Copy_UART_UDR_Empty_Ptr)(void))
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <MCAL_USART_SetCallBackTxBufferEmpty+0x6>
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    14b2:	19 82       	std	Y+1, r1	; 0x01
	UART_Tx_BuffEmpty_Ptr = Copy_UART_UDR_Empty_Ptr;
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	90 93 cf 01 	sts	0x01CF, r25
    14bc:	80 93 ce 01 	sts	0x01CE, r24
	Local_ErrorStatus = E_OK;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <__vector_15>:

ISR(USART_TXC_vect)
{
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	2f 93       	push	r18
    14de:	3f 93       	push	r19
    14e0:	4f 93       	push	r20
    14e2:	5f 93       	push	r21
    14e4:	6f 93       	push	r22
    14e6:	7f 93       	push	r23
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
    14ec:	af 93       	push	r26
    14ee:	bf 93       	push	r27
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	UART_Tx_Complete_Ptr();
    14fc:	e0 91 ca 01 	lds	r30, 0x01CA
    1500:	f0 91 cb 01 	lds	r31, 0x01CB
    1504:	09 95       	icall
	/* Clear the TXC bit after executing the ISR by writing one to its location, although this can
	* be done automatically by hardware.
	*/
	UCSRA_REG.TXC_Bit6 = SET;
    1506:	eb e2       	ldi	r30, 0x2B	; 43
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 64       	ori	r24, 0x40	; 64
    150e:	80 83       	st	Z, r24
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	ff 91       	pop	r31
    1516:	ef 91       	pop	r30
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <__vector_13>:

ISR(USART_RXC_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	UART_Rx_Complete_Ptr();
    1560:	e0 91 cc 01 	lds	r30, 0x01CC
    1564:	f0 91 cd 01 	lds	r31, 0x01CD
    1568:	09 95       	icall
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	bf 91       	pop	r27
    1574:	af 91       	pop	r26
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	7f 91       	pop	r23
    157c:	6f 91       	pop	r22
    157e:	5f 91       	pop	r21
    1580:	4f 91       	pop	r20
    1582:	3f 91       	pop	r19
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <__vector_14>:

ISR(USART_UDRE_vect)
{
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	2f 93       	push	r18
    159c:	3f 93       	push	r19
    159e:	4f 93       	push	r20
    15a0:	5f 93       	push	r21
    15a2:	6f 93       	push	r22
    15a4:	7f 93       	push	r23
    15a6:	8f 93       	push	r24
    15a8:	9f 93       	push	r25
    15aa:	af 93       	push	r26
    15ac:	bf 93       	push	r27
    15ae:	ef 93       	push	r30
    15b0:	ff 93       	push	r31
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	UART_Tx_BuffEmpty_Ptr();
    15ba:	e0 91 ce 01 	lds	r30, 0x01CE
    15be:	f0 91 cf 01 	lds	r31, 0x01CF
    15c2:	09 95       	icall
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	7f 91       	pop	r23
    15d6:	6f 91       	pop	r22
    15d8:	5f 91       	pop	r21
    15da:	4f 91       	pop	r20
    15dc:	3f 91       	pop	r19
    15de:	2f 91       	pop	r18
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <MCAL_Timers_TMR0Init>:
void (*UART_Tx_BuffEmpty_Ptr)(void) = NULL_PTR;

Std_ReturnType MCAL_USART_USARTInit()
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	Local_ErrorStatus = MCAL_USART_USARTTransmitterStatus(DISABLE);
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <MCAL_Timers_TMR0Init+0x6>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <MCAL_Timers_TMR0Init+0x8>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
	Local_ErrorStatus = MCAL_USART_USARTReceiverStatus(DISABLE);
    15f8:	19 82       	std	Y+1, r1	; 0x01
	Local_ErrorStatus = MCAL_USART_SetBaudRate(UART_Module.Copy_SystemClockFreq, UART_Module.BaudRate);
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3c 83       	std	Y+4, r19	; 0x04
    1602:	2b 83       	std	Y+3, r18	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	49 f1       	breq	.+82     	; 0x1660 <MCAL_Timers_TMR0Init+0x76>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <MCAL_Timers_TMR0Init+0x38>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <MCAL_Timers_TMR0Init+0x4e>
    1620:	59 c0       	rjmp	.+178    	; 0x16d4 <MCAL_Timers_TMR0Init+0xea>
    1622:	2b 81       	ldd	r18, Y+3	; 0x03
    1624:	3c 81       	ldd	r19, Y+4	; 0x04
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	79 f1       	breq	.+94     	; 0x168a <MCAL_Timers_TMR0Init+0xa0>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	d1 f1       	breq	.+116    	; 0x16aa <MCAL_Timers_TMR0Init+0xc0>
    1636:	4e c0       	rjmp	.+156    	; 0x16d4 <MCAL_Timers_TMR0Init+0xea>
	Local_ErrorStatus = MCAL_USART_SetSyncStatusAndFrameFormat(UART_Module.Sync_Mode, UART_Module.Parity_Check,
										  UART_Module.Stop_Bits, UART_Module.Data_Bits);

    1638:	e3 e5       	ldi	r30, 0x53	; 83
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8f 7b       	andi	r24, 0xBF	; 191
    1640:	80 83       	st	Z, r24
	return Local_ErrorStatus;
    1642:	e3 e5       	ldi	r30, 0x53	; 83
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	87 7f       	andi	r24, 0xF7	; 247
    164a:	80 83       	st	Z, r24
}
    164c:	e3 e5       	ldi	r30, 0x53	; 83
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7c       	andi	r24, 0xCF	; 207
    1654:	80 83       	st	Z, r24

    1656:	10 92 d0 01 	sts	0x01D0, r1
Std_ReturnType MCAL_USART_USARTTransmitterStatus(uint8 Copy_TxStatus)
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	3b c0       	rjmp	.+118    	; 0x16d6 <MCAL_Timers_TMR0Init+0xec>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	UCSRB_REG.TXEN_Bit3 = Copy_TxStatus;
    1660:	e3 e5       	ldi	r30, 0x53	; 83
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    166a:	e3 e5       	ldi	r30, 0x53	; 83
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	87 7f       	andi	r24, 0xF7	; 247
    1672:	80 83       	st	Z, r24
	return Local_ErrorStatus;
    1674:	e3 e5       	ldi	r30, 0x53	; 83
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8f 77       	andi	r24, 0x7F	; 127
    167c:	80 83       	st	Z, r24
}
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 93 d0 01 	sts	0x01D0, r24
Std_ReturnType MCAL_USART_USARTSendData(uint16 Copy_DataToBeSend)
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	26 c0       	rjmp	.+76     	; 0x16d6 <MCAL_Timers_TMR0Init+0xec>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	if(UART_Module.Data_Bits == Bits_9)
    168a:	e3 e5       	ldi	r30, 0x53	; 83
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8f 7b       	andi	r24, 0xBF	; 191
    1692:	80 83       	st	Z, r24
		UCSRB_REG.TXB8_Bit0 = Copy_DataToBeSend >> 8;
    1694:	e3 e5       	ldi	r30, 0x53	; 83
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	88 60       	ori	r24, 0x08	; 8
    169c:	80 83       	st	Z, r24
	UDR_REG = Copy_DataToBeSend;
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	80 93 d0 01 	sts	0x01D0, r24
	Local_ErrorStatus = E_OK;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	16 c0       	rjmp	.+44     	; 0x16d6 <MCAL_Timers_TMR0Init+0xec>
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_USART_USARTReceiverStatus(uint8 Copy_RxStatus)
    16aa:	e3 e5       	ldi	r30, 0x53	; 83
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	80 83       	st	Z, r24
{
    16b4:	e3 e5       	ldi	r30, 0x53	; 83
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	88 60       	ori	r24, 0x08	; 8
    16bc:	80 83       	st	Z, r24
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    16be:	e3 e5       	ldi	r30, 0x53	; 83
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 77       	andi	r24, 0x7F	; 127
    16c6:	80 83       	st	Z, r24
	UCSRB_REG.RXEN_Bit4 = Copy_RxStatus;
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	80 93 d0 01 	sts	0x01D0, r24
	Local_ErrorStatus = E_OK;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <MCAL_Timers_TMR0Init+0xec>
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_USART_USARTReceiveData(uint16 *Copy_ReceivedData)
    16d4:	19 82       	std	Y+1, r1	; 0x01
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	*Copy_ReceivedData = 0;
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
	if(UCSRA_REG.FE_Bit4 | UCSRA_REG.PE_Bit2)//Handling the Frame Error and the Parity Error cases.
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <MCAL_Timers_TMR0SetInitValue>:
	{
		*Copy_ReceivedData = UDR_REG;
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <MCAL_Timers_TMR0SetInitValue+0x6>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	8a 83       	std	Y+2, r24	; 0x02
		*Copy_ReceivedData = INVALID_RECEIVED_DATA;
    16f2:	19 82       	std	Y+1, r1	; 0x01
		Local_ErrorStatus = E_NOT_OK;
    16f4:	e2 e5       	ldi	r30, 0x52	; 82
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 83       	st	Z, r24
	}
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
	else
    1700:	89 81       	ldd	r24, Y+1	; 0x01
	{
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <MCAL_Timers_TMR0CTCModeSetup>:
		while(UCSRA_REG.RXC_Bit7 == USART_STILL_RECIEVE);
		if(UART_Module.Data_Bits == Bits_9)
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <MCAL_Timers_TMR0CTCModeSetup+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <MCAL_Timers_TMR0CTCModeSetup+0x8>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <MCAL_Timers_TMR0CTCModeSetup+0xa>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	6c 83       	std	Y+4, r22	; 0x04
			*Copy_ReceivedData = UCSRB_REG.RXB8_Bit1;
    171e:	19 82       	std	Y+1, r1	; 0x01
		*Copy_ReceivedData = (*Copy_ReceivedData << 8) | UDR_REG;
    1720:	80 91 d0 01 	lds	r24, 0x01D0
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	11 f0       	breq	.+4      	; 0x172c <MCAL_Timers_TMR0CTCModeSetup+0x20>
		Local_ErrorStatus = E_OK;
	}
    1728:	19 82       	std	Y+1, r1	; 0x01
    172a:	55 c0       	rjmp	.+170    	; 0x17d6 <MCAL_Timers_TMR0CTCModeSetup+0xca>
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_USART_SetBaudRate(const uint32 Copy_SystemClockFreq, const uint32 Copy_BaudRate)
{
    172c:	ec e5       	ldi	r30, 0x5C	; 92
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	80 83       	st	Z, r24
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	88 23       	and	r24, r24
    1738:	61 f0       	breq	.+24     	; 0x1752 <MCAL_Timers_TMR0CTCModeSetup+0x46>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	48 f4       	brcc	.+18     	; 0x1752 <MCAL_Timers_TMR0CTCModeSetup+0x46>
	uint16 Local_UBRRValue = 0;
	if(((UCSRB_REG.TXEN_Bit3) & (~(UCSRA_REG.UDRE_Bit5))) /*Transmission in progress*/
    1740:	1a 82       	std	Y+2, r1	; 0x02
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	83 7e       	andi	r24, 0xE3	; 227
    1746:	8c 60       	ori	r24, 0x0C	; 12
    1748:	8a 83       	std	Y+2, r24	; 0x02
	   || ((UCSRB_REG.RXEN_Bit4) & (UCSRA_REG.RXC_Bit7))) /*Reception in progress or done but not read*/
    174a:	ce 01       	movw	r24, r28
    174c:	02 96       	adiw	r24, 0x02	; 2
    174e:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	{
		Local_ErrorStatus = E_NOT_OK;
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	3e 83       	std	Y+6, r19	; 0x06
    175a:	2d 83       	std	Y+5, r18	; 0x05
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	e9 f0       	breq	.+58     	; 0x17a0 <MCAL_Timers_TMR0CTCModeSetup+0x94>
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	2c f4       	brge	.+10     	; 0x177a <MCAL_Timers_TMR0CTCModeSetup+0x6e>
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	61 f0       	breq	.+24     	; 0x1790 <MCAL_Timers_TMR0CTCModeSetup+0x84>
    1778:	2d c0       	rjmp	.+90     	; 0x17d4 <MCAL_Timers_TMR0CTCModeSetup+0xc8>
    177a:	2d 81       	ldd	r18, Y+5	; 0x05
    177c:	3e 81       	ldd	r19, Y+6	; 0x06
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	b9 f0       	breq	.+46     	; 0x17b2 <MCAL_Timers_TMR0CTCModeSetup+0xa6>
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	91 05       	cpc	r25, r1
    178c:	d9 f0       	breq	.+54     	; 0x17c4 <MCAL_Timers_TMR0CTCModeSetup+0xb8>
    178e:	22 c0       	rjmp	.+68     	; 0x17d4 <MCAL_Timers_TMR0CTCModeSetup+0xc8>
	}
	else
	{
    1790:	e3 e5       	ldi	r30, 0x53	; 83
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8f 7c       	andi	r24, 0xCF	; 207
    1798:	80 83       	st	Z, r24
		switch(UART_Module.Sync_Mode)
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	1b c0       	rjmp	.+54     	; 0x17d6 <MCAL_Timers_TMR0CTCModeSetup+0xca>
		{
		case Normal_Async_mode:
			Local_UBRRValue =(Copy_SystemClockFreq / (16 * Copy_BaudRate)) - 1;
    17a0:	e3 e5       	ldi	r30, 0x53	; 83
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8f 7c       	andi	r24, 0xCF	; 207
    17a8:	80 61       	ori	r24, 0x10	; 16
    17aa:	80 83       	st	Z, r24
			UBRRL_REG = Local_UBRRValue;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	12 c0       	rjmp	.+36     	; 0x17d6 <MCAL_Timers_TMR0CTCModeSetup+0xca>
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
			UART_Module.BaudRate = Copy_BaudRate;
			Local_ErrorStatus = E_OK;
    17b2:	e3 e5       	ldi	r30, 0x53	; 83
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 7c       	andi	r24, 0xCF	; 207
    17ba:	80 62       	ori	r24, 0x20	; 32
    17bc:	80 83       	st	Z, r24
			break;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <MCAL_Timers_TMR0CTCModeSetup+0xca>
		case Double_Speed_Async_mode:
			Local_UBRRValue =(Copy_SystemClockFreq / (8 * Copy_BaudRate)) - 1;
			UBRRL_REG = Local_UBRRValue;
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 63       	ori	r24, 0x30	; 48
    17cc:	80 83       	st	Z, r24
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <MCAL_Timers_TMR0CTCModeSetup+0xca>
			UART_Module.BaudRate = Copy_BaudRate;
			Local_ErrorStatus = E_OK;
			break;
    17d4:	19 82       	std	Y+1, r1	; 0x01
		case Sync_Master_Tx_Rx:
		case Sync_Master_Rx_Tx:
			Local_UBRRValue =(Copy_SystemClockFreq / (2 * Copy_BaudRate)) - 1;
			UBRRL_REG = Local_UBRRValue;
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    17d8:	26 96       	adiw	r28, 0x06	; 6
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <MCAL_Timers_TMR0FastPWMModeSetup>:
			UART_Module.BaudRate = Copy_BaudRate;
			Local_ErrorStatus = E_OK;
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <MCAL_Timers_TMR0FastPWMModeSetup+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <MCAL_Timers_TMR0FastPWMModeSetup+0x8>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <MCAL_Timers_TMR0FastPWMModeSetup+0xa>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	6c 83       	std	Y+4, r22	; 0x04
			break;
    17fc:	19 82       	std	Y+1, r1	; 0x01
		default:
    17fe:	80 91 d0 01 	lds	r24, 0x01D0
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	11 f0       	breq	.+4      	; 0x180a <MCAL_Timers_TMR0FastPWMModeSetup+0x20>
			Local_ErrorStatus = E_NOT_OK;
			break;
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	59 c0       	rjmp	.+178    	; 0x18bc <MCAL_Timers_TMR0FastPWMModeSetup+0xd2>
		}
	}
	return Local_ErrorStatus;
}
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	19 f0       	breq	.+6      	; 0x1816 <MCAL_Timers_TMR0FastPWMModeSetup+0x2c>
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	49 f4       	brne	.+18     	; 0x1828 <MCAL_Timers_TMR0FastPWMModeSetup+0x3e>

Std_ReturnType MCAL_USART_SetSyncStatusAndFrameFormat(const Clock_Generation_Mode_t Copy_SyncStatus,
    1816:	1a 82       	std	Y+2, r1	; 0x02
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	83 7e       	andi	r24, 0xE3	; 227
    181c:	8c 60       	ori	r24, 0x0C	; 12
    181e:	8a 83       	std	Y+2, r24	; 0x02
													  const Parity_Frame_Format_t Copy_Parity_Check,
    1820:	ce 01       	movw	r24, r28
    1822:	02 96       	adiw	r24, 0x02	; 2
    1824:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
													  const Stop_Bits_Frame_Format_t Copy_Stop_Bits,
													  const Data_Bits_Frame_Format_t Copy_Data_Bits)
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3e 83       	std	Y+6, r19	; 0x06
    1830:	2d 83       	std	Y+5, r18	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	91 05       	cpc	r25, r1
    183a:	89 f0       	breq	.+34     	; 0x185e <MCAL_Timers_TMR0FastPWMModeSetup+0x74>
    183c:	2d 81       	ldd	r18, Y+5	; 0x05
    183e:	3e 81       	ldd	r19, Y+6	; 0x06
    1840:	23 30       	cpi	r18, 0x03	; 3
    1842:	31 05       	cpc	r19, r1
    1844:	11 f1       	breq	.+68     	; 0x188a <MCAL_Timers_TMR0FastPWMModeSetup+0xa0>
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	b1 f5       	brne	.+108    	; 0x18ba <MCAL_Timers_TMR0FastPWMModeSetup+0xd0>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	UCSRC_REG_t Local_UCSRCValue;
    184e:	e3 e5       	ldi	r30, 0x53	; 83
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8f 7c       	andi	r24, 0xCF	; 207
    1856:	80 83       	st	Z, r24
	//Choose to write in UCSRC not UBRRH.
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	2f c0       	rjmp	.+94     	; 0x18bc <MCAL_Timers_TMR0FastPWMModeSetup+0xd2>
	Local_UCSRCValue.URSEL_Bit7 = SET;
	/* Since we will write in UCSRA during setting the synchronization modes, it's recommended
	* from the data-sheet to write the bits: FE, DOR, and PE in UCSRA by zero when writing in USCRA.
    185e:	ec e5       	ldi	r30, 0x5C	; 92
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	94 e6       	ldi	r25, 0x64	; 100
    1866:	69 2f       	mov	r22, r25
    1868:	0e 94 d7 43 	call	0x87ae	; 0x87ae <__udivmodqi4>
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	98 2f       	mov	r25, r24
    1872:	88 27       	eor	r24, r24
    1874:	81 50       	subi	r24, 0x01	; 1
    1876:	80 83       	st	Z, r24
	*/
    1878:	e3 e5       	ldi	r30, 0x53	; 83
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8f 7c       	andi	r24, 0xCF	; 207
    1880:	80 62       	ori	r24, 0x20	; 32
    1882:	80 83       	st	Z, r24
	UCSRA_REG.FE_Bit4  = CLEAR;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	19 c0       	rjmp	.+50     	; 0x18bc <MCAL_Timers_TMR0FastPWMModeSetup+0xd2>
	UCSRA_REG.DOR_Bit3 = CLEAR;
	UCSRA_REG.PE_Bit2  = CLEAR;
	//Set the Synchronization mode settings
    188a:	ec e5       	ldi	r30, 0x5C	; 92
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	94 e6       	ldi	r25, 0x64	; 100
    1892:	69 2f       	mov	r22, r25
    1894:	0e 94 d7 43 	call	0x87ae	; 0x87ae <__udivmodqi4>
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	82 1b       	sub	r24, r18
    18a2:	93 0b       	sbc	r25, r19
    18a4:	98 2f       	mov	r25, r24
    18a6:	88 27       	eor	r24, r24
    18a8:	80 83       	st	Z, r24
	if((Copy_SyncStatus == Normal_Async_mode) || (Copy_SyncStatus == Double_Speed_Async_mode))
    18aa:	e3 e5       	ldi	r30, 0x53	; 83
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 63       	ori	r24, 0x30	; 48
    18b2:	80 83       	st	Z, r24
	{
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <MCAL_Timers_TMR0FastPWMModeSetup+0xd2>
		Local_UCSRCValue.UMSEL_Bit6 = CLEAR;
		Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
		if(Copy_SyncStatus == Normal_Async_mode)
    18ba:	19 82       	std	Y+1, r1	; 0x01
			UCSRA_REG.U2X_Bit1 = CLEAR;
		else
			UCSRA_REG.U2X_Bit1 = SET;
		UART_Module.Sync_Mode = Copy_SyncStatus;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
		Local_ErrorStatus = E_OK;
    18be:	26 96       	adiw	r28, 0x06	; 6
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup>:
	}
	else if((Copy_SyncStatus == Sync_Master_Tx_Rx) || (Copy_SyncStatus == Sync_Master_Rx_Tx) ||
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	2e 97       	sbiw	r28, 0x0e	; 14
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	8b 83       	std	Y+3, r24	; 0x03
    18e6:	6c 83       	std	Y+4, r22	; 0x04
			(Copy_SyncStatus == Sync_Slave_Tx_Rx) || (Copy_SyncStatus == Sync_Slave_Rx_Tx))
    18e8:	19 82       	std	Y+1, r1	; 0x01
	{
    18ea:	80 91 d0 01 	lds	r24, 0x01D0
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	11 f0       	breq	.+4      	; 0x18f6 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x26>
		Local_UCSRCValue.UMSEL_Bit6 = SET;
		UCSRA_REG.U2X_Bit1 = CLEAR;
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	8f c0       	rjmp	.+286    	; 0x1a14 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x144>
		if((Copy_SyncStatus == Sync_Master_Tx_Rx) || (Copy_SyncStatus == Sync_Master_Rx_Tx))
		{
			Pin_Conig_t Local_XCKPin = {
					.PORT_ID = DIO_PORTB,
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	82 30       	cpi	r24, 0x02	; 2
    18fa:	19 f0       	breq	.+6      	; 0x1902 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x32>
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	49 f4       	brne	.+18     	; 0x1914 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x44>
					.Pin_Num = DIO_PIN0,
					.Pin_Direction = DIO_PIN_OUTPUT
    1902:	1a 82       	std	Y+2, r1	; 0x02
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	83 7e       	andi	r24, 0xE3	; 227
    1908:	8c 60       	ori	r24, 0x0C	; 12
    190a:	8a 83       	std	Y+2, r24	; 0x02
			};
    190c:	ce 01       	movw	r24, r28
    190e:	02 96       	adiw	r24, 0x02	; 2
    1910:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
			Local_ErrorStatus = MCAL_DIO_SetPinDirection(&Local_XCKPin);
			if(Copy_SyncStatus == Sync_Master_Tx_Rx)
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3a 87       	std	Y+10, r19	; 0x0a
    191c:	29 87       	std	Y+9, r18	; 0x09
    191e:	49 85       	ldd	r20, Y+9	; 0x09
    1920:	5a 85       	ldd	r21, Y+10	; 0x0a
    1922:	42 30       	cpi	r20, 0x02	; 2
    1924:	51 05       	cpc	r21, r1
    1926:	99 f0       	breq	.+38     	; 0x194e <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x7e>
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	91 05       	cpc	r25, r1
    1930:	09 f4       	brne	.+2      	; 0x1934 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x64>
    1932:	3e c0       	rjmp	.+124    	; 0x19b0 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0xe0>
    1934:	e9 85       	ldd	r30, Y+9	; 0x09
    1936:	fa 85       	ldd	r31, Y+10	; 0x0a
    1938:	30 97       	sbiw	r30, 0x00	; 0
    193a:	09 f0       	breq	.+2      	; 0x193e <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x6e>
    193c:	6a c0       	rjmp	.+212    	; 0x1a12 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x142>
				Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
			else
				Local_UCSRCValue.UCPOL_Bit0 = SET;
    193e:	e3 e5       	ldi	r30, 0x53	; 83
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8f 7c       	andi	r24, 0xCF	; 207
    1946:	80 83       	st	Z, r24
		}
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	63 c0       	rjmp	.+198    	; 0x1a14 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x144>
		else
		{
			Pin_Conig_t Local_XCKPin = {
    194e:	2c e5       	ldi	r18, 0x5C	; 92
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	38 87       	std	Y+8, r19	; 0x08
    1954:	2f 83       	std	Y+7, r18	; 0x07
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	94 e6       	ldi	r25, 0x64	; 100
    195a:	69 2f       	mov	r22, r25
    195c:	0e 94 d7 43 	call	0x87ae	; 0x87ae <__udivmodqi4>
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	ac 01       	movw	r20, r24
    196a:	24 9f       	mul	r18, r20
    196c:	c0 01       	movw	r24, r0
    196e:	25 9f       	mul	r18, r21
    1970:	90 0d       	add	r25, r0
    1972:	34 9f       	mul	r19, r20
    1974:	90 0d       	add	r25, r0
    1976:	11 24       	eor	r1, r1
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9c 87       	std	Y+12, r25	; 0x0c
    197c:	8b 87       	std	Y+11, r24	; 0x0b
    197e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1980:	9c 85       	ldd	r25, Y+12	; 0x0c
    1982:	99 23       	and	r25, r25
    1984:	2c f4       	brge	.+10     	; 0x1990 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0xc0>
    1986:	eb 85       	ldd	r30, Y+11	; 0x0b
    1988:	fc 85       	ldd	r31, Y+12	; 0x0c
    198a:	31 96       	adiw	r30, 0x01	; 1
    198c:	fc 87       	std	Y+12, r31	; 0x0c
    198e:	eb 87       	std	Y+11, r30	; 0x0b
    1990:	8b 85       	ldd	r24, Y+11	; 0x0b
    1992:	9c 85       	ldd	r25, Y+12	; 0x0c
    1994:	95 95       	asr	r25
    1996:	87 95       	ror	r24
    1998:	ef 81       	ldd	r30, Y+7	; 0x07
    199a:	f8 85       	ldd	r31, Y+8	; 0x08
    199c:	80 83       	st	Z, r24
					.PORT_ID = DIO_PORTB,
    199e:	e3 e5       	ldi	r30, 0x53	; 83
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7c       	andi	r24, 0xCF	; 207
    19a6:	80 62       	ori	r24, 0x20	; 32
    19a8:	80 83       	st	Z, r24
					.Pin_Num = DIO_PIN0,
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	32 c0       	rjmp	.+100    	; 0x1a14 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x144>
					.Pin_Direction = DIO_PIN_INPUT
			};
			Local_ErrorStatus = MCAL_DIO_SetPinDirection(&Local_XCKPin);
    19b0:	2c e5       	ldi	r18, 0x5C	; 92
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3e 83       	std	Y+6, r19	; 0x06
    19b6:	2d 83       	std	Y+5, r18	; 0x05
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	94 e6       	ldi	r25, 0x64	; 100
    19bc:	69 2f       	mov	r22, r25
    19be:	0e 94 d7 43 	call	0x87ae	; 0x87ae <__udivmodqi4>
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	ac 01       	movw	r20, r24
    19cc:	24 9f       	mul	r18, r20
    19ce:	c0 01       	movw	r24, r0
    19d0:	25 9f       	mul	r18, r21
    19d2:	90 0d       	add	r25, r0
    19d4:	34 9f       	mul	r19, r20
    19d6:	90 0d       	add	r25, r0
    19d8:	11 24       	eor	r1, r1
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	9e 87       	std	Y+14, r25	; 0x0e
    19de:	8d 87       	std	Y+13, r24	; 0x0d
    19e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e4:	99 23       	and	r25, r25
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x122>
    19e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    19ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    19ec:	31 96       	adiw	r30, 0x01	; 1
    19ee:	fe 87       	std	Y+14, r31	; 0x0e
    19f0:	ed 87       	std	Y+13, r30	; 0x0d
    19f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f6:	95 95       	asr	r25
    19f8:	87 95       	ror	r24
    19fa:	80 95       	com	r24
    19fc:	ed 81       	ldd	r30, Y+5	; 0x05
    19fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1a00:	80 83       	st	Z, r24
			if(Copy_SyncStatus == Sync_Slave_Tx_Rx)
    1a02:	e3 e5       	ldi	r30, 0x53	; 83
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 63       	ori	r24, 0x30	; 48
    1a0a:	80 83       	st	Z, r24
				Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <MCAL_Timers_TMR0PhaseCorrectPWMModeSetup+0x144>
			else
				Local_UCSRCValue.UCPOL_Bit0 = SET;
		}
    1a12:	19 82       	std	Y+1, r1	; 0x01
		UART_Module.Sync_Mode = Copy_SyncStatus;
	}
	else
		Local_ErrorStatus = E_NOT_OK;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
	//Set the parity check mode
    1a16:	2e 96       	adiw	r28, 0x0e	; 14
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <MCAL_Timers_TMR0Start>:
	Local_UCSRCValue.UPM_BITs = Copy_Parity_Check;
	//Set the stop bits number
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <MCAL_Timers_TMR0Start+0x6>
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	8a 83       	std	Y+2, r24	; 0x02
	Local_UCSRCValue.USBS_Bit3 = Copy_Stop_Bits;
    1a34:	19 82       	std	Y+1, r1	; 0x01
	//Set the data(character) bits number in a frame.
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	88 23       	and	r24, r24
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <MCAL_Timers_TMR0Start+0x18>
	Local_UCSRCValue.UCSZ_1_0_BITs = Copy_Data_Bits;
	UCSRB_REG.UCSZ2_Bit2 = ((uint8)Copy_Data_Bits) >> 2; //In case of 9-bits data, the UCSZ2 bit UCSRB must be set, otherwise it's cleared
    1a3c:	19 82       	std	Y+1, r1	; 0x01
    1a3e:	0c c0       	rjmp	.+24     	; 0x1a58 <MCAL_Timers_TMR0Start+0x30>
	//Assign the UCSRC value to it.
	UCSRC_REG = Local_UCSRCValue.UCSRC_Register;
	Local_ErrorStatus = Local_ErrorStatus && E_OK;
	return Local_ErrorStatus;
    1a40:	e3 e5       	ldi	r30, 0x53	; 83
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	87 70       	andi	r24, 0x07	; 7
    1a48:	98 2f       	mov	r25, r24
    1a4a:	97 70       	andi	r25, 0x07	; 7
    1a4c:	80 81       	ld	r24, Z
    1a4e:	88 7f       	andi	r24, 0xF8	; 248
    1a50:	89 2b       	or	r24, r25
    1a52:	80 83       	st	Z, r24
}
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	89 83       	std	Y+1, r24	; 0x01
Std_ReturnType MCAL_USART_ReadUBRRHorUCSRC(uint8 Copy_RegToBeRead, uint8 *Copy_RegValue)
{
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <MCAL_Timers_TMR0Stop>:
	*Copy_RegValue = UBRRH_REG;
	if(Copy_RegToBeRead == READ_UCSRC)
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
		*Copy_RegValue = UCSRC_REG;
    1a6e:	19 82       	std	Y+1, r1	; 0x01
	Local_ErrorStatus = E_OK;
    1a70:	e3 e5       	ldi	r30, 0x53	; 83
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 7f       	andi	r24, 0xF8	; 248
    1a78:	80 83       	st	Z, r24
	return Local_ErrorStatus;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
}
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01

    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <MCAL_Timers_TMR0ForceCompareMatch>:
Std_ReturnType MCAL_USART_USARTTxCompleteINTStatus(uint8 Copy_TxINTStatus)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1a92:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.TXCIE_Bit6 = Copy_TxINTStatus;
    1a94:	80 91 d0 01 	lds	r24, 0x01D0
    1a98:	88 23       	and	r24, r24
    1a9a:	21 f0       	breq	.+8      	; 0x1aa4 <MCAL_Timers_TMR0ForceCompareMatch+0x1c>
    1a9c:	80 91 d0 01 	lds	r24, 0x01D0
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	41 f4       	brne	.+16     	; 0x1ab4 <MCAL_Timers_TMR0ForceCompareMatch+0x2c>
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    1aa4:	e3 e5       	ldi	r30, 0x53	; 83
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	80 68       	ori	r24, 0x80	; 128
    1aac:	80 83       	st	Z, r24
}
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <MCAL_Timers_TMR0ForceCompareMatch+0x2e>

Std_ReturnType MCAL_USART_SetCallBackTxComplete(void (*Copy_UART_Tx_Complete_Ptr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
	UART_Tx_Complete_Ptr = Copy_UART_Tx_Complete_Ptr;
	Local_ErrorStatus = E_OK;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
	return Local_ErrorStatus;
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <MCAL_Timers_TMR0OverflowInterruptStatus>:
}

Std_ReturnType MCAL_USART_USARTRxCompleteINTStatus(uint8 Copy_RxINTStatus)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <MCAL_Timers_TMR0OverflowInterruptStatus+0x6>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1acc:	19 82       	std	Y+1, r1	; 0x01
	UCSRB_REG.RXCIE_Bit7 = Copy_RxINTStatus;
    1ace:	e9 e5       	ldi	r30, 0x59	; 89
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	81 70       	andi	r24, 0x01	; 1
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	91 70       	andi	r25, 0x01	; 1
    1ada:	80 81       	ld	r24, Z
    1adc:	8e 7f       	andi	r24, 0xFE	; 254
    1ade:	89 2b       	or	r24, r25
    1ae0:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <MCAL_Timers_TMR0ReadOverflowInterruptFlag>:

Std_ReturnType MCAL_USART_SetCallBackRxComplete(void (*Copy_UART_Rx_Complete_Ptr)(void))
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <MCAL_Timers_TMR0ReadOverflowInterruptFlag+0x6>
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	9b 83       	std	Y+3, r25	; 0x03
    1b00:	8a 83       	std	Y+2, r24	; 0x02
{
    1b02:	19 82       	std	Y+1, r1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1b04:	e8 e5       	ldi	r30, 0x58	; 88
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	81 70       	andi	r24, 0x01	; 1
    1b0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b10:	80 83       	st	Z, r24
	UART_Rx_Complete_Ptr = Copy_UART_Rx_Complete_Ptr;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = E_OK;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
	return Local_ErrorStatus;
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <MCAL_Timers_TMR0ClearOverflowInterruptFlag>:
}

    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
Std_ReturnType MCAL_USART_USARTTxBufferEmptyINTStatus(uint8 Copy_UDRINTStatus)
    1b2e:	19 82       	std	Y+1, r1	; 0x01
{
    1b30:	e8 e5       	ldi	r30, 0x58	; 88
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	81 60       	ori	r24, 0x01	; 1
    1b38:	80 83       	st	Z, r24
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	UCSRB_REG.UDRIE_Bit5 = Copy_UDRINTStatus;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
	Local_ErrorStatus = E_OK;
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <MCAL_Timers_TMR0CompareMatchInterruptStatus>:
	return Local_ErrorStatus;
}
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <MCAL_Timers_TMR0CompareMatchInterruptStatus+0x6>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	8a 83       	std	Y+2, r24	; 0x02

    1b54:	19 82       	std	Y+1, r1	; 0x01
Std_ReturnType MCAL_USART_SetCallBackTxBufferEmpty(void (*Copy_UART_UDR_Empty_Ptr)(void))
    1b56:	e9 e5       	ldi	r30, 0x59	; 89
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	81 70       	andi	r24, 0x01	; 1
    1b5e:	81 70       	andi	r24, 0x01	; 1
    1b60:	98 2f       	mov	r25, r24
    1b62:	99 0f       	add	r25, r25
    1b64:	80 81       	ld	r24, Z
    1b66:	8d 7f       	andi	r24, 0xFD	; 253
    1b68:	89 2b       	or	r24, r25
    1b6a:	80 83       	st	Z, r24
{
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
	UART_Tx_BuffEmpty_Ptr = Copy_UART_UDR_Empty_Ptr;
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <MCAL_Timers_TMR0ReadCompareMatchInterruptFlag>:
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <MCAL_Timers_TMR0ReadCompareMatchInterruptFlag+0x6>
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	9b 83       	std	Y+3, r25	; 0x03
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
}
    1b8c:	19 82       	std	Y+1, r1	; 0x01

    1b8e:	e8 e5       	ldi	r30, 0x58	; 88
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	86 95       	lsr	r24
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	ea 81       	ldd	r30, Y+2	; 0x02
    1b9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9c:	80 83       	st	Z, r24
ISR(USART_TXC_vect)
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01
{
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
	UART_Tx_Complete_Ptr();
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <MCAL_Timers_TMR0ClearCompareMatchInterruptFlag>:
	/* Clear the TXC bit after executing the ISR by writing one to its location, although this can
	* be done automatically by hardware.
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	*/
    1bba:	19 82       	std	Y+1, r1	; 0x01
	UCSRA_REG.TXC_Bit6 = SET;
    1bbc:	e8 e5       	ldi	r30, 0x58	; 88
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	82 60       	ori	r24, 0x02	; 2
    1bc4:	80 83       	st	Z, r24
}
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	89 83       	std	Y+1, r24	; 0x01

    1bca:	89 81       	ldd	r24, Y+1	; 0x01
ISR(USART_RXC_vect)
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <MCAL_Timers_TMR0OverlowSetCallBack>:
{
	UART_Rx_Complete_Ptr();
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <MCAL_Timers_TMR0OverlowSetCallBack+0x6>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	9b 83       	std	Y+3, r25	; 0x03
    1be2:	8a 83       	std	Y+2, r24	; 0x02
}
    1be4:	19 82       	std	Y+1, r1	; 0x01

    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	90 93 d5 01 	sts	0x01D5, r25
    1bee:	80 93 d4 01 	sts	0x01D4, r24
ISR(USART_UDRE_vect)
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
{
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
	UART_Tx_BuffEmpty_Ptr();
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <MCAL_Timers_TMR0CompareMatchSetCallBack>:
}

    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <MCAL_Timers_TMR0CompareMatchSetCallBack+0x6>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	90 93 d7 01 	sts	0x01D7, r25
    1c1e:	80 93 d6 01 	sts	0x01D6, r24
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <MCAL_Timers_TMR0Delay_ms>:
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	2e 97       	sbiw	r28, 0x0e	; 14
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	8a 87       	std	Y+10, r24	; 0x0a
    1c52:	7c 87       	std	Y+12, r23	; 0x0c
    1c54:	6b 87       	std	Y+11, r22	; 0x0b
    1c56:	19 86       	std	Y+9, r1	; 0x09
    1c58:	18 86       	std	Y+8, r1	; 0x08
    1c5a:	1f 82       	std	Y+7, r1	; 0x07
    1c5c:	1e 82       	std	Y+6, r1	; 0x06
    1c5e:	1d 82       	std	Y+5, r1	; 0x05
    1c60:	1c 82       	std	Y+4, r1	; 0x04
    1c62:	1b 82       	std	Y+3, r1	; 0x03
    1c64:	1a 82       	std	Y+2, r1	; 0x02
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 d3 01 	sts	0x01D3, r24
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MCAL_Timers_TMR0Init>
    1c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3e 87       	std	Y+14, r19	; 0x0e
    1c7c:	2d 87       	std	Y+13, r18	; 0x0d
    1c7e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c80:	5e 85       	ldd	r21, Y+14	; 0x0e
    1c82:	43 30       	cpi	r20, 0x03	; 3
    1c84:	51 05       	cpc	r21, r1
    1c86:	49 f1       	breq	.+82     	; 0x1cda <MCAL_Timers_TMR0Delay_ms+0xa6>
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	91 05       	cpc	r25, r1
    1c90:	5c f4       	brge	.+22     	; 0x1ca8 <MCAL_Timers_TMR0Delay_ms+0x74>
    1c92:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c94:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c96:	21 30       	cpi	r18, 0x01	; 1
    1c98:	31 05       	cpc	r19, r1
    1c9a:	89 f0       	breq	.+34     	; 0x1cbe <MCAL_Timers_TMR0Delay_ms+0x8a>
    1c9c:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c9e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1ca0:	42 30       	cpi	r20, 0x02	; 2
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	99 f0       	breq	.+38     	; 0x1ccc <MCAL_Timers_TMR0Delay_ms+0x98>
    1ca6:	2e c0       	rjmp	.+92     	; 0x1d04 <MCAL_Timers_TMR0Delay_ms+0xd0>
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	91 05       	cpc	r25, r1
    1cb0:	d9 f0       	breq	.+54     	; 0x1ce8 <MCAL_Timers_TMR0Delay_ms+0xb4>
    1cb2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cb4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cb6:	25 30       	cpi	r18, 0x05	; 5
    1cb8:	31 05       	cpc	r19, r1
    1cba:	e9 f0       	breq	.+58     	; 0x1cf6 <MCAL_Timers_TMR0Delay_ms+0xc2>
    1cbc:	23 c0       	rjmp	.+70     	; 0x1d04 <MCAL_Timers_TMR0Delay_ms+0xd0>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	94 e2       	ldi	r25, 0x24	; 36
    1cc2:	98 87       	std	Y+8, r25	; 0x08
    1cc4:	8f 83       	std	Y+7, r24	; 0x07
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	89 87       	std	Y+9, r24	; 0x09
    1cca:	1d c0       	rjmp	.+58     	; 0x1d06 <MCAL_Timers_TMR0Delay_ms+0xd2>
    1ccc:	80 e8       	ldi	r24, 0x80	; 128
    1cce:	94 e8       	ldi	r25, 0x84	; 132
    1cd0:	98 87       	std	Y+8, r25	; 0x08
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 87       	std	Y+9, r24	; 0x09
    1cd8:	16 c0       	rjmp	.+44     	; 0x1d06 <MCAL_Timers_TMR0Delay_ms+0xd2>
    1cda:	80 e9       	ldi	r24, 0x90	; 144
    1cdc:	90 ed       	ldi	r25, 0xD0	; 208
    1cde:	98 87       	std	Y+8, r25	; 0x08
    1ce0:	8f 83       	std	Y+7, r24	; 0x07
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 87       	std	Y+9, r24	; 0x09
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <MCAL_Timers_TMR0Delay_ms+0xd2>
    1ce8:	84 e2       	ldi	r24, 0x24	; 36
    1cea:	94 ef       	ldi	r25, 0xF4	; 244
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 87       	std	Y+9, r24	; 0x09
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <MCAL_Timers_TMR0Delay_ms+0xd2>
    1cf6:	89 e0       	ldi	r24, 0x09	; 9
    1cf8:	9d e3       	ldi	r25, 0x3D	; 61
    1cfa:	98 87       	std	Y+8, r25	; 0x08
    1cfc:	8f 83       	std	Y+7, r24	; 0x07
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	89 87       	std	Y+9, r24	; 0x09
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <MCAL_Timers_TMR0Delay_ms+0xd2>
    1d04:	19 86       	std	Y+9, r1	; 0x09
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <MCAL_Timers_TMR0Delay_ms+0xda>
    1d0c:	7a c0       	rjmp	.+244    	; 0x1e02 <MCAL_Timers_TMR0Delay_ms+0x1ce>
    1d0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d12:	28 ee       	ldi	r18, 0xE8	; 232
    1d14:	33 e0       	ldi	r19, 0x03	; 3
    1d16:	b9 01       	movw	r22, r18
    1d18:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 01       	movw	r18, r24
    1d20:	8f 81       	ldd	r24, Y+7	; 0x07
    1d22:	98 85       	ldd	r25, Y+8	; 0x08
    1d24:	ac 01       	movw	r20, r24
    1d26:	24 9f       	mul	r18, r20
    1d28:	c0 01       	movw	r24, r0
    1d2a:	25 9f       	mul	r18, r21
    1d2c:	90 0d       	add	r25, r0
    1d2e:	34 9f       	mul	r19, r20
    1d30:	90 0d       	add	r25, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	89 2f       	mov	r24, r25
    1d3e:	99 27       	eor	r25, r25
    1d40:	90 93 d2 01 	sts	0x01D2, r25
    1d44:	80 93 d1 01 	sts	0x01D1, r24
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	cc 01       	movw	r24, r24
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	53 e4       	ldi	r21, 0x43	; 67
    1d6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	7c 01       	movw	r14, r24
    1d74:	8d 01       	movw	r16, r26
    1d76:	80 91 d1 01 	lds	r24, 0x01D1
    1d7a:	90 91 d2 01 	lds	r25, 0x01D2
    1d7e:	cc 01       	movw	r24, r24
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d8c:	9b 01       	movw	r18, r22
    1d8e:	ac 01       	movw	r20, r24
    1d90:	c8 01       	movw	r24, r16
    1d92:	b7 01       	movw	r22, r14
    1d94:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	21 e0       	ldi	r18, 0x01	; 1
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	a9 01       	movw	r20, r18
    1db6:	48 1b       	sub	r20, r24
    1db8:	59 0b       	sbc	r21, r25
    1dba:	ca 01       	movw	r24, r20
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	96 95       	lsr	r25
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	88 27       	eor	r24, r24
    1dca:	97 95       	ror	r25
    1dcc:	87 95       	ror	r24
    1dce:	82 1b       	sub	r24, r18
    1dd0:	93 0b       	sbc	r25, r19
    1dd2:	84 0f       	add	r24, r20
    1dd4:	95 1f       	adc	r25, r21
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <MCAL_Timers_TMR0SetInitValue>
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <MCAL_Timers_TMR0OverflowInterruptStatus>
    1de6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <MCAL_Timers_TMR0Start>
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <MCAL_Timers_TMR0Delay_ms+0x1c2>
    1dee:	80 91 d3 01 	lds	r24, 0x01D3
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	e1 f3       	breq	.-8      	; 0x1dee <MCAL_Timers_TMR0Delay_ms+0x1ba>
    1df6:	80 91 d1 01 	lds	r24, 0x01D1
    1dfa:	90 91 d2 01 	lds	r25, 0x01D2
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	b1 f7       	brne	.-20     	; 0x1dee <MCAL_Timers_TMR0Delay_ms+0x1ba>
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	2e 96       	adiw	r28, 0x0e	; 14
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	08 95       	ret

00001e1e <MCAL_Timers_TMR0Timer_ms>:
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	8a 87       	std	Y+10, r24	; 0x0a
    1e3c:	7c 87       	std	Y+12, r23	; 0x0c
    1e3e:	6b 87       	std	Y+11, r22	; 0x0b
    1e40:	19 86       	std	Y+9, r1	; 0x09
    1e42:	18 86       	std	Y+8, r1	; 0x08
    1e44:	1f 82       	std	Y+7, r1	; 0x07
    1e46:	1e 82       	std	Y+6, r1	; 0x06
    1e48:	1d 82       	std	Y+5, r1	; 0x05
    1e4a:	1c 82       	std	Y+4, r1	; 0x04
    1e4c:	1b 82       	std	Y+3, r1	; 0x03
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
    1e50:	19 82       	std	Y+1, r1	; 0x01
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MCAL_Timers_TMR0Init>
    1e58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3e 87       	std	Y+14, r19	; 0x0e
    1e60:	2d 87       	std	Y+13, r18	; 0x0d
    1e62:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e64:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e66:	43 30       	cpi	r20, 0x03	; 3
    1e68:	51 05       	cpc	r21, r1
    1e6a:	49 f1       	breq	.+82     	; 0x1ebe <MCAL_Timers_TMR0Timer_ms+0xa0>
    1e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	91 05       	cpc	r25, r1
    1e74:	5c f4       	brge	.+22     	; 0x1e8c <MCAL_Timers_TMR0Timer_ms+0x6e>
    1e76:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e78:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e7a:	21 30       	cpi	r18, 0x01	; 1
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	89 f0       	breq	.+34     	; 0x1ea2 <MCAL_Timers_TMR0Timer_ms+0x84>
    1e80:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e82:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e84:	42 30       	cpi	r20, 0x02	; 2
    1e86:	51 05       	cpc	r21, r1
    1e88:	99 f0       	breq	.+38     	; 0x1eb0 <MCAL_Timers_TMR0Timer_ms+0x92>
    1e8a:	2e c0       	rjmp	.+92     	; 0x1ee8 <MCAL_Timers_TMR0Timer_ms+0xca>
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	91 05       	cpc	r25, r1
    1e94:	d9 f0       	breq	.+54     	; 0x1ecc <MCAL_Timers_TMR0Timer_ms+0xae>
    1e96:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e98:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e9a:	25 30       	cpi	r18, 0x05	; 5
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	e9 f0       	breq	.+58     	; 0x1eda <MCAL_Timers_TMR0Timer_ms+0xbc>
    1ea0:	23 c0       	rjmp	.+70     	; 0x1ee8 <MCAL_Timers_TMR0Timer_ms+0xca>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	94 e2       	ldi	r25, 0x24	; 36
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	8f 83       	std	Y+7, r24	; 0x07
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 87       	std	Y+9, r24	; 0x09
    1eae:	1d c0       	rjmp	.+58     	; 0x1eea <MCAL_Timers_TMR0Timer_ms+0xcc>
    1eb0:	80 e8       	ldi	r24, 0x80	; 128
    1eb2:	94 e8       	ldi	r25, 0x84	; 132
    1eb4:	98 87       	std	Y+8, r25	; 0x08
    1eb6:	8f 83       	std	Y+7, r24	; 0x07
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	89 87       	std	Y+9, r24	; 0x09
    1ebc:	16 c0       	rjmp	.+44     	; 0x1eea <MCAL_Timers_TMR0Timer_ms+0xcc>
    1ebe:	80 e9       	ldi	r24, 0x90	; 144
    1ec0:	90 ed       	ldi	r25, 0xD0	; 208
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	89 87       	std	Y+9, r24	; 0x09
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <MCAL_Timers_TMR0Timer_ms+0xcc>
    1ecc:	84 e2       	ldi	r24, 0x24	; 36
    1ece:	94 ef       	ldi	r25, 0xF4	; 244
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	8f 83       	std	Y+7, r24	; 0x07
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	89 87       	std	Y+9, r24	; 0x09
    1ed8:	08 c0       	rjmp	.+16     	; 0x1eea <MCAL_Timers_TMR0Timer_ms+0xcc>
    1eda:	89 e0       	ldi	r24, 0x09	; 9
    1edc:	9d e3       	ldi	r25, 0x3D	; 61
    1ede:	98 87       	std	Y+8, r25	; 0x08
    1ee0:	8f 83       	std	Y+7, r24	; 0x07
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	89 87       	std	Y+9, r24	; 0x09
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <MCAL_Timers_TMR0Timer_ms+0xcc>
    1ee8:	19 86       	std	Y+9, r1	; 0x09
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <MCAL_Timers_TMR0Timer_ms+0xd4>
    1ef0:	6f c0       	rjmp	.+222    	; 0x1fd0 <MCAL_Timers_TMR0Timer_ms+0x1b2>
    1ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ef6:	28 ee       	ldi	r18, 0xE8	; 232
    1ef8:	33 e0       	ldi	r19, 0x03	; 3
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 01       	movw	r18, r24
    1f04:	8f 81       	ldd	r24, Y+7	; 0x07
    1f06:	98 85       	ldd	r25, Y+8	; 0x08
    1f08:	ac 01       	movw	r20, r24
    1f0a:	24 9f       	mul	r18, r20
    1f0c:	c0 01       	movw	r24, r0
    1f0e:	25 9f       	mul	r18, r21
    1f10:	90 0d       	add	r25, r0
    1f12:	34 9f       	mul	r19, r20
    1f14:	90 0d       	add	r25, r0
    1f16:	11 24       	eor	r1, r1
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	89 2f       	mov	r24, r25
    1f22:	99 27       	eor	r25, r25
    1f24:	90 93 d2 01 	sts	0x01D2, r25
    1f28:	80 93 d1 01 	sts	0x01D1, r24
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	cc 01       	movw	r24, r24
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	53 e4       	ldi	r21, 0x43	; 67
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	7c 01       	movw	r14, r24
    1f58:	8d 01       	movw	r16, r26
    1f5a:	80 91 d1 01 	lds	r24, 0x01D1
    1f5e:	90 91 d2 01 	lds	r25, 0x01D2
    1f62:	cc 01       	movw	r24, r24
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f70:	9b 01       	movw	r18, r22
    1f72:	ac 01       	movw	r20, r24
    1f74:	c8 01       	movw	r24, r16
    1f76:	b7 01       	movw	r22, r14
    1f78:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	a9 01       	movw	r20, r18
    1f9a:	48 1b       	sub	r20, r24
    1f9c:	59 0b       	sbc	r21, r25
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	c9 01       	movw	r24, r18
    1fa8:	96 95       	lsr	r25
    1faa:	98 2f       	mov	r25, r24
    1fac:	88 27       	eor	r24, r24
    1fae:	97 95       	ror	r25
    1fb0:	87 95       	ror	r24
    1fb2:	82 1b       	sub	r24, r18
    1fb4:	93 0b       	sbc	r25, r19
    1fb6:	84 0f       	add	r24, r20
    1fb8:	95 1f       	adc	r25, r21
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <MCAL_Timers_TMR0SetInitValue>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <MCAL_Timers_TMR0OverflowInterruptStatus>
    1fca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fcc:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <MCAL_Timers_TMR0Start>
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	2e 96       	adiw	r28, 0x0e	; 14
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	08 95       	ret

00001fec <__vector_11>:
    1fec:	1f 92       	push	r1
    1fee:	0f 92       	push	r0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	0f 92       	push	r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	80 91 d1 01 	lds	r24, 0x01D1
    201a:	90 91 d2 01 	lds	r25, 0x01D2
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	f1 f0       	breq	.+60     	; 0x205e <__vector_11+0x72>
    2022:	80 91 d1 01 	lds	r24, 0x01D1
    2026:	90 91 d2 01 	lds	r25, 0x01D2
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	90 93 d2 01 	sts	0x01D2, r25
    2030:	80 93 d1 01 	sts	0x01D1, r24
    2034:	80 91 d1 01 	lds	r24, 0x01D1
    2038:	90 91 d2 01 	lds	r25, 0x01D2
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	a1 f4       	brne	.+40     	; 0x2068 <__vector_11+0x7c>
    2040:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <MCAL_Timers_TMR0Stop>
    2044:	80 91 d3 01 	lds	r24, 0x01D3
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	19 f4       	brne	.+6      	; 0x2052 <__vector_11+0x66>
    204c:	10 92 d3 01 	sts	0x01D3, r1
    2050:	0b c0       	rjmp	.+22     	; 0x2068 <__vector_11+0x7c>
    2052:	e0 91 d4 01 	lds	r30, 0x01D4
    2056:	f0 91 d5 01 	lds	r31, 0x01D5
    205a:	09 95       	icall
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <__vector_11+0x7c>
    205e:	e0 91 d4 01 	lds	r30, 0x01D4
    2062:	f0 91 d5 01 	lds	r31, 0x01D5
    2066:	09 95       	icall
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	ff 91       	pop	r31
    206e:	ef 91       	pop	r30
    2070:	bf 91       	pop	r27
    2072:	af 91       	pop	r26
    2074:	9f 91       	pop	r25
    2076:	8f 91       	pop	r24
    2078:	7f 91       	pop	r23
    207a:	6f 91       	pop	r22
    207c:	5f 91       	pop	r21
    207e:	4f 91       	pop	r20
    2080:	3f 91       	pop	r19
    2082:	2f 91       	pop	r18
    2084:	0f 90       	pop	r0
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	0f 90       	pop	r0
    208a:	1f 90       	pop	r1
    208c:	18 95       	reti

0000208e <__vector_10>:
    208e:	1f 92       	push	r1
    2090:	0f 92       	push	r0
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	e0 91 d6 01 	lds	r30, 0x01D6
    20bc:	f0 91 d7 01 	lds	r31, 0x01D7
    20c0:	09 95       	icall
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <MCAL_Timers_TMR1Init>:
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <MCAL_Timers_TMR1Init+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <MCAL_Timers_TMR1Init+0x8>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	19 82       	std	Y+1, r1	; 0x01
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	31 f0       	breq	.+12     	; 0x210c <MCAL_Timers_TMR1Init+0x24>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	8a 30       	cpi	r24, 0x0A	; 10
    2104:	19 f0       	breq	.+6      	; 0x210c <MCAL_Timers_TMR1Init+0x24>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	8c 30       	cpi	r24, 0x0C	; 12
    210a:	81 f4       	brne	.+32     	; 0x212c <MCAL_Timers_TMR1Init+0x44>
    210c:	1a 82       	std	Y+2, r1	; 0x02
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	83 60       	ori	r24, 0x03	; 3
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	83 7e       	andi	r24, 0xE3	; 227
    2118:	88 61       	ori	r24, 0x18	; 24
    211a:	8a 83       	std	Y+2, r24	; 0x02
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	8f 79       	andi	r24, 0x9F	; 159
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	ce 01       	movw	r24, r28
    2126:	02 96       	adiw	r24, 0x02	; 2
    2128:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	3d 83       	std	Y+5, r19	; 0x05
    2134:	2c 83       	std	Y+4, r18	; 0x04
    2136:	8c 81       	ldd	r24, Y+4	; 0x04
    2138:	9d 81       	ldd	r25, Y+5	; 0x05
    213a:	87 30       	cpi	r24, 0x07	; 7
    213c:	91 05       	cpc	r25, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <MCAL_Timers_TMR1Init+0x5a>
    2140:	12 c1       	rjmp	.+548    	; 0x2366 <MCAL_Timers_TMR1Init+0x27e>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	28 30       	cpi	r18, 0x08	; 8
    2148:	31 05       	cpc	r19, r1
    214a:	54 f5       	brge	.+84     	; 0x21a0 <MCAL_Timers_TMR1Init+0xb8>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	91 05       	cpc	r25, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <MCAL_Timers_TMR1Init+0x70>
    2156:	a4 c0       	rjmp	.+328    	; 0x22a0 <MCAL_Timers_TMR1Init+0x1b8>
    2158:	2c 81       	ldd	r18, Y+4	; 0x04
    215a:	3d 81       	ldd	r19, Y+5	; 0x05
    215c:	24 30       	cpi	r18, 0x04	; 4
    215e:	31 05       	cpc	r19, r1
    2160:	94 f4       	brge	.+36     	; 0x2186 <MCAL_Timers_TMR1Init+0x9e>
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	9d 81       	ldd	r25, Y+5	; 0x05
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	91 05       	cpc	r25, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <MCAL_Timers_TMR1Init+0x86>
    216c:	63 c0       	rjmp	.+198    	; 0x2234 <MCAL_Timers_TMR1Init+0x14c>
    216e:	2c 81       	ldd	r18, Y+4	; 0x04
    2170:	3d 81       	ldd	r19, Y+5	; 0x05
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	0c f0       	brlt	.+2      	; 0x217a <MCAL_Timers_TMR1Init+0x92>
    2178:	78 c0       	rjmp	.+240    	; 0x226a <MCAL_Timers_TMR1Init+0x182>
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	09 f4       	brne	.+2      	; 0x2184 <MCAL_Timers_TMR1Init+0x9c>
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <MCAL_Timers_TMR1Init+0x11a>
    2184:	c1 c1       	rjmp	.+898    	; 0x2508 <MCAL_Timers_TMR1Init+0x420>
    2186:	2c 81       	ldd	r18, Y+4	; 0x04
    2188:	3d 81       	ldd	r19, Y+5	; 0x05
    218a:	25 30       	cpi	r18, 0x05	; 5
    218c:	31 05       	cpc	r19, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <MCAL_Timers_TMR1Init+0xaa>
    2190:	b2 c0       	rjmp	.+356    	; 0x22f6 <MCAL_Timers_TMR1Init+0x20e>
    2192:	8c 81       	ldd	r24, Y+4	; 0x04
    2194:	9d 81       	ldd	r25, Y+5	; 0x05
    2196:	86 30       	cpi	r24, 0x06	; 6
    2198:	91 05       	cpc	r25, r1
    219a:	0c f0       	brlt	.+2      	; 0x219e <MCAL_Timers_TMR1Init+0xb6>
    219c:	c8 c0       	rjmp	.+400    	; 0x232e <MCAL_Timers_TMR1Init+0x246>
    219e:	9a c0       	rjmp	.+308    	; 0x22d4 <MCAL_Timers_TMR1Init+0x1ec>
    21a0:	2c 81       	ldd	r18, Y+4	; 0x04
    21a2:	3d 81       	ldd	r19, Y+5	; 0x05
    21a4:	2b 30       	cpi	r18, 0x0B	; 11
    21a6:	31 05       	cpc	r19, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <MCAL_Timers_TMR1Init+0xc4>
    21aa:	4b c1       	rjmp	.+662    	; 0x2442 <MCAL_Timers_TMR1Init+0x35a>
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	8c 30       	cpi	r24, 0x0C	; 12
    21b2:	91 05       	cpc	r25, r1
    21b4:	6c f4       	brge	.+26     	; 0x21d0 <MCAL_Timers_TMR1Init+0xe8>
    21b6:	2c 81       	ldd	r18, Y+4	; 0x04
    21b8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ba:	29 30       	cpi	r18, 0x09	; 9
    21bc:	31 05       	cpc	r19, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <MCAL_Timers_TMR1Init+0xda>
    21c0:	08 c1       	rjmp	.+528    	; 0x23d2 <MCAL_Timers_TMR1Init+0x2ea>
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	8a 30       	cpi	r24, 0x0A	; 10
    21c8:	91 05       	cpc	r25, r1
    21ca:	0c f0       	brlt	.+2      	; 0x21ce <MCAL_Timers_TMR1Init+0xe6>
    21cc:	1e c1       	rjmp	.+572    	; 0x240a <MCAL_Timers_TMR1Init+0x322>
    21ce:	e6 c0       	rjmp	.+460    	; 0x239c <MCAL_Timers_TMR1Init+0x2b4>
    21d0:	2c 81       	ldd	r18, Y+4	; 0x04
    21d2:	3d 81       	ldd	r19, Y+5	; 0x05
    21d4:	2d 30       	cpi	r18, 0x0D	; 13
    21d6:	31 05       	cpc	r19, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <MCAL_Timers_TMR1Init+0xf4>
    21da:	5e c1       	rjmp	.+700    	; 0x2498 <MCAL_Timers_TMR1Init+0x3b0>
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	9d 81       	ldd	r25, Y+5	; 0x05
    21e0:	8d 30       	cpi	r24, 0x0D	; 13
    21e2:	91 05       	cpc	r25, r1
    21e4:	0c f4       	brge	.+2      	; 0x21e8 <MCAL_Timers_TMR1Init+0x100>
    21e6:	48 c1       	rjmp	.+656    	; 0x2478 <MCAL_Timers_TMR1Init+0x390>
    21e8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ea:	3d 81       	ldd	r19, Y+5	; 0x05
    21ec:	2e 30       	cpi	r18, 0x0E	; 14
    21ee:	31 05       	cpc	r19, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <MCAL_Timers_TMR1Init+0x10c>
    21f2:	54 c1       	rjmp	.+680    	; 0x249c <MCAL_Timers_TMR1Init+0x3b4>
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	8f 30       	cpi	r24, 0x0F	; 15
    21fa:	91 05       	cpc	r25, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <MCAL_Timers_TMR1Init+0x118>
    21fe:	69 c1       	rjmp	.+722    	; 0x24d2 <MCAL_Timers_TMR1Init+0x3ea>
    2200:	83 c1       	rjmp	.+774    	; 0x2508 <MCAL_Timers_TMR1Init+0x420>
    2202:	ef e4       	ldi	r30, 0x4F	; 79
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8c 7f       	andi	r24, 0xFC	; 252
    220a:	80 83       	st	Z, r24
    220c:	ee e4       	ldi	r30, 0x4E	; 78
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	87 7e       	andi	r24, 0xE7	; 231
    2214:	80 83       	st	Z, r24
    2216:	ef e4       	ldi	r30, 0x4F	; 79
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8f 73       	andi	r24, 0x3F	; 63
    221e:	80 83       	st	Z, r24
    2220:	ef e4       	ldi	r30, 0x4F	; 79
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8f 7c       	andi	r24, 0xCF	; 207
    2228:	80 83       	st	Z, r24
    222a:	10 92 d8 01 	sts	0x01D8, r1
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	6b c1       	rjmp	.+726    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    2234:	ef e4       	ldi	r30, 0x4F	; 79
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8c 7f       	andi	r24, 0xFC	; 252
    223c:	81 60       	ori	r24, 0x01	; 1
    223e:	80 83       	st	Z, r24
    2240:	ee e4       	ldi	r30, 0x4E	; 78
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	87 7e       	andi	r24, 0xE7	; 231
    2248:	80 83       	st	Z, r24
    224a:	ef e4       	ldi	r30, 0x4F	; 79
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	87 7f       	andi	r24, 0xF7	; 247
    2252:	80 83       	st	Z, r24
    2254:	ef e4       	ldi	r30, 0x4F	; 79
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	8b 7f       	andi	r24, 0xFB	; 251
    225c:	80 83       	st	Z, r24
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	80 93 d8 01 	sts	0x01D8, r24
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	50 c1       	rjmp	.+672    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    226a:	ef e4       	ldi	r30, 0x4F	; 79
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8c 7f       	andi	r24, 0xFC	; 252
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	80 83       	st	Z, r24
    2276:	ee e4       	ldi	r30, 0x4E	; 78
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	87 7e       	andi	r24, 0xE7	; 231
    227e:	80 83       	st	Z, r24
    2280:	ef e4       	ldi	r30, 0x4F	; 79
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	87 7f       	andi	r24, 0xF7	; 247
    2288:	80 83       	st	Z, r24
    228a:	ef e4       	ldi	r30, 0x4F	; 79
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8b 7f       	andi	r24, 0xFB	; 251
    2292:	80 83       	st	Z, r24
    2294:	82 e0       	ldi	r24, 0x02	; 2
    2296:	80 93 d8 01 	sts	0x01D8, r24
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	35 c1       	rjmp	.+618    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    22a0:	ef e4       	ldi	r30, 0x4F	; 79
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	83 60       	ori	r24, 0x03	; 3
    22a8:	80 83       	st	Z, r24
    22aa:	ee e4       	ldi	r30, 0x4E	; 78
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	87 7e       	andi	r24, 0xE7	; 231
    22b2:	80 83       	st	Z, r24
    22b4:	ef e4       	ldi	r30, 0x4F	; 79
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	87 7f       	andi	r24, 0xF7	; 247
    22bc:	80 83       	st	Z, r24
    22be:	ef e4       	ldi	r30, 0x4F	; 79
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8b 7f       	andi	r24, 0xFB	; 251
    22c6:	80 83       	st	Z, r24
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	80 93 d8 01 	sts	0x01D8, r24
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	1b c1       	rjmp	.+566    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    22d4:	ef e4       	ldi	r30, 0x4F	; 79
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8c 7f       	andi	r24, 0xFC	; 252
    22dc:	80 83       	st	Z, r24
    22de:	ee e4       	ldi	r30, 0x4E	; 78
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	87 7e       	andi	r24, 0xE7	; 231
    22e6:	88 60       	ori	r24, 0x08	; 8
    22e8:	80 83       	st	Z, r24
    22ea:	84 e0       	ldi	r24, 0x04	; 4
    22ec:	80 93 d8 01 	sts	0x01D8, r24
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	0a c1       	rjmp	.+532    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    22f6:	ef e4       	ldi	r30, 0x4F	; 79
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8c 7f       	andi	r24, 0xFC	; 252
    22fe:	81 60       	ori	r24, 0x01	; 1
    2300:	80 83       	st	Z, r24
    2302:	ee e4       	ldi	r30, 0x4E	; 78
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	87 7e       	andi	r24, 0xE7	; 231
    230a:	88 60       	ori	r24, 0x08	; 8
    230c:	80 83       	st	Z, r24
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	87 7f       	andi	r24, 0xF7	; 247
    2316:	80 83       	st	Z, r24
    2318:	ef e4       	ldi	r30, 0x4F	; 79
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	8b 7f       	andi	r24, 0xFB	; 251
    2320:	80 83       	st	Z, r24
    2322:	85 e0       	ldi	r24, 0x05	; 5
    2324:	80 93 d8 01 	sts	0x01D8, r24
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	ee c0       	rjmp	.+476    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    232e:	ef e4       	ldi	r30, 0x4F	; 79
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8c 7f       	andi	r24, 0xFC	; 252
    2336:	82 60       	ori	r24, 0x02	; 2
    2338:	80 83       	st	Z, r24
    233a:	ee e4       	ldi	r30, 0x4E	; 78
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	87 7e       	andi	r24, 0xE7	; 231
    2342:	88 60       	ori	r24, 0x08	; 8
    2344:	80 83       	st	Z, r24
    2346:	ef e4       	ldi	r30, 0x4F	; 79
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	87 7f       	andi	r24, 0xF7	; 247
    234e:	80 83       	st	Z, r24
    2350:	ef e4       	ldi	r30, 0x4F	; 79
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	8b 7f       	andi	r24, 0xFB	; 251
    2358:	80 83       	st	Z, r24
    235a:	86 e0       	ldi	r24, 0x06	; 6
    235c:	80 93 d8 01 	sts	0x01D8, r24
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	d2 c0       	rjmp	.+420    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    2366:	ef e4       	ldi	r30, 0x4F	; 79
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	83 60       	ori	r24, 0x03	; 3
    236e:	80 83       	st	Z, r24
    2370:	ee e4       	ldi	r30, 0x4E	; 78
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	87 7e       	andi	r24, 0xE7	; 231
    2378:	88 60       	ori	r24, 0x08	; 8
    237a:	80 83       	st	Z, r24
    237c:	ef e4       	ldi	r30, 0x4F	; 79
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	87 7f       	andi	r24, 0xF7	; 247
    2384:	80 83       	st	Z, r24
    2386:	ef e4       	ldi	r30, 0x4F	; 79
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8b 7f       	andi	r24, 0xFB	; 251
    238e:	80 83       	st	Z, r24
    2390:	87 e0       	ldi	r24, 0x07	; 7
    2392:	80 93 d8 01 	sts	0x01D8, r24
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	b7 c0       	rjmp	.+366    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    239c:	ef e4       	ldi	r30, 0x4F	; 79
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8c 7f       	andi	r24, 0xFC	; 252
    23a4:	80 83       	st	Z, r24
    23a6:	ee e4       	ldi	r30, 0x4E	; 78
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	87 7e       	andi	r24, 0xE7	; 231
    23ae:	80 61       	ori	r24, 0x10	; 16
    23b0:	80 83       	st	Z, r24
    23b2:	ef e4       	ldi	r30, 0x4F	; 79
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	87 7f       	andi	r24, 0xF7	; 247
    23ba:	80 83       	st	Z, r24
    23bc:	ef e4       	ldi	r30, 0x4F	; 79
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8b 7f       	andi	r24, 0xFB	; 251
    23c4:	80 83       	st	Z, r24
    23c6:	88 e0       	ldi	r24, 0x08	; 8
    23c8:	80 93 d8 01 	sts	0x01D8, r24
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	9c c0       	rjmp	.+312    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    23d2:	ef e4       	ldi	r30, 0x4F	; 79
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8c 7f       	andi	r24, 0xFC	; 252
    23da:	81 60       	ori	r24, 0x01	; 1
    23dc:	80 83       	st	Z, r24
    23de:	ee e4       	ldi	r30, 0x4E	; 78
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	87 7e       	andi	r24, 0xE7	; 231
    23e6:	80 61       	ori	r24, 0x10	; 16
    23e8:	80 83       	st	Z, r24
    23ea:	ef e4       	ldi	r30, 0x4F	; 79
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	87 7f       	andi	r24, 0xF7	; 247
    23f2:	80 83       	st	Z, r24
    23f4:	ef e4       	ldi	r30, 0x4F	; 79
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	8b 7f       	andi	r24, 0xFB	; 251
    23fc:	80 83       	st	Z, r24
    23fe:	89 e0       	ldi	r24, 0x09	; 9
    2400:	80 93 d8 01 	sts	0x01D8, r24
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	80 c0       	rjmp	.+256    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    240a:	ef e4       	ldi	r30, 0x4F	; 79
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8c 7f       	andi	r24, 0xFC	; 252
    2412:	82 60       	ori	r24, 0x02	; 2
    2414:	80 83       	st	Z, r24
    2416:	ee e4       	ldi	r30, 0x4E	; 78
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	87 7e       	andi	r24, 0xE7	; 231
    241e:	80 61       	ori	r24, 0x10	; 16
    2420:	80 83       	st	Z, r24
    2422:	ef e4       	ldi	r30, 0x4F	; 79
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	87 7f       	andi	r24, 0xF7	; 247
    242a:	80 83       	st	Z, r24
    242c:	ef e4       	ldi	r30, 0x4F	; 79
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	8b 7f       	andi	r24, 0xFB	; 251
    2434:	80 83       	st	Z, r24
    2436:	8a e0       	ldi	r24, 0x0A	; 10
    2438:	80 93 d8 01 	sts	0x01D8, r24
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	64 c0       	rjmp	.+200    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    2442:	ef e4       	ldi	r30, 0x4F	; 79
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	83 60       	ori	r24, 0x03	; 3
    244a:	80 83       	st	Z, r24
    244c:	ee e4       	ldi	r30, 0x4E	; 78
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	87 7e       	andi	r24, 0xE7	; 231
    2454:	80 61       	ori	r24, 0x10	; 16
    2456:	80 83       	st	Z, r24
    2458:	ef e4       	ldi	r30, 0x4F	; 79
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	87 7f       	andi	r24, 0xF7	; 247
    2460:	80 83       	st	Z, r24
    2462:	ef e4       	ldi	r30, 0x4F	; 79
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8b 7f       	andi	r24, 0xFB	; 251
    246a:	80 83       	st	Z, r24
    246c:	8b e0       	ldi	r24, 0x0B	; 11
    246e:	80 93 d8 01 	sts	0x01D8, r24
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	49 c0       	rjmp	.+146    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    2478:	ef e4       	ldi	r30, 0x4F	; 79
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	8c 7f       	andi	r24, 0xFC	; 252
    2480:	80 83       	st	Z, r24
    2482:	ee e4       	ldi	r30, 0x4E	; 78
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 61       	ori	r24, 0x18	; 24
    248a:	80 83       	st	Z, r24
    248c:	8c e0       	ldi	r24, 0x0C	; 12
    248e:	80 93 d8 01 	sts	0x01D8, r24
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	39 c0       	rjmp	.+114    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    2498:	19 82       	std	Y+1, r1	; 0x01
    249a:	37 c0       	rjmp	.+110    	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    249c:	ef e4       	ldi	r30, 0x4F	; 79
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	83 60       	ori	r24, 0x03	; 3
    24a4:	80 83       	st	Z, r24
    24a6:	ee e4       	ldi	r30, 0x4E	; 78
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	87 7e       	andi	r24, 0xE7	; 231
    24ae:	80 61       	ori	r24, 0x10	; 16
    24b0:	80 83       	st	Z, r24
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	87 7f       	andi	r24, 0xF7	; 247
    24ba:	80 83       	st	Z, r24
    24bc:	ef e4       	ldi	r30, 0x4F	; 79
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8b 7f       	andi	r24, 0xFB	; 251
    24c4:	80 83       	st	Z, r24
    24c6:	8e e0       	ldi	r24, 0x0E	; 14
    24c8:	80 93 d8 01 	sts	0x01D8, r24
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	1c c0       	rjmp	.+56     	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    24d2:	ef e4       	ldi	r30, 0x4F	; 79
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	8c 7f       	andi	r24, 0xFC	; 252
    24da:	82 60       	ori	r24, 0x02	; 2
    24dc:	80 83       	st	Z, r24
    24de:	ee e4       	ldi	r30, 0x4E	; 78
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	88 61       	ori	r24, 0x18	; 24
    24e6:	80 83       	st	Z, r24
    24e8:	ef e4       	ldi	r30, 0x4F	; 79
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	87 7f       	andi	r24, 0xF7	; 247
    24f0:	80 83       	st	Z, r24
    24f2:	ef e4       	ldi	r30, 0x4F	; 79
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	8b 7f       	andi	r24, 0xFB	; 251
    24fa:	80 83       	st	Z, r24
    24fc:	8f e0       	ldi	r24, 0x0F	; 15
    24fe:	80 93 d8 01 	sts	0x01D8, r24
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	01 c0       	rjmp	.+2      	; 0x250a <MCAL_Timers_TMR1Init+0x422>
    2508:	19 82       	std	Y+1, r1	; 0x01
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <MCAL_Timers_TMR1SetInitValue>:
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <MCAL_Timers_TMR1SetInitValue+0x6>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <MCAL_Timers_TMR1SetInitValue+0x8>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	19 82       	std	Y+1, r1	; 0x01
    252e:	1a 82       	std	Y+2, r1	; 0x02
    2530:	ce 01       	movw	r24, r28
    2532:	02 96       	adiw	r24, 0x02	; 2
    2534:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    253e:	ec e4       	ldi	r30, 0x4C	; 76
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <MCAL_Timers_TMR1CTCModeSetup>:
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	2d 97       	sbiw	r28, 0x0d	; 13
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	6e 83       	std	Y+6, r22	; 0x06
    257c:	4f 83       	std	Y+7, r20	; 0x07
    257e:	19 82       	std	Y+1, r1	; 0x01
    2580:	1a 82       	std	Y+2, r1	; 0x02
    2582:	80 91 d0 01 	lds	r24, 0x01D0
    2586:	84 30       	cpi	r24, 0x04	; 4
    2588:	31 f0       	breq	.+12     	; 0x2596 <MCAL_Timers_TMR1CTCModeSetup+0x32>
    258a:	80 91 d0 01 	lds	r24, 0x01D0
    258e:	8c 30       	cpi	r24, 0x0C	; 12
    2590:	11 f0       	breq	.+4      	; 0x2596 <MCAL_Timers_TMR1CTCModeSetup+0x32>
    2592:	19 82       	std	Y+1, r1	; 0x01
    2594:	dd c0       	rjmp	.+442    	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    2596:	8e 81       	ldd	r24, Y+6	; 0x06
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	3d 87       	std	Y+13, r19	; 0x0d
    259e:	2c 87       	std	Y+12, r18	; 0x0c
    25a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    25a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	39 f0       	breq	.+14     	; 0x25b6 <MCAL_Timers_TMR1CTCModeSetup+0x52>
    25a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    25aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ac:	21 30       	cpi	r18, 0x01	; 1
    25ae:	31 05       	cpc	r19, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <MCAL_Timers_TMR1CTCModeSetup+0x50>
    25b2:	67 c0       	rjmp	.+206    	; 0x2682 <MCAL_Timers_TMR1CTCModeSetup+0x11e>
    25b4:	cc c0       	rjmp	.+408    	; 0x274e <MCAL_Timers_TMR1CTCModeSetup+0x1ea>
    25b6:	ce 01       	movw	r24, r28
    25b8:	02 96       	adiw	r24, 0x02	; 2
    25ba:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    25c4:	ea e4       	ldi	r30, 0x4A	; 74
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    25d8:	8f 81       	ldd	r24, Y+7	; 0x07
    25da:	88 23       	and	r24, r24
    25dc:	79 f0       	breq	.+30     	; 0x25fc <MCAL_Timers_TMR1CTCModeSetup+0x98>
    25de:	8f 81       	ldd	r24, Y+7	; 0x07
    25e0:	84 30       	cpi	r24, 0x04	; 4
    25e2:	60 f4       	brcc	.+24     	; 0x25fc <MCAL_Timers_TMR1CTCModeSetup+0x98>
    25e4:	1b 82       	std	Y+3, r1	; 0x03
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	83 60       	ori	r24, 0x03	; 3
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	83 7e       	andi	r24, 0xE3	; 227
    25f0:	84 61       	ori	r24, 0x14	; 20
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	ce 01       	movw	r24, r28
    25f6:	03 96       	adiw	r24, 0x03	; 3
    25f8:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    25fc:	8f 81       	ldd	r24, Y+7	; 0x07
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	3b 87       	std	Y+11, r19	; 0x0b
    2604:	2a 87       	std	Y+10, r18	; 0x0a
    2606:	8a 85       	ldd	r24, Y+10	; 0x0a
    2608:	9b 85       	ldd	r25, Y+11	; 0x0b
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	91 05       	cpc	r25, r1
    260e:	e9 f0       	breq	.+58     	; 0x264a <MCAL_Timers_TMR1CTCModeSetup+0xe6>
    2610:	2a 85       	ldd	r18, Y+10	; 0x0a
    2612:	3b 85       	ldd	r19, Y+11	; 0x0b
    2614:	22 30       	cpi	r18, 0x02	; 2
    2616:	31 05       	cpc	r19, r1
    2618:	2c f4       	brge	.+10     	; 0x2624 <MCAL_Timers_TMR1CTCModeSetup+0xc0>
    261a:	8a 85       	ldd	r24, Y+10	; 0x0a
    261c:	9b 85       	ldd	r25, Y+11	; 0x0b
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	61 f0       	breq	.+24     	; 0x263a <MCAL_Timers_TMR1CTCModeSetup+0xd6>
    2622:	2d c0       	rjmp	.+90     	; 0x267e <MCAL_Timers_TMR1CTCModeSetup+0x11a>
    2624:	2a 85       	ldd	r18, Y+10	; 0x0a
    2626:	3b 85       	ldd	r19, Y+11	; 0x0b
    2628:	22 30       	cpi	r18, 0x02	; 2
    262a:	31 05       	cpc	r19, r1
    262c:	b9 f0       	breq	.+46     	; 0x265c <MCAL_Timers_TMR1CTCModeSetup+0xf8>
    262e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2630:	9b 85       	ldd	r25, Y+11	; 0x0b
    2632:	83 30       	cpi	r24, 0x03	; 3
    2634:	91 05       	cpc	r25, r1
    2636:	d9 f0       	breq	.+54     	; 0x266e <MCAL_Timers_TMR1CTCModeSetup+0x10a>
    2638:	22 c0       	rjmp	.+68     	; 0x267e <MCAL_Timers_TMR1CTCModeSetup+0x11a>
    263a:	ef e4       	ldi	r30, 0x4F	; 79
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	8f 73       	andi	r24, 0x3F	; 63
    2642:	80 83       	st	Z, r24
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	83 c0       	rjmp	.+262    	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    264a:	ef e4       	ldi	r30, 0x4F	; 79
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	8f 73       	andi	r24, 0x3F	; 63
    2652:	80 64       	ori	r24, 0x40	; 64
    2654:	80 83       	st	Z, r24
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	7a c0       	rjmp	.+244    	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    265c:	ef e4       	ldi	r30, 0x4F	; 79
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	8f 73       	andi	r24, 0x3F	; 63
    2664:	80 68       	ori	r24, 0x80	; 128
    2666:	80 83       	st	Z, r24
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	71 c0       	rjmp	.+226    	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    266e:	ef e4       	ldi	r30, 0x4F	; 79
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	80 6c       	ori	r24, 0xC0	; 192
    2676:	80 83       	st	Z, r24
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	69 c0       	rjmp	.+210    	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    267e:	19 82       	std	Y+1, r1	; 0x01
    2680:	67 c0       	rjmp	.+206    	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    2682:	ce 01       	movw	r24, r28
    2684:	02 96       	adiw	r24, 0x02	; 2
    2686:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2690:	e8 e4       	ldi	r30, 0x48	; 72
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    26a4:	8f 81       	ldd	r24, Y+7	; 0x07
    26a6:	88 23       	and	r24, r24
    26a8:	79 f0       	breq	.+30     	; 0x26c8 <MCAL_Timers_TMR1CTCModeSetup+0x164>
    26aa:	8f 81       	ldd	r24, Y+7	; 0x07
    26ac:	84 30       	cpi	r24, 0x04	; 4
    26ae:	60 f4       	brcc	.+24     	; 0x26c8 <MCAL_Timers_TMR1CTCModeSetup+0x164>
    26b0:	1c 82       	std	Y+4, r1	; 0x04
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	83 60       	ori	r24, 0x03	; 3
    26b6:	8c 83       	std	Y+4, r24	; 0x04
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	83 7e       	andi	r24, 0xE3	; 227
    26bc:	80 61       	ori	r24, 0x10	; 16
    26be:	8c 83       	std	Y+4, r24	; 0x04
    26c0:	ce 01       	movw	r24, r28
    26c2:	04 96       	adiw	r24, 0x04	; 4
    26c4:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    26c8:	8f 81       	ldd	r24, Y+7	; 0x07
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	39 87       	std	Y+9, r19	; 0x09
    26d0:	28 87       	std	Y+8, r18	; 0x08
    26d2:	88 85       	ldd	r24, Y+8	; 0x08
    26d4:	99 85       	ldd	r25, Y+9	; 0x09
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	91 05       	cpc	r25, r1
    26da:	e9 f0       	breq	.+58     	; 0x2716 <MCAL_Timers_TMR1CTCModeSetup+0x1b2>
    26dc:	28 85       	ldd	r18, Y+8	; 0x08
    26de:	39 85       	ldd	r19, Y+9	; 0x09
    26e0:	22 30       	cpi	r18, 0x02	; 2
    26e2:	31 05       	cpc	r19, r1
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <MCAL_Timers_TMR1CTCModeSetup+0x18c>
    26e6:	88 85       	ldd	r24, Y+8	; 0x08
    26e8:	99 85       	ldd	r25, Y+9	; 0x09
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	61 f0       	breq	.+24     	; 0x2706 <MCAL_Timers_TMR1CTCModeSetup+0x1a2>
    26ee:	2d c0       	rjmp	.+90     	; 0x274a <MCAL_Timers_TMR1CTCModeSetup+0x1e6>
    26f0:	28 85       	ldd	r18, Y+8	; 0x08
    26f2:	39 85       	ldd	r19, Y+9	; 0x09
    26f4:	22 30       	cpi	r18, 0x02	; 2
    26f6:	31 05       	cpc	r19, r1
    26f8:	b9 f0       	breq	.+46     	; 0x2728 <MCAL_Timers_TMR1CTCModeSetup+0x1c4>
    26fa:	88 85       	ldd	r24, Y+8	; 0x08
    26fc:	99 85       	ldd	r25, Y+9	; 0x09
    26fe:	83 30       	cpi	r24, 0x03	; 3
    2700:	91 05       	cpc	r25, r1
    2702:	d9 f0       	breq	.+54     	; 0x273a <MCAL_Timers_TMR1CTCModeSetup+0x1d6>
    2704:	22 c0       	rjmp	.+68     	; 0x274a <MCAL_Timers_TMR1CTCModeSetup+0x1e6>
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8f 7c       	andi	r24, 0xCF	; 207
    270e:	80 83       	st	Z, r24
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	1d c0       	rjmp	.+58     	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    2716:	ef e4       	ldi	r30, 0x4F	; 79
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8f 7c       	andi	r24, 0xCF	; 207
    271e:	80 61       	ori	r24, 0x10	; 16
    2720:	80 83       	st	Z, r24
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    2728:	ef e4       	ldi	r30, 0x4F	; 79
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8f 7c       	andi	r24, 0xCF	; 207
    2730:	80 62       	ori	r24, 0x20	; 32
    2732:	80 83       	st	Z, r24
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	0b c0       	rjmp	.+22     	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    273a:	ef e4       	ldi	r30, 0x4F	; 79
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	80 63       	ori	r24, 0x30	; 48
    2742:	80 83       	st	Z, r24
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <MCAL_Timers_TMR1CTCModeSetup+0x1ec>
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	2d 96       	adiw	r28, 0x0d	; 13
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <MCAL_Timers_TMR1FastPWMModeSetup>:
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	2e 97       	sbiw	r28, 0x0e	; 14
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	6f 83       	std	Y+7, r22	; 0x07
    277e:	48 87       	std	Y+8, r20	; 0x08
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	1a 82       	std	Y+2, r1	; 0x02
    2784:	80 91 d0 01 	lds	r24, 0x01D0
    2788:	83 30       	cpi	r24, 0x03	; 3
    278a:	11 f0       	breq	.+4      	; 0x2790 <MCAL_Timers_TMR1FastPWMModeSetup+0x2c>
    278c:	19 82       	std	Y+1, r1	; 0x01
    278e:	5e c1       	rjmp	.+700    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2790:	8f 81       	ldd	r24, Y+7	; 0x07
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	3e 87       	std	Y+14, r19	; 0x0e
    2798:	2d 87       	std	Y+13, r18	; 0x0d
    279a:	8d 85       	ldd	r24, Y+13	; 0x0d
    279c:	9e 85       	ldd	r25, Y+14	; 0x0e
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	91 05       	cpc	r25, r1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <MCAL_Timers_TMR1FastPWMModeSetup+0x42>
    27a4:	a6 c0       	rjmp	.+332    	; 0x28f2 <MCAL_Timers_TMR1FastPWMModeSetup+0x18e>
    27a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    27a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <MCAL_Timers_TMR1FastPWMModeSetup+0x4e>
    27b0:	3b c1       	rjmp	.+630    	; 0x2a28 <MCAL_Timers_TMR1FastPWMModeSetup+0x2c4>
    27b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	09 f0       	breq	.+2      	; 0x27bc <MCAL_Timers_TMR1FastPWMModeSetup+0x58>
    27ba:	47 c1       	rjmp	.+654    	; 0x2a4a <MCAL_Timers_TMR1FastPWMModeSetup+0x2e6>
    27bc:	88 85       	ldd	r24, Y+8	; 0x08
    27be:	88 23       	and	r24, r24
    27c0:	79 f0       	breq	.+30     	; 0x27e0 <MCAL_Timers_TMR1FastPWMModeSetup+0x7c>
    27c2:	88 85       	ldd	r24, Y+8	; 0x08
    27c4:	84 30       	cpi	r24, 0x04	; 4
    27c6:	60 f4       	brcc	.+24     	; 0x27e0 <MCAL_Timers_TMR1FastPWMModeSetup+0x7c>
    27c8:	1b 82       	std	Y+3, r1	; 0x03
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	83 60       	ori	r24, 0x03	; 3
    27ce:	8b 83       	std	Y+3, r24	; 0x03
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	83 7e       	andi	r24, 0xE3	; 227
    27d4:	84 61       	ori	r24, 0x14	; 20
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	ce 01       	movw	r24, r28
    27da:	03 96       	adiw	r24, 0x03	; 3
    27dc:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    27e0:	88 85       	ldd	r24, Y+8	; 0x08
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	3c 87       	std	Y+12, r19	; 0x0c
    27e8:	2b 87       	std	Y+11, r18	; 0x0b
    27ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	91 05       	cpc	r25, r1
    27f2:	f1 f0       	breq	.+60     	; 0x2830 <MCAL_Timers_TMR1FastPWMModeSetup+0xcc>
    27f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    27f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    27f8:	22 30       	cpi	r18, 0x02	; 2
    27fa:	31 05       	cpc	r19, r1
    27fc:	2c f4       	brge	.+10     	; 0x2808 <MCAL_Timers_TMR1FastPWMModeSetup+0xa4>
    27fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2800:	9c 85       	ldd	r25, Y+12	; 0x0c
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f0       	breq	.+26     	; 0x2820 <MCAL_Timers_TMR1FastPWMModeSetup+0xbc>
    2806:	73 c0       	rjmp	.+230    	; 0x28ee <MCAL_Timers_TMR1FastPWMModeSetup+0x18a>
    2808:	2b 85       	ldd	r18, Y+11	; 0x0b
    280a:	3c 85       	ldd	r19, Y+12	; 0x0c
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 05       	cpc	r19, r1
    2810:	41 f1       	breq	.+80     	; 0x2862 <MCAL_Timers_TMR1FastPWMModeSetup+0xfe>
    2812:	8b 85       	ldd	r24, Y+11	; 0x0b
    2814:	9c 85       	ldd	r25, Y+12	; 0x0c
    2816:	83 30       	cpi	r24, 0x03	; 3
    2818:	91 05       	cpc	r25, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <MCAL_Timers_TMR1FastPWMModeSetup+0xba>
    281c:	44 c0       	rjmp	.+136    	; 0x28a6 <MCAL_Timers_TMR1FastPWMModeSetup+0x142>
    281e:	67 c0       	rjmp	.+206    	; 0x28ee <MCAL_Timers_TMR1FastPWMModeSetup+0x18a>
    2820:	ef e4       	ldi	r30, 0x4F	; 79
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	8f 73       	andi	r24, 0x3F	; 63
    2828:	80 83       	st	Z, r24
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	0e c1       	rjmp	.+540    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2830:	ce 01       	movw	r24, r28
    2832:	02 96       	adiw	r24, 0x02	; 2
    2834:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    283e:	ea e4       	ldi	r30, 0x4A	; 74
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2850:	ef e4       	ldi	r30, 0x4F	; 79
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	8f 73       	andi	r24, 0x3F	; 63
    2858:	80 64       	ori	r24, 0x40	; 64
    285a:	80 83       	st	Z, r24
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	f5 c0       	rjmp	.+490    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2862:	ce 01       	movw	r24, r28
    2864:	02 96       	adiw	r24, 0x02	; 2
    2866:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2870:	ea e4       	ldi	r30, 0x4A	; 74
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	24 e6       	ldi	r18, 0x64	; 100
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	b9 01       	movw	r22, r18
    287e:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    2882:	cb 01       	movw	r24, r22
    2884:	98 2f       	mov	r25, r24
    2886:	88 27       	eor	r24, r24
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2894:	ef e4       	ldi	r30, 0x4F	; 79
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8f 73       	andi	r24, 0x3F	; 63
    289c:	80 68       	ori	r24, 0x80	; 128
    289e:	80 83       	st	Z, r24
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	d3 c0       	rjmp	.+422    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    28a6:	ce 01       	movw	r24, r28
    28a8:	02 96       	adiw	r24, 0x02	; 2
    28aa:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    28b4:	ea e4       	ldi	r30, 0x4A	; 74
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	24 e6       	ldi	r18, 0x64	; 100
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	b9 01       	movw	r22, r18
    28c2:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    28c6:	cb 01       	movw	r24, r22
    28c8:	38 2f       	mov	r19, r24
    28ca:	22 27       	eor	r18, r18
    28cc:	8f ef       	ldi	r24, 0xFF	; 255
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	82 1b       	sub	r24, r18
    28d2:	93 0b       	sbc	r25, r19
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    28de:	ef e4       	ldi	r30, 0x4F	; 79
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	80 6c       	ori	r24, 0xC0	; 192
    28e6:	80 83       	st	Z, r24
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	af c0       	rjmp	.+350    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    28ee:	19 82       	std	Y+1, r1	; 0x01
    28f0:	ad c0       	rjmp	.+346    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    28f2:	88 85       	ldd	r24, Y+8	; 0x08
    28f4:	88 23       	and	r24, r24
    28f6:	79 f0       	breq	.+30     	; 0x2916 <MCAL_Timers_TMR1FastPWMModeSetup+0x1b2>
    28f8:	88 85       	ldd	r24, Y+8	; 0x08
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	60 f4       	brcc	.+24     	; 0x2916 <MCAL_Timers_TMR1FastPWMModeSetup+0x1b2>
    28fe:	1c 82       	std	Y+4, r1	; 0x04
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
    2902:	83 60       	ori	r24, 0x03	; 3
    2904:	8c 83       	std	Y+4, r24	; 0x04
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	83 7e       	andi	r24, 0xE3	; 227
    290a:	80 61       	ori	r24, 0x10	; 16
    290c:	8c 83       	std	Y+4, r24	; 0x04
    290e:	ce 01       	movw	r24, r28
    2910:	04 96       	adiw	r24, 0x04	; 4
    2912:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    2916:	88 85       	ldd	r24, Y+8	; 0x08
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	3a 87       	std	Y+10, r19	; 0x0a
    291e:	29 87       	std	Y+9, r18	; 0x09
    2920:	89 85       	ldd	r24, Y+9	; 0x09
    2922:	9a 85       	ldd	r25, Y+10	; 0x0a
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	91 05       	cpc	r25, r1
    2928:	f1 f0       	breq	.+60     	; 0x2966 <MCAL_Timers_TMR1FastPWMModeSetup+0x202>
    292a:	29 85       	ldd	r18, Y+9	; 0x09
    292c:	3a 85       	ldd	r19, Y+10	; 0x0a
    292e:	22 30       	cpi	r18, 0x02	; 2
    2930:	31 05       	cpc	r19, r1
    2932:	2c f4       	brge	.+10     	; 0x293e <MCAL_Timers_TMR1FastPWMModeSetup+0x1da>
    2934:	89 85       	ldd	r24, Y+9	; 0x09
    2936:	9a 85       	ldd	r25, Y+10	; 0x0a
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f0       	breq	.+26     	; 0x2956 <MCAL_Timers_TMR1FastPWMModeSetup+0x1f2>
    293c:	73 c0       	rjmp	.+230    	; 0x2a24 <MCAL_Timers_TMR1FastPWMModeSetup+0x2c0>
    293e:	29 85       	ldd	r18, Y+9	; 0x09
    2940:	3a 85       	ldd	r19, Y+10	; 0x0a
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	41 f1       	breq	.+80     	; 0x2998 <MCAL_Timers_TMR1FastPWMModeSetup+0x234>
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	83 30       	cpi	r24, 0x03	; 3
    294e:	91 05       	cpc	r25, r1
    2950:	09 f4       	brne	.+2      	; 0x2954 <MCAL_Timers_TMR1FastPWMModeSetup+0x1f0>
    2952:	44 c0       	rjmp	.+136    	; 0x29dc <MCAL_Timers_TMR1FastPWMModeSetup+0x278>
    2954:	67 c0       	rjmp	.+206    	; 0x2a24 <MCAL_Timers_TMR1FastPWMModeSetup+0x2c0>
    2956:	ef e4       	ldi	r30, 0x4F	; 79
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	8f 7c       	andi	r24, 0xCF	; 207
    295e:	80 83       	st	Z, r24
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	73 c0       	rjmp	.+230    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2966:	ce 01       	movw	r24, r28
    2968:	02 96       	adiw	r24, 0x02	; 2
    296a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2974:	e8 e4       	ldi	r30, 0x48	; 72
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2986:	ef e4       	ldi	r30, 0x4F	; 79
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	8f 7c       	andi	r24, 0xCF	; 207
    298e:	80 61       	ori	r24, 0x10	; 16
    2990:	80 83       	st	Z, r24
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	5a c0       	rjmp	.+180    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2998:	ce 01       	movw	r24, r28
    299a:	02 96       	adiw	r24, 0x02	; 2
    299c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    29a6:	e8 e4       	ldi	r30, 0x48	; 72
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	24 e6       	ldi	r18, 0x64	; 100
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	b9 01       	movw	r22, r18
    29b4:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    29b8:	cb 01       	movw	r24, r22
    29ba:	98 2f       	mov	r25, r24
    29bc:	88 27       	eor	r24, r24
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    29ca:	ef e4       	ldi	r30, 0x4F	; 79
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	8f 7c       	andi	r24, 0xCF	; 207
    29d2:	80 62       	ori	r24, 0x20	; 32
    29d4:	80 83       	st	Z, r24
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	38 c0       	rjmp	.+112    	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    29dc:	ce 01       	movw	r24, r28
    29de:	02 96       	adiw	r24, 0x02	; 2
    29e0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    29ea:	e8 e4       	ldi	r30, 0x48	; 72
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	24 e6       	ldi	r18, 0x64	; 100
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	b9 01       	movw	r22, r18
    29f8:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    29fc:	cb 01       	movw	r24, r22
    29fe:	38 2f       	mov	r19, r24
    2a00:	22 27       	eor	r18, r18
    2a02:	8f ef       	ldi	r24, 0xFF	; 255
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	82 1b       	sub	r24, r18
    2a08:	93 0b       	sbc	r25, r19
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	80 83       	st	Z, r24
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2a14:	ef e4       	ldi	r30, 0x4F	; 79
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	80 63       	ori	r24, 0x30	; 48
    2a1c:	80 83       	st	Z, r24
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	14 c0       	rjmp	.+40     	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2a24:	19 82       	std	Y+1, r1	; 0x01
    2a26:	12 c0       	rjmp	.+36     	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2a28:	ce 01       	movw	r24, r28
    2a2a:	02 96       	adiw	r24, 0x02	; 2
    2a2c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2a36:	e6 e4       	ldi	r30, 0x46	; 70
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <MCAL_Timers_TMR1FastPWMModeSetup+0x2e8>
    2a4a:	19 82       	std	Y+1, r1	; 0x01
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	2e 96       	adiw	r28, 0x0e	; 14
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup>:
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	2e 97       	sbiw	r28, 0x0e	; 14
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
    2a78:	6f 83       	std	Y+7, r22	; 0x07
    2a7a:	48 87       	std	Y+8, r20	; 0x08
    2a7c:	19 82       	std	Y+1, r1	; 0x01
    2a7e:	1a 82       	std	Y+2, r1	; 0x02
    2a80:	80 91 d0 01 	lds	r24, 0x01D0
    2a84:	83 30       	cpi	r24, 0x03	; 3
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x2c>
    2a88:	19 82       	std	Y+1, r1	; 0x01
    2a8a:	91 c1       	rjmp	.+802    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	3e 87       	std	Y+14, r19	; 0x0e
    2a94:	2d 87       	std	Y+13, r18	; 0x0d
    2a96:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a98:	5e 85       	ldd	r21, Y+14	; 0x0e
    2a9a:	41 30       	cpi	r20, 0x01	; 1
    2a9c:	51 05       	cpc	r21, r1
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x42>
    2aa0:	c0 c0       	rjmp	.+384    	; 0x2c22 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x1c2>
    2aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa6:	82 30       	cpi	r24, 0x02	; 2
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x4e>
    2aac:	6e c1       	rjmp	.+732    	; 0x2d8a <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x32a>
    2aae:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ab0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ab2:	21 15       	cp	r18, r1
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x5a>
    2ab8:	79 c1       	rjmp	.+754    	; 0x2dac <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34c>
    2aba:	88 85       	ldd	r24, Y+8	; 0x08
    2abc:	88 23       	and	r24, r24
    2abe:	79 f0       	breq	.+30     	; 0x2ade <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x7e>
    2ac0:	88 85       	ldd	r24, Y+8	; 0x08
    2ac2:	84 30       	cpi	r24, 0x04	; 4
    2ac4:	60 f4       	brcc	.+24     	; 0x2ade <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x7e>
    2ac6:	1b 82       	std	Y+3, r1	; 0x03
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	83 60       	ori	r24, 0x03	; 3
    2acc:	8b 83       	std	Y+3, r24	; 0x03
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	83 7e       	andi	r24, 0xE3	; 227
    2ad2:	84 61       	ori	r24, 0x14	; 20
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	03 96       	adiw	r24, 0x03	; 3
    2ada:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    2ade:	88 85       	ldd	r24, Y+8	; 0x08
    2ae0:	48 2f       	mov	r20, r24
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	5c 87       	std	Y+12, r21	; 0x0c
    2ae6:	4b 87       	std	Y+11, r20	; 0x0b
    2ae8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aea:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	91 05       	cpc	r25, r1
    2af0:	f9 f0       	breq	.+62     	; 0x2b30 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0xd0>
    2af2:	2b 85       	ldd	r18, Y+11	; 0x0b
    2af4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2af6:	22 30       	cpi	r18, 0x02	; 2
    2af8:	31 05       	cpc	r19, r1
    2afa:	34 f4       	brge	.+12     	; 0x2b08 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0xa8>
    2afc:	4b 85       	ldd	r20, Y+11	; 0x0b
    2afe:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b00:	41 15       	cp	r20, r1
    2b02:	51 05       	cpc	r21, r1
    2b04:	69 f0       	breq	.+26     	; 0x2b20 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0xc0>
    2b06:	8b c0       	rjmp	.+278    	; 0x2c1e <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x1be>
    2b08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	91 05       	cpc	r25, r1
    2b10:	41 f1       	breq	.+80     	; 0x2b62 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x102>
    2b12:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b14:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b16:	23 30       	cpi	r18, 0x03	; 3
    2b18:	31 05       	cpc	r19, r1
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0xbe>
    2b1c:	4f c0       	rjmp	.+158    	; 0x2bbc <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x15c>
    2b1e:	7f c0       	rjmp	.+254    	; 0x2c1e <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x1be>
    2b20:	ef e4       	ldi	r30, 0x4F	; 79
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	8f 73       	andi	r24, 0x3F	; 63
    2b28:	80 83       	st	Z, r24
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	3f c1       	rjmp	.+638    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2b30:	ce 01       	movw	r24, r28
    2b32:	02 96       	adiw	r24, 0x02	; 2
    2b34:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2b3e:	ea e4       	ldi	r30, 0x4A	; 74
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	9e 81       	ldd	r25, Y+6	; 0x06
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2b50:	ef e4       	ldi	r30, 0x4F	; 79
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	8f 73       	andi	r24, 0x3F	; 63
    2b58:	80 64       	ori	r24, 0x40	; 64
    2b5a:	80 83       	st	Z, r24
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	26 c1       	rjmp	.+588    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2b62:	ce 01       	movw	r24, r28
    2b64:	02 96       	adiw	r24, 0x02	; 2
    2b66:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2b70:	ea e4       	ldi	r30, 0x4A	; 74
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	24 e6       	ldi	r18, 0x64	; 100
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	b9 01       	movw	r22, r18
    2b7e:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    2b82:	cb 01       	movw	r24, r22
    2b84:	9c 01       	movw	r18, r24
    2b86:	8f ef       	ldi	r24, 0xFF	; 255
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	ac 01       	movw	r20, r24
    2b8c:	24 9f       	mul	r18, r20
    2b8e:	c0 01       	movw	r24, r0
    2b90:	25 9f       	mul	r18, r21
    2b92:	90 0d       	add	r25, r0
    2b94:	34 9f       	mul	r19, r20
    2b96:	90 0d       	add	r25, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	96 95       	lsr	r25
    2b9e:	87 95       	ror	r24
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2baa:	ef e4       	ldi	r30, 0x4F	; 79
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	8f 73       	andi	r24, 0x3F	; 63
    2bb2:	80 68       	ori	r24, 0x80	; 128
    2bb4:	80 83       	st	Z, r24
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	f9 c0       	rjmp	.+498    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	02 96       	adiw	r24, 0x02	; 2
    2bc0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2bca:	ea e4       	ldi	r30, 0x4A	; 74
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	24 e6       	ldi	r18, 0x64	; 100
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	b9 01       	movw	r22, r18
    2bd8:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 01       	movw	r18, r24
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	ac 01       	movw	r20, r24
    2be6:	24 9f       	mul	r18, r20
    2be8:	c0 01       	movw	r24, r0
    2bea:	25 9f       	mul	r18, r21
    2bec:	90 0d       	add	r25, r0
    2bee:	34 9f       	mul	r19, r20
    2bf0:	90 0d       	add	r25, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9c 01       	movw	r18, r24
    2bf8:	36 95       	lsr	r19
    2bfa:	27 95       	ror	r18
    2bfc:	8f ef       	ldi	r24, 0xFF	; 255
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	82 1b       	sub	r24, r18
    2c02:	93 0b       	sbc	r25, r19
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2c0e:	ef e4       	ldi	r30, 0x4F	; 79
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	80 6c       	ori	r24, 0xC0	; 192
    2c16:	80 83       	st	Z, r24
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	c8 c0       	rjmp	.+400    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2c1e:	19 82       	std	Y+1, r1	; 0x01
    2c20:	c6 c0       	rjmp	.+396    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2c22:	88 85       	ldd	r24, Y+8	; 0x08
    2c24:	88 23       	and	r24, r24
    2c26:	79 f0       	breq	.+30     	; 0x2c46 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x1e6>
    2c28:	88 85       	ldd	r24, Y+8	; 0x08
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	60 f4       	brcc	.+24     	; 0x2c46 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x1e6>
    2c2e:	1c 82       	std	Y+4, r1	; 0x04
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	83 60       	ori	r24, 0x03	; 3
    2c34:	8c 83       	std	Y+4, r24	; 0x04
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	83 7e       	andi	r24, 0xE3	; 227
    2c3a:	80 61       	ori	r24, 0x10	; 16
    2c3c:	8c 83       	std	Y+4, r24	; 0x04
    2c3e:	ce 01       	movw	r24, r28
    2c40:	04 96       	adiw	r24, 0x04	; 4
    2c42:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    2c46:	88 85       	ldd	r24, Y+8	; 0x08
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	3a 87       	std	Y+10, r19	; 0x0a
    2c4e:	29 87       	std	Y+9, r18	; 0x09
    2c50:	49 85       	ldd	r20, Y+9	; 0x09
    2c52:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c54:	41 30       	cpi	r20, 0x01	; 1
    2c56:	51 05       	cpc	r21, r1
    2c58:	f9 f0       	breq	.+62     	; 0x2c98 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x238>
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	91 05       	cpc	r25, r1
    2c62:	34 f4       	brge	.+12     	; 0x2c70 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x210>
    2c64:	29 85       	ldd	r18, Y+9	; 0x09
    2c66:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c68:	21 15       	cp	r18, r1
    2c6a:	31 05       	cpc	r19, r1
    2c6c:	69 f0       	breq	.+26     	; 0x2c88 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x228>
    2c6e:	8b c0       	rjmp	.+278    	; 0x2d86 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x326>
    2c70:	49 85       	ldd	r20, Y+9	; 0x09
    2c72:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c74:	42 30       	cpi	r20, 0x02	; 2
    2c76:	51 05       	cpc	r21, r1
    2c78:	41 f1       	breq	.+80     	; 0x2cca <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x26a>
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	83 30       	cpi	r24, 0x03	; 3
    2c80:	91 05       	cpc	r25, r1
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x226>
    2c84:	4f c0       	rjmp	.+158    	; 0x2d24 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x2c4>
    2c86:	7f c0       	rjmp	.+254    	; 0x2d86 <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x326>
    2c88:	ef e4       	ldi	r30, 0x4F	; 79
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	8f 7c       	andi	r24, 0xCF	; 207
    2c90:	80 83       	st	Z, r24
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	8b c0       	rjmp	.+278    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2c98:	ce 01       	movw	r24, r28
    2c9a:	02 96       	adiw	r24, 0x02	; 2
    2c9c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2ca6:	e8 e4       	ldi	r30, 0x48	; 72
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2cb8:	ef e4       	ldi	r30, 0x4F	; 79
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8f 7c       	andi	r24, 0xCF	; 207
    2cc0:	80 61       	ori	r24, 0x10	; 16
    2cc2:	80 83       	st	Z, r24
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	72 c0       	rjmp	.+228    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2cca:	ce 01       	movw	r24, r28
    2ccc:	02 96       	adiw	r24, 0x02	; 2
    2cce:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2cd8:	e8 e4       	ldi	r30, 0x48	; 72
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	24 e6       	ldi	r18, 0x64	; 100
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	b9 01       	movw	r22, r18
    2ce6:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 01       	movw	r18, r24
    2cee:	8f ef       	ldi	r24, 0xFF	; 255
    2cf0:	91 e0       	ldi	r25, 0x01	; 1
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	24 9f       	mul	r18, r20
    2cf6:	c0 01       	movw	r24, r0
    2cf8:	25 9f       	mul	r18, r21
    2cfa:	90 0d       	add	r25, r0
    2cfc:	34 9f       	mul	r19, r20
    2cfe:	90 0d       	add	r25, r0
    2d00:	11 24       	eor	r1, r1
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	96 95       	lsr	r25
    2d06:	87 95       	ror	r24
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2d12:	ef e4       	ldi	r30, 0x4F	; 79
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8f 7c       	andi	r24, 0xCF	; 207
    2d1a:	80 62       	ori	r24, 0x20	; 32
    2d1c:	80 83       	st	Z, r24
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	45 c0       	rjmp	.+138    	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2d24:	ce 01       	movw	r24, r28
    2d26:	02 96       	adiw	r24, 0x02	; 2
    2d28:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2d32:	e8 e4       	ldi	r30, 0x48	; 72
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	24 e6       	ldi	r18, 0x64	; 100
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	b9 01       	movw	r22, r18
    2d40:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    2d44:	cb 01       	movw	r24, r22
    2d46:	9c 01       	movw	r18, r24
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	ac 01       	movw	r20, r24
    2d4e:	24 9f       	mul	r18, r20
    2d50:	c0 01       	movw	r24, r0
    2d52:	25 9f       	mul	r18, r21
    2d54:	90 0d       	add	r25, r0
    2d56:	34 9f       	mul	r19, r20
    2d58:	90 0d       	add	r25, r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9c 01       	movw	r18, r24
    2d60:	36 95       	lsr	r19
    2d62:	27 95       	ror	r18
    2d64:	8f ef       	ldi	r24, 0xFF	; 255
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	82 1b       	sub	r24, r18
    2d6a:	93 0b       	sbc	r25, r19
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2d76:	ef e4       	ldi	r30, 0x4F	; 79
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	80 63       	ori	r24, 0x30	; 48
    2d7e:	80 83       	st	Z, r24
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2d86:	19 82       	std	Y+1, r1	; 0x01
    2d88:	12 c0       	rjmp	.+36     	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	02 96       	adiw	r24, 0x02	; 2
    2d8e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MCAL_GlobalINTStatusRead>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2d98:	e6 e4       	ldi	r30, 0x46	; 70
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	80 83       	st	Z, r24
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <MCAL_GlobalINTStatusWrite>
    2daa:	01 c0       	rjmp	.+2      	; 0x2dae <MCAL_Timers_TMR1PhaseCorrectPWMModeSetup+0x34e>
    2dac:	19 82       	std	Y+1, r1	; 0x01
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	2e 96       	adiw	r28, 0x0e	; 14
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <MCAL_Timers_TMR1InputCaptureSetup>:
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <MCAL_Timers_TMR1InputCaptureSetup+0x6>
    2dc8:	0f 92       	push	r0
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	6b 83       	std	Y+3, r22	; 0x03
    2dd2:	19 82       	std	Y+1, r1	; 0x01
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	88 23       	and	r24, r24
    2dd8:	19 f0       	breq	.+6      	; 0x2de0 <MCAL_Timers_TMR1InputCaptureSetup+0x1e>
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	79 f4       	brne	.+30     	; 0x2dfe <MCAL_Timers_TMR1InputCaptureSetup+0x3c>
    2de0:	ee e4       	ldi	r30, 0x4E	; 78
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	81 70       	andi	r24, 0x01	; 1
    2de8:	81 70       	andi	r24, 0x01	; 1
    2dea:	98 2f       	mov	r25, r24
    2dec:	92 95       	swap	r25
    2dee:	99 0f       	add	r25, r25
    2df0:	99 0f       	add	r25, r25
    2df2:	90 7c       	andi	r25, 0xC0	; 192
    2df4:	80 81       	ld	r24, Z
    2df6:	8f 7b       	andi	r24, 0xBF	; 191
    2df8:	89 2b       	or	r24, r25
    2dfa:	80 83       	st	Z, r24
    2dfc:	01 c0       	rjmp	.+2      	; 0x2e00 <MCAL_Timers_TMR1InputCaptureSetup+0x3e>
    2dfe:	19 82       	std	Y+1, r1	; 0x01
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	88 23       	and	r24, r24
    2e04:	19 f0       	breq	.+6      	; 0x2e0c <MCAL_Timers_TMR1InputCaptureSetup+0x4a>
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	69 f4       	brne	.+26     	; 0x2e26 <MCAL_Timers_TMR1InputCaptureSetup+0x64>
    2e0c:	ee e4       	ldi	r30, 0x4E	; 78
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	81 70       	andi	r24, 0x01	; 1
    2e14:	98 2f       	mov	r25, r24
    2e16:	97 95       	ror	r25
    2e18:	99 27       	eor	r25, r25
    2e1a:	97 95       	ror	r25
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8f 77       	andi	r24, 0x7F	; 127
    2e20:	89 2b       	or	r24, r25
    2e22:	80 83       	st	Z, r24
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <MCAL_Timers_TMR1InputCaptureSetup+0x66>
    2e26:	19 82       	std	Y+1, r1	; 0x01
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <MCAL_Timers_TMR1Start>:
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <MCAL_Timers_TMR1Start+0x6>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	8a 83       	std	Y+2, r24	; 0x02
    2e46:	19 82       	std	Y+1, r1	; 0x01
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	88 23       	and	r24, r24
    2e4c:	11 f4       	brne	.+4      	; 0x2e52 <MCAL_Timers_TMR1Start+0x18>
    2e4e:	19 82       	std	Y+1, r1	; 0x01
    2e50:	0c c0       	rjmp	.+24     	; 0x2e6a <MCAL_Timers_TMR1Start+0x30>
    2e52:	ee e4       	ldi	r30, 0x4E	; 78
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	87 70       	andi	r24, 0x07	; 7
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	97 70       	andi	r25, 0x07	; 7
    2e5e:	80 81       	ld	r24, Z
    2e60:	88 7f       	andi	r24, 0xF8	; 248
    2e62:	89 2b       	or	r24, r25
    2e64:	80 83       	st	Z, r24
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <MCAL_Timers_TMR1Stop>:
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	0f 92       	push	r0
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	19 82       	std	Y+1, r1	; 0x01
    2e82:	ee e4       	ldi	r30, 0x4E	; 78
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	88 7f       	andi	r24, 0xF8	; 248
    2e8a:	80 83       	st	Z, r24
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	0f 90       	pop	r0
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <MCAL_Timers_TMR1ForceCompareMatch>:
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <MCAL_Timers_TMR1ForceCompareMatch+0x6>
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <MCAL_Timers_TMR1ForceCompareMatch+0x8>
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	19 82       	std	Y+1, r1	; 0x01
    2eaa:	80 91 d8 01 	lds	r24, 0x01D8
    2eae:	88 23       	and	r24, r24
    2eb0:	41 f0       	breq	.+16     	; 0x2ec2 <MCAL_Timers_TMR1ForceCompareMatch+0x28>
    2eb2:	80 91 d8 01 	lds	r24, 0x01D8
    2eb6:	84 30       	cpi	r24, 0x04	; 4
    2eb8:	21 f0       	breq	.+8      	; 0x2ec2 <MCAL_Timers_TMR1ForceCompareMatch+0x28>
    2eba:	80 91 d8 01 	lds	r24, 0x01D8
    2ebe:	8c 30       	cpi	r24, 0x0C	; 12
    2ec0:	09 f5       	brne	.+66     	; 0x2f04 <MCAL_Timers_TMR1ForceCompareMatch+0x6a>
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	3c 83       	std	Y+4, r19	; 0x04
    2eca:	2b 83       	std	Y+3, r18	; 0x03
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	31 f0       	breq	.+12     	; 0x2ee0 <MCAL_Timers_TMR1ForceCompareMatch+0x46>
    2ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed8:	21 30       	cpi	r18, 0x01	; 1
    2eda:	31 05       	cpc	r19, r1
    2edc:	49 f0       	breq	.+18     	; 0x2ef0 <MCAL_Timers_TMR1ForceCompareMatch+0x56>
    2ede:	10 c0       	rjmp	.+32     	; 0x2f00 <MCAL_Timers_TMR1ForceCompareMatch+0x66>
    2ee0:	ef e4       	ldi	r30, 0x4F	; 79
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 60       	ori	r24, 0x08	; 8
    2ee8:	80 83       	st	Z, r24
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	0b c0       	rjmp	.+22     	; 0x2f06 <MCAL_Timers_TMR1ForceCompareMatch+0x6c>
    2ef0:	ef e4       	ldi	r30, 0x4F	; 79
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	84 60       	ori	r24, 0x04	; 4
    2ef8:	80 83       	st	Z, r24
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <MCAL_Timers_TMR1ForceCompareMatch+0x6c>
    2f00:	19 82       	std	Y+1, r1	; 0x01
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <MCAL_Timers_TMR1ForceCompareMatch+0x6c>
    2f04:	19 82       	std	Y+1, r1	; 0x01
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	08 95       	ret

00002f16 <MCAL_Timers_TMR1OverflowInterruptStatus>:
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <MCAL_Timers_TMR1OverflowInterruptStatus+0x6>
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	8a 83       	std	Y+2, r24	; 0x02
    2f22:	19 82       	std	Y+1, r1	; 0x01
    2f24:	e9 e5       	ldi	r30, 0x59	; 89
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	81 70       	andi	r24, 0x01	; 1
    2f2c:	81 70       	andi	r24, 0x01	; 1
    2f2e:	98 2f       	mov	r25, r24
    2f30:	99 0f       	add	r25, r25
    2f32:	99 0f       	add	r25, r25
    2f34:	80 81       	ld	r24, Z
    2f36:	8b 7f       	andi	r24, 0xFB	; 251
    2f38:	89 2b       	or	r24, r25
    2f3a:	80 83       	st	Z, r24
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <MCAL_Timers_TMR1ReadOverflowInterruptFlag>:
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <MCAL_Timers_TMR1ReadOverflowInterruptFlag+0x6>
    2f52:	0f 92       	push	r0
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	9b 83       	std	Y+3, r25	; 0x03
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	19 82       	std	Y+1, r1	; 0x01
    2f5e:	e8 e5       	ldi	r30, 0x58	; 88
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	86 95       	lsr	r24
    2f66:	86 95       	lsr	r24
    2f68:	81 70       	andi	r24, 0x01	; 1
    2f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6e:	80 83       	st	Z, r24
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <MCAL_Timers_TMR1ClearOverflowInterruptFlag>:
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	0f 92       	push	r0
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	19 82       	std	Y+1, r1	; 0x01
    2f8e:	e8 e5       	ldi	r30, 0x58	; 88
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	84 60       	ori	r24, 0x04	; 4
    2f96:	80 83       	st	Z, r24
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <MCAL_Timers_TMR1CompareMatchInterruptStatus>:
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x6>
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x8>
    2fae:	0f 92       	push	r0
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	8a 83       	std	Y+2, r24	; 0x02
    2fb6:	6b 83       	std	Y+3, r22	; 0x03
    2fb8:	19 82       	std	Y+1, r1	; 0x01
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	3d 83       	std	Y+5, r19	; 0x05
    2fc2:	2c 83       	std	Y+4, r18	; 0x04
    2fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc8:	81 30       	cpi	r24, 0x01	; 1
    2fca:	91 05       	cpc	r25, r1
    2fcc:	c1 f0       	breq	.+48     	; 0x2ffe <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x58>
    2fce:	2c 81       	ldd	r18, Y+4	; 0x04
    2fd0:	3d 81       	ldd	r19, Y+5	; 0x05
    2fd2:	22 30       	cpi	r18, 0x02	; 2
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	19 f1       	breq	.+70     	; 0x301e <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x78>
    2fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fda:	9d 81       	ldd	r25, Y+5	; 0x05
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	79 f5       	brne	.+94     	; 0x303e <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x98>
    2fe0:	e9 e5       	ldi	r30, 0x59	; 89
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	81 70       	andi	r24, 0x01	; 1
    2fe8:	81 70       	andi	r24, 0x01	; 1
    2fea:	98 2f       	mov	r25, r24
    2fec:	92 95       	swap	r25
    2fee:	90 7f       	andi	r25, 0xF0	; 240
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8f 7e       	andi	r24, 0xEF	; 239
    2ff4:	89 2b       	or	r24, r25
    2ff6:	80 83       	st	Z, r24
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	21 c0       	rjmp	.+66     	; 0x3040 <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x9a>
    2ffe:	e9 e5       	ldi	r30, 0x59	; 89
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	81 70       	andi	r24, 0x01	; 1
    3006:	81 70       	andi	r24, 0x01	; 1
    3008:	98 2f       	mov	r25, r24
    300a:	99 0f       	add	r25, r25
    300c:	99 0f       	add	r25, r25
    300e:	99 0f       	add	r25, r25
    3010:	80 81       	ld	r24, Z
    3012:	87 7f       	andi	r24, 0xF7	; 247
    3014:	89 2b       	or	r24, r25
    3016:	80 83       	st	Z, r24
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	11 c0       	rjmp	.+34     	; 0x3040 <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x9a>
    301e:	e9 e5       	ldi	r30, 0x59	; 89
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	81 70       	andi	r24, 0x01	; 1
    3026:	81 70       	andi	r24, 0x01	; 1
    3028:	98 2f       	mov	r25, r24
    302a:	92 95       	swap	r25
    302c:	99 0f       	add	r25, r25
    302e:	90 7e       	andi	r25, 0xE0	; 224
    3030:	80 81       	ld	r24, Z
    3032:	8f 7d       	andi	r24, 0xDF	; 223
    3034:	89 2b       	or	r24, r25
    3036:	80 83       	st	Z, r24
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <MCAL_Timers_TMR1CompareMatchInterruptStatus+0x9a>
    303e:	19 82       	std	Y+1, r1	; 0x01
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag>:
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	00 d0       	rcall	.+0      	; 0x3058 <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x6>
    3058:	00 d0       	rcall	.+0      	; 0x305a <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x8>
    305a:	00 d0       	rcall	.+0      	; 0x305c <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0xa>
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	8a 83       	std	Y+2, r24	; 0x02
    3062:	7c 83       	std	Y+4, r23	; 0x04
    3064:	6b 83       	std	Y+3, r22	; 0x03
    3066:	19 82       	std	Y+1, r1	; 0x01
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	3e 83       	std	Y+6, r19	; 0x06
    3070:	2d 83       	std	Y+5, r18	; 0x05
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	a9 f0       	breq	.+42     	; 0x30a6 <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x54>
    307c:	2d 81       	ldd	r18, Y+5	; 0x05
    307e:	3e 81       	ldd	r19, Y+6	; 0x06
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	e9 f0       	breq	.+58     	; 0x30c0 <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x6e>
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	31 f5       	brne	.+76     	; 0x30da <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x88>
    308e:	e8 e5       	ldi	r30, 0x58	; 88
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	82 95       	swap	r24
    3096:	8f 70       	andi	r24, 0x0F	; 15
    3098:	81 70       	andi	r24, 0x01	; 1
    309a:	eb 81       	ldd	r30, Y+3	; 0x03
    309c:	fc 81       	ldd	r31, Y+4	; 0x04
    309e:	80 83       	st	Z, r24
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	1b c0       	rjmp	.+54     	; 0x30dc <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x8a>
    30a6:	e8 e5       	ldi	r30, 0x58	; 88
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	86 95       	lsr	r24
    30ae:	86 95       	lsr	r24
    30b0:	86 95       	lsr	r24
    30b2:	81 70       	andi	r24, 0x01	; 1
    30b4:	eb 81       	ldd	r30, Y+3	; 0x03
    30b6:	fc 81       	ldd	r31, Y+4	; 0x04
    30b8:	80 83       	st	Z, r24
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	0e c0       	rjmp	.+28     	; 0x30dc <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x8a>
    30c0:	e8 e5       	ldi	r30, 0x58	; 88
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	82 95       	swap	r24
    30c8:	86 95       	lsr	r24
    30ca:	87 70       	andi	r24, 0x07	; 7
    30cc:	81 70       	andi	r24, 0x01	; 1
    30ce:	eb 81       	ldd	r30, Y+3	; 0x03
    30d0:	fc 81       	ldd	r31, Y+4	; 0x04
    30d2:	80 83       	st	Z, r24
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <MCAL_Timers_TMR1ReadCompareMatchInterruptFlag+0x8a>
    30da:	19 82       	std	Y+1, r1	; 0x01
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	26 96       	adiw	r28, 0x06	; 6
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag>:
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x6>
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x8>
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	8a 83       	std	Y+2, r24	; 0x02
    30fe:	19 82       	std	Y+1, r1	; 0x01
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	3c 83       	std	Y+4, r19	; 0x04
    3108:	2b 83       	std	Y+3, r18	; 0x03
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	91 05       	cpc	r25, r1
    3112:	89 f0       	breq	.+34     	; 0x3136 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x46>
    3114:	2b 81       	ldd	r18, Y+3	; 0x03
    3116:	3c 81       	ldd	r19, Y+4	; 0x04
    3118:	22 30       	cpi	r18, 0x02	; 2
    311a:	31 05       	cpc	r19, r1
    311c:	a1 f0       	breq	.+40     	; 0x3146 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x56>
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	9c 81       	ldd	r25, Y+4	; 0x04
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	c1 f4       	brne	.+48     	; 0x3156 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x66>
    3126:	e8 e5       	ldi	r30, 0x58	; 88
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	80 61       	ori	r24, 0x10	; 16
    312e:	80 83       	st	Z, r24
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	89 83       	std	Y+1, r24	; 0x01
    3134:	11 c0       	rjmp	.+34     	; 0x3158 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x68>
    3136:	e8 e5       	ldi	r30, 0x58	; 88
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	88 60       	ori	r24, 0x08	; 8
    313e:	80 83       	st	Z, r24
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	09 c0       	rjmp	.+18     	; 0x3158 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x68>
    3146:	e8 e5       	ldi	r30, 0x58	; 88
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	80 62       	ori	r24, 0x20	; 32
    314e:	80 83       	st	Z, r24
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <MCAL_Timers_TMR1ClearCompareMatchInterruptFlag+0x68>
    3156:	19 82       	std	Y+1, r1	; 0x01
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <MCAL_Timers_TMR1OverlowSetCallBack>:
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <MCAL_Timers_TMR1OverlowSetCallBack+0x6>
    316e:	0f 92       	push	r0
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	9b 83       	std	Y+3, r25	; 0x03
    3176:	8a 83       	std	Y+2, r24	; 0x02
    3178:	19 82       	std	Y+1, r1	; 0x01
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	9b 81       	ldd	r25, Y+3	; 0x03
    317e:	90 93 dd 01 	sts	0x01DD, r25
    3182:	80 93 dc 01 	sts	0x01DC, r24
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <MCAL_Timers_TMR1CompareMatchChannel_A_SetCallBack>:
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <MCAL_Timers_TMR1CompareMatchChannel_A_SetCallBack+0x6>
    319e:	0f 92       	push	r0
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	9b 83       	std	Y+3, r25	; 0x03
    31a6:	8a 83       	std	Y+2, r24	; 0x02
    31a8:	19 82       	std	Y+1, r1	; 0x01
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	9b 81       	ldd	r25, Y+3	; 0x03
    31ae:	90 93 df 01 	sts	0x01DF, r25
    31b2:	80 93 de 01 	sts	0x01DE, r24
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <MCAL_Timers_TMR1CompareMatchChannel_B_SetCallBack>:
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <MCAL_Timers_TMR1CompareMatchChannel_B_SetCallBack+0x6>
    31ce:	0f 92       	push	r0
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	9b 83       	std	Y+3, r25	; 0x03
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	19 82       	std	Y+1, r1	; 0x01
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	90 93 e1 01 	sts	0x01E1, r25
    31e2:	80 93 e0 01 	sts	0x01E0, r24
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <MCAL_Timers_TMR1CompareMatchChannel_IC_SetCallBack>:
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <MCAL_Timers_TMR1CompareMatchChannel_IC_SetCallBack+0x6>
    31fe:	0f 92       	push	r0
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	9b 83       	std	Y+3, r25	; 0x03
    3206:	8a 83       	std	Y+2, r24	; 0x02
    3208:	19 82       	std	Y+1, r1	; 0x01
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	9b 81       	ldd	r25, Y+3	; 0x03
    320e:	90 93 e3 01 	sts	0x01E3, r25
    3212:	80 93 e2 01 	sts	0x01E2, r24
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <MCAL_Timers_TMR1Delay_ms>:
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	2e 97       	sbiw	r28, 0x0e	; 14
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	8a 87       	std	Y+10, r24	; 0x0a
    3246:	7c 87       	std	Y+12, r23	; 0x0c
    3248:	6b 87       	std	Y+11, r22	; 0x0b
    324a:	19 86       	std	Y+9, r1	; 0x09
    324c:	18 86       	std	Y+8, r1	; 0x08
    324e:	1f 82       	std	Y+7, r1	; 0x07
    3250:	1e 82       	std	Y+6, r1	; 0x06
    3252:	1d 82       	std	Y+5, r1	; 0x05
    3254:	1c 82       	std	Y+4, r1	; 0x04
    3256:	1b 82       	std	Y+3, r1	; 0x03
    3258:	1a 82       	std	Y+2, r1	; 0x02
    325a:	19 82       	std	Y+1, r1	; 0x01
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	80 93 db 01 	sts	0x01DB, r24
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	0e 94 74 10 	call	0x20e8	; 0x20e8 <MCAL_Timers_TMR1Init>
    3268:	8a 85       	ldd	r24, Y+10	; 0x0a
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	3e 87       	std	Y+14, r19	; 0x0e
    3270:	2d 87       	std	Y+13, r18	; 0x0d
    3272:	4d 85       	ldd	r20, Y+13	; 0x0d
    3274:	5e 85       	ldd	r21, Y+14	; 0x0e
    3276:	43 30       	cpi	r20, 0x03	; 3
    3278:	51 05       	cpc	r21, r1
    327a:	49 f1       	breq	.+82     	; 0x32ce <MCAL_Timers_TMR1Delay_ms+0xa6>
    327c:	8d 85       	ldd	r24, Y+13	; 0x0d
    327e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3280:	84 30       	cpi	r24, 0x04	; 4
    3282:	91 05       	cpc	r25, r1
    3284:	5c f4       	brge	.+22     	; 0x329c <MCAL_Timers_TMR1Delay_ms+0x74>
    3286:	2d 85       	ldd	r18, Y+13	; 0x0d
    3288:	3e 85       	ldd	r19, Y+14	; 0x0e
    328a:	21 30       	cpi	r18, 0x01	; 1
    328c:	31 05       	cpc	r19, r1
    328e:	89 f0       	breq	.+34     	; 0x32b2 <MCAL_Timers_TMR1Delay_ms+0x8a>
    3290:	4d 85       	ldd	r20, Y+13	; 0x0d
    3292:	5e 85       	ldd	r21, Y+14	; 0x0e
    3294:	42 30       	cpi	r20, 0x02	; 2
    3296:	51 05       	cpc	r21, r1
    3298:	99 f0       	breq	.+38     	; 0x32c0 <MCAL_Timers_TMR1Delay_ms+0x98>
    329a:	2e c0       	rjmp	.+92     	; 0x32f8 <MCAL_Timers_TMR1Delay_ms+0xd0>
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	84 30       	cpi	r24, 0x04	; 4
    32a2:	91 05       	cpc	r25, r1
    32a4:	d9 f0       	breq	.+54     	; 0x32dc <MCAL_Timers_TMR1Delay_ms+0xb4>
    32a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    32a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    32aa:	25 30       	cpi	r18, 0x05	; 5
    32ac:	31 05       	cpc	r19, r1
    32ae:	e9 f0       	breq	.+58     	; 0x32ea <MCAL_Timers_TMR1Delay_ms+0xc2>
    32b0:	23 c0       	rjmp	.+70     	; 0x32f8 <MCAL_Timers_TMR1Delay_ms+0xd0>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	94 e2       	ldi	r25, 0x24	; 36
    32b6:	98 87       	std	Y+8, r25	; 0x08
    32b8:	8f 83       	std	Y+7, r24	; 0x07
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	89 87       	std	Y+9, r24	; 0x09
    32be:	1d c0       	rjmp	.+58     	; 0x32fa <MCAL_Timers_TMR1Delay_ms+0xd2>
    32c0:	80 e8       	ldi	r24, 0x80	; 128
    32c2:	94 e8       	ldi	r25, 0x84	; 132
    32c4:	98 87       	std	Y+8, r25	; 0x08
    32c6:	8f 83       	std	Y+7, r24	; 0x07
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	89 87       	std	Y+9, r24	; 0x09
    32cc:	16 c0       	rjmp	.+44     	; 0x32fa <MCAL_Timers_TMR1Delay_ms+0xd2>
    32ce:	80 e9       	ldi	r24, 0x90	; 144
    32d0:	90 ed       	ldi	r25, 0xD0	; 208
    32d2:	98 87       	std	Y+8, r25	; 0x08
    32d4:	8f 83       	std	Y+7, r24	; 0x07
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	89 87       	std	Y+9, r24	; 0x09
    32da:	0f c0       	rjmp	.+30     	; 0x32fa <MCAL_Timers_TMR1Delay_ms+0xd2>
    32dc:	84 e2       	ldi	r24, 0x24	; 36
    32de:	94 ef       	ldi	r25, 0xF4	; 244
    32e0:	98 87       	std	Y+8, r25	; 0x08
    32e2:	8f 83       	std	Y+7, r24	; 0x07
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	89 87       	std	Y+9, r24	; 0x09
    32e8:	08 c0       	rjmp	.+16     	; 0x32fa <MCAL_Timers_TMR1Delay_ms+0xd2>
    32ea:	89 e0       	ldi	r24, 0x09	; 9
    32ec:	9d e3       	ldi	r25, 0x3D	; 61
    32ee:	98 87       	std	Y+8, r25	; 0x08
    32f0:	8f 83       	std	Y+7, r24	; 0x07
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	89 87       	std	Y+9, r24	; 0x09
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <MCAL_Timers_TMR1Delay_ms+0xd2>
    32f8:	19 86       	std	Y+9, r1	; 0x09
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	81 30       	cpi	r24, 0x01	; 1
    32fe:	09 f0       	breq	.+2      	; 0x3302 <MCAL_Timers_TMR1Delay_ms+0xda>
    3300:	81 c0       	rjmp	.+258    	; 0x3404 <MCAL_Timers_TMR1Delay_ms+0x1dc>
    3302:	8b 85       	ldd	r24, Y+11	; 0x0b
    3304:	9c 85       	ldd	r25, Y+12	; 0x0c
    3306:	28 ee       	ldi	r18, 0xE8	; 232
    3308:	33 e0       	ldi	r19, 0x03	; 3
    330a:	b9 01       	movw	r22, r18
    330c:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    3310:	cb 01       	movw	r24, r22
    3312:	9c 01       	movw	r18, r24
    3314:	8f 81       	ldd	r24, Y+7	; 0x07
    3316:	98 85       	ldd	r25, Y+8	; 0x08
    3318:	ac 01       	movw	r20, r24
    331a:	24 9f       	mul	r18, r20
    331c:	c0 01       	movw	r24, r0
    331e:	25 9f       	mul	r18, r21
    3320:	90 0d       	add	r25, r0
    3322:	34 9f       	mul	r19, r20
    3324:	90 0d       	add	r25, r0
    3326:	11 24       	eor	r1, r1
    3328:	9e 83       	std	Y+6, r25	; 0x06
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	9e 81       	ldd	r25, Y+6	; 0x06
    3330:	cc 01       	movw	r24, r24
    3332:	a0 e0       	ldi	r26, 0x00	; 0
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	41 e0       	ldi	r20, 0x01	; 1
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 0a 44 	call	0x8814	; 0x8814 <__divmodsi4>
    3346:	da 01       	movw	r26, r20
    3348:	c9 01       	movw	r24, r18
    334a:	90 93 da 01 	sts	0x01DA, r25
    334e:	80 93 d9 01 	sts	0x01D9, r24
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	cc 01       	movw	r24, r24
    3358:	a0 e0       	ldi	r26, 0x00	; 0
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	57 e4       	ldi	r21, 0x47	; 71
    3374:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	7c 01       	movw	r14, r24
    337e:	8d 01       	movw	r16, r26
    3380:	80 91 d9 01 	lds	r24, 0x01D9
    3384:	90 91 da 01 	lds	r25, 0x01DA
    3388:	cc 01       	movw	r24, r24
    338a:	a0 e0       	ldi	r26, 0x00	; 0
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3396:	9b 01       	movw	r18, r22
    3398:	ac 01       	movw	r20, r24
    339a:	c8 01       	movw	r24, r16
    339c:	b7 01       	movw	r22, r14
    339e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9c 83       	std	Y+4, r25	; 0x04
    33b4:	8b 83       	std	Y+3, r24	; 0x03
    33b6:	8b 81       	ldd	r24, Y+3	; 0x03
    33b8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ba:	cc 01       	movw	r24, r24
    33bc:	a0 e0       	ldi	r26, 0x00	; 0
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4f ef       	ldi	r20, 0xFF	; 255
    33c6:	5f ef       	ldi	r21, 0xFF	; 255
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 b8 43 	call	0x8770	; 0x8770 <__mulsi3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	0e 94 8e 12 	call	0x251c	; 0x251c <MCAL_Timers_TMR1SetInitValue>
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <MCAL_Timers_TMR1OverflowInterruptStatus>
    33e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ea:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Timers_TMR1Start>
    33ee:	04 c0       	rjmp	.+8      	; 0x33f8 <MCAL_Timers_TMR1Delay_ms+0x1d0>
    33f0:	80 91 db 01 	lds	r24, 0x01DB
    33f4:	81 30       	cpi	r24, 0x01	; 1
    33f6:	e1 f3       	breq	.-8      	; 0x33f0 <MCAL_Timers_TMR1Delay_ms+0x1c8>
    33f8:	80 91 d9 01 	lds	r24, 0x01D9
    33fc:	90 91 da 01 	lds	r25, 0x01DA
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	b1 f7       	brne	.-20     	; 0x33f0 <MCAL_Timers_TMR1Delay_ms+0x1c8>
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	2e 96       	adiw	r28, 0x0e	; 14
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	1f 91       	pop	r17
    3418:	0f 91       	pop	r16
    341a:	ff 90       	pop	r15
    341c:	ef 90       	pop	r14
    341e:	08 95       	ret

00003420 <MCAL_Timers_TMR1Timer_ms>:
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	2e 97       	sbiw	r28, 0x0e	; 14
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	8a 87       	std	Y+10, r24	; 0x0a
    343e:	7c 87       	std	Y+12, r23	; 0x0c
    3440:	6b 87       	std	Y+11, r22	; 0x0b
    3442:	19 86       	std	Y+9, r1	; 0x09
    3444:	18 86       	std	Y+8, r1	; 0x08
    3446:	1f 82       	std	Y+7, r1	; 0x07
    3448:	1e 82       	std	Y+6, r1	; 0x06
    344a:	1d 82       	std	Y+5, r1	; 0x05
    344c:	1c 82       	std	Y+4, r1	; 0x04
    344e:	1b 82       	std	Y+3, r1	; 0x03
    3450:	1a 82       	std	Y+2, r1	; 0x02
    3452:	19 82       	std	Y+1, r1	; 0x01
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	0e 94 74 10 	call	0x20e8	; 0x20e8 <MCAL_Timers_TMR1Init>
    345a:	8a 85       	ldd	r24, Y+10	; 0x0a
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	3e 87       	std	Y+14, r19	; 0x0e
    3462:	2d 87       	std	Y+13, r18	; 0x0d
    3464:	4d 85       	ldd	r20, Y+13	; 0x0d
    3466:	5e 85       	ldd	r21, Y+14	; 0x0e
    3468:	43 30       	cpi	r20, 0x03	; 3
    346a:	51 05       	cpc	r21, r1
    346c:	49 f1       	breq	.+82     	; 0x34c0 <MCAL_Timers_TMR1Timer_ms+0xa0>
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	84 30       	cpi	r24, 0x04	; 4
    3474:	91 05       	cpc	r25, r1
    3476:	5c f4       	brge	.+22     	; 0x348e <MCAL_Timers_TMR1Timer_ms+0x6e>
    3478:	2d 85       	ldd	r18, Y+13	; 0x0d
    347a:	3e 85       	ldd	r19, Y+14	; 0x0e
    347c:	21 30       	cpi	r18, 0x01	; 1
    347e:	31 05       	cpc	r19, r1
    3480:	89 f0       	breq	.+34     	; 0x34a4 <MCAL_Timers_TMR1Timer_ms+0x84>
    3482:	4d 85       	ldd	r20, Y+13	; 0x0d
    3484:	5e 85       	ldd	r21, Y+14	; 0x0e
    3486:	42 30       	cpi	r20, 0x02	; 2
    3488:	51 05       	cpc	r21, r1
    348a:	99 f0       	breq	.+38     	; 0x34b2 <MCAL_Timers_TMR1Timer_ms+0x92>
    348c:	2e c0       	rjmp	.+92     	; 0x34ea <MCAL_Timers_TMR1Timer_ms+0xca>
    348e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3490:	9e 85       	ldd	r25, Y+14	; 0x0e
    3492:	84 30       	cpi	r24, 0x04	; 4
    3494:	91 05       	cpc	r25, r1
    3496:	d9 f0       	breq	.+54     	; 0x34ce <MCAL_Timers_TMR1Timer_ms+0xae>
    3498:	2d 85       	ldd	r18, Y+13	; 0x0d
    349a:	3e 85       	ldd	r19, Y+14	; 0x0e
    349c:	25 30       	cpi	r18, 0x05	; 5
    349e:	31 05       	cpc	r19, r1
    34a0:	e9 f0       	breq	.+58     	; 0x34dc <MCAL_Timers_TMR1Timer_ms+0xbc>
    34a2:	23 c0       	rjmp	.+70     	; 0x34ea <MCAL_Timers_TMR1Timer_ms+0xca>
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	94 e2       	ldi	r25, 0x24	; 36
    34a8:	98 87       	std	Y+8, r25	; 0x08
    34aa:	8f 83       	std	Y+7, r24	; 0x07
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	89 87       	std	Y+9, r24	; 0x09
    34b0:	1d c0       	rjmp	.+58     	; 0x34ec <MCAL_Timers_TMR1Timer_ms+0xcc>
    34b2:	80 e8       	ldi	r24, 0x80	; 128
    34b4:	94 e8       	ldi	r25, 0x84	; 132
    34b6:	98 87       	std	Y+8, r25	; 0x08
    34b8:	8f 83       	std	Y+7, r24	; 0x07
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	89 87       	std	Y+9, r24	; 0x09
    34be:	16 c0       	rjmp	.+44     	; 0x34ec <MCAL_Timers_TMR1Timer_ms+0xcc>
    34c0:	80 e9       	ldi	r24, 0x90	; 144
    34c2:	90 ed       	ldi	r25, 0xD0	; 208
    34c4:	98 87       	std	Y+8, r25	; 0x08
    34c6:	8f 83       	std	Y+7, r24	; 0x07
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	89 87       	std	Y+9, r24	; 0x09
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <MCAL_Timers_TMR1Timer_ms+0xcc>
    34ce:	84 e2       	ldi	r24, 0x24	; 36
    34d0:	94 ef       	ldi	r25, 0xF4	; 244
    34d2:	98 87       	std	Y+8, r25	; 0x08
    34d4:	8f 83       	std	Y+7, r24	; 0x07
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	89 87       	std	Y+9, r24	; 0x09
    34da:	08 c0       	rjmp	.+16     	; 0x34ec <MCAL_Timers_TMR1Timer_ms+0xcc>
    34dc:	89 e0       	ldi	r24, 0x09	; 9
    34de:	9d e3       	ldi	r25, 0x3D	; 61
    34e0:	98 87       	std	Y+8, r25	; 0x08
    34e2:	8f 83       	std	Y+7, r24	; 0x07
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	89 87       	std	Y+9, r24	; 0x09
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <MCAL_Timers_TMR1Timer_ms+0xcc>
    34ea:	19 86       	std	Y+9, r1	; 0x09
    34ec:	89 85       	ldd	r24, Y+9	; 0x09
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	09 f0       	breq	.+2      	; 0x34f4 <MCAL_Timers_TMR1Timer_ms+0xd4>
    34f2:	76 c0       	rjmp	.+236    	; 0x35e0 <MCAL_Timers_TMR1Timer_ms+0x1c0>
    34f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    34f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    34f8:	28 ee       	ldi	r18, 0xE8	; 232
    34fa:	33 e0       	ldi	r19, 0x03	; 3
    34fc:	b9 01       	movw	r22, r18
    34fe:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <__udivmodhi4>
    3502:	cb 01       	movw	r24, r22
    3504:	9c 01       	movw	r18, r24
    3506:	8f 81       	ldd	r24, Y+7	; 0x07
    3508:	98 85       	ldd	r25, Y+8	; 0x08
    350a:	ac 01       	movw	r20, r24
    350c:	24 9f       	mul	r18, r20
    350e:	c0 01       	movw	r24, r0
    3510:	25 9f       	mul	r18, r21
    3512:	90 0d       	add	r25, r0
    3514:	34 9f       	mul	r19, r20
    3516:	90 0d       	add	r25, r0
    3518:	11 24       	eor	r1, r1
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	cc 01       	movw	r24, r24
    3524:	a0 e0       	ldi	r26, 0x00	; 0
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 0a 44 	call	0x8814	; 0x8814 <__divmodsi4>
    3538:	da 01       	movw	r26, r20
    353a:	c9 01       	movw	r24, r18
    353c:	90 93 da 01 	sts	0x01DA, r25
    3540:	80 93 d9 01 	sts	0x01D9, r24
    3544:	8d 81       	ldd	r24, Y+5	; 0x05
    3546:	9e 81       	ldd	r25, Y+6	; 0x06
    3548:	cc 01       	movw	r24, r24
    354a:	a0 e0       	ldi	r26, 0x00	; 0
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	57 e4       	ldi	r21, 0x47	; 71
    3566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	7c 01       	movw	r14, r24
    3570:	8d 01       	movw	r16, r26
    3572:	80 91 d9 01 	lds	r24, 0x01D9
    3576:	90 91 da 01 	lds	r25, 0x01DA
    357a:	cc 01       	movw	r24, r24
    357c:	a0 e0       	ldi	r26, 0x00	; 0
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3588:	9b 01       	movw	r18, r22
    358a:	ac 01       	movw	r20, r24
    358c:	c8 01       	movw	r24, r16
    358e:	b7 01       	movw	r22, r14
    3590:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9c 83       	std	Y+4, r25	; 0x04
    35a6:	8b 83       	std	Y+3, r24	; 0x03
    35a8:	8b 81       	ldd	r24, Y+3	; 0x03
    35aa:	9c 81       	ldd	r25, Y+4	; 0x04
    35ac:	cc 01       	movw	r24, r24
    35ae:	a0 e0       	ldi	r26, 0x00	; 0
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	21 e0       	ldi	r18, 0x01	; 1
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4f ef       	ldi	r20, 0xFF	; 255
    35b8:	5f ef       	ldi	r21, 0xFF	; 255
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 b8 43 	call	0x8770	; 0x8770 <__mulsi3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	0e 94 8e 12 	call	0x251c	; 0x251c <MCAL_Timers_TMR1SetInitValue>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <MCAL_Timers_TMR1OverflowInterruptStatus>
    35da:	8a 85       	ldd	r24, Y+10	; 0x0a
    35dc:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Timers_TMR1Start>
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	2e 96       	adiw	r28, 0x0e	; 14
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	1f 91       	pop	r17
    35f4:	0f 91       	pop	r16
    35f6:	ff 90       	pop	r15
    35f8:	ef 90       	pop	r14
    35fa:	08 95       	ret

000035fc <__vector_9>:
    35fc:	1f 92       	push	r1
    35fe:	0f 92       	push	r0
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	0f 92       	push	r0
    3604:	11 24       	eor	r1, r1
    3606:	2f 93       	push	r18
    3608:	3f 93       	push	r19
    360a:	4f 93       	push	r20
    360c:	5f 93       	push	r21
    360e:	6f 93       	push	r22
    3610:	7f 93       	push	r23
    3612:	8f 93       	push	r24
    3614:	9f 93       	push	r25
    3616:	af 93       	push	r26
    3618:	bf 93       	push	r27
    361a:	ef 93       	push	r30
    361c:	ff 93       	push	r31
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	80 91 d9 01 	lds	r24, 0x01D9
    362a:	90 91 da 01 	lds	r25, 0x01DA
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	f1 f0       	breq	.+60     	; 0x366e <__vector_9+0x72>
    3632:	80 91 d9 01 	lds	r24, 0x01D9
    3636:	90 91 da 01 	lds	r25, 0x01DA
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	90 93 da 01 	sts	0x01DA, r25
    3640:	80 93 d9 01 	sts	0x01D9, r24
    3644:	80 91 d9 01 	lds	r24, 0x01D9
    3648:	90 91 da 01 	lds	r25, 0x01DA
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	a1 f4       	brne	.+40     	; 0x3678 <__vector_9+0x7c>
    3650:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <MCAL_Timers_TMR0Stop>
    3654:	80 91 db 01 	lds	r24, 0x01DB
    3658:	81 30       	cpi	r24, 0x01	; 1
    365a:	19 f4       	brne	.+6      	; 0x3662 <__vector_9+0x66>
    365c:	10 92 db 01 	sts	0x01DB, r1
    3660:	0b c0       	rjmp	.+22     	; 0x3678 <__vector_9+0x7c>
    3662:	e0 91 dc 01 	lds	r30, 0x01DC
    3666:	f0 91 dd 01 	lds	r31, 0x01DD
    366a:	09 95       	icall
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <__vector_9+0x7c>
    366e:	e0 91 dc 01 	lds	r30, 0x01DC
    3672:	f0 91 dd 01 	lds	r31, 0x01DD
    3676:	09 95       	icall
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	ff 91       	pop	r31
    367e:	ef 91       	pop	r30
    3680:	bf 91       	pop	r27
    3682:	af 91       	pop	r26
    3684:	9f 91       	pop	r25
    3686:	8f 91       	pop	r24
    3688:	7f 91       	pop	r23
    368a:	6f 91       	pop	r22
    368c:	5f 91       	pop	r21
    368e:	4f 91       	pop	r20
    3690:	3f 91       	pop	r19
    3692:	2f 91       	pop	r18
    3694:	0f 90       	pop	r0
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	0f 90       	pop	r0
    369a:	1f 90       	pop	r1
    369c:	18 95       	reti

0000369e <__vector_7>:
    369e:	1f 92       	push	r1
    36a0:	0f 92       	push	r0
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	0f 92       	push	r0
    36a6:	11 24       	eor	r1, r1
    36a8:	2f 93       	push	r18
    36aa:	3f 93       	push	r19
    36ac:	4f 93       	push	r20
    36ae:	5f 93       	push	r21
    36b0:	6f 93       	push	r22
    36b2:	7f 93       	push	r23
    36b4:	8f 93       	push	r24
    36b6:	9f 93       	push	r25
    36b8:	af 93       	push	r26
    36ba:	bf 93       	push	r27
    36bc:	ef 93       	push	r30
    36be:	ff 93       	push	r31
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	e0 91 de 01 	lds	r30, 0x01DE
    36cc:	f0 91 df 01 	lds	r31, 0x01DF
    36d0:	09 95       	icall
    36d2:	cf 91       	pop	r28
    36d4:	df 91       	pop	r29
    36d6:	ff 91       	pop	r31
    36d8:	ef 91       	pop	r30
    36da:	bf 91       	pop	r27
    36dc:	af 91       	pop	r26
    36de:	9f 91       	pop	r25
    36e0:	8f 91       	pop	r24
    36e2:	7f 91       	pop	r23
    36e4:	6f 91       	pop	r22
    36e6:	5f 91       	pop	r21
    36e8:	4f 91       	pop	r20
    36ea:	3f 91       	pop	r19
    36ec:	2f 91       	pop	r18
    36ee:	0f 90       	pop	r0
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	0f 90       	pop	r0
    36f4:	1f 90       	pop	r1
    36f6:	18 95       	reti

000036f8 <__vector_8>:
    36f8:	1f 92       	push	r1
    36fa:	0f 92       	push	r0
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	0f 92       	push	r0
    3700:	11 24       	eor	r1, r1
    3702:	2f 93       	push	r18
    3704:	3f 93       	push	r19
    3706:	4f 93       	push	r20
    3708:	5f 93       	push	r21
    370a:	6f 93       	push	r22
    370c:	7f 93       	push	r23
    370e:	8f 93       	push	r24
    3710:	9f 93       	push	r25
    3712:	af 93       	push	r26
    3714:	bf 93       	push	r27
    3716:	ef 93       	push	r30
    3718:	ff 93       	push	r31
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	e0 91 e0 01 	lds	r30, 0x01E0
    3726:	f0 91 e1 01 	lds	r31, 0x01E1
    372a:	09 95       	icall
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	ff 91       	pop	r31
    3732:	ef 91       	pop	r30
    3734:	bf 91       	pop	r27
    3736:	af 91       	pop	r26
    3738:	9f 91       	pop	r25
    373a:	8f 91       	pop	r24
    373c:	7f 91       	pop	r23
    373e:	6f 91       	pop	r22
    3740:	5f 91       	pop	r21
    3742:	4f 91       	pop	r20
    3744:	3f 91       	pop	r19
    3746:	2f 91       	pop	r18
    3748:	0f 90       	pop	r0
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	0f 90       	pop	r0
    374e:	1f 90       	pop	r1
    3750:	18 95       	reti

00003752 <__vector_6>:
    3752:	1f 92       	push	r1
    3754:	0f 92       	push	r0
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	0f 92       	push	r0
    375a:	11 24       	eor	r1, r1
    375c:	2f 93       	push	r18
    375e:	3f 93       	push	r19
    3760:	4f 93       	push	r20
    3762:	5f 93       	push	r21
    3764:	6f 93       	push	r22
    3766:	7f 93       	push	r23
    3768:	8f 93       	push	r24
    376a:	9f 93       	push	r25
    376c:	af 93       	push	r26
    376e:	bf 93       	push	r27
    3770:	ef 93       	push	r30
    3772:	ff 93       	push	r31
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	e0 91 e2 01 	lds	r30, 0x01E2
    3780:	f0 91 e3 01 	lds	r31, 0x01E3
    3784:	09 95       	icall
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	ff 91       	pop	r31
    378c:	ef 91       	pop	r30
    378e:	bf 91       	pop	r27
    3790:	af 91       	pop	r26
    3792:	9f 91       	pop	r25
    3794:	8f 91       	pop	r24
    3796:	7f 91       	pop	r23
    3798:	6f 91       	pop	r22
    379a:	5f 91       	pop	r21
    379c:	4f 91       	pop	r20
    379e:	3f 91       	pop	r19
    37a0:	2f 91       	pop	r18
    37a2:	0f 90       	pop	r0
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	0f 90       	pop	r0
    37a8:	1f 90       	pop	r1
    37aa:	18 95       	reti

000037ac <MCAL_SPI_SPIInit>:

void (*UART_Rx_Complete_Ptr)(void)  = NULL_PTR;

void (*UART_Tx_BuffEmpty_Ptr)(void) = NULL_PTR;

Std_ReturnType MCAL_USART_USARTInit()
    37ac:	0f 93       	push	r16
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	00 d0       	rcall	.+0      	; 0x37b4 <MCAL_SPI_SPIInit+0x8>
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <MCAL_SPI_SPIInit+0xa>
    37b6:	00 d0       	rcall	.+0      	; 0x37b8 <MCAL_SPI_SPIInit+0xc>
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	8a 83       	std	Y+2, r24	; 0x02
    37be:	6b 83       	std	Y+3, r22	; 0x03
    37c0:	4c 83       	std	Y+4, r20	; 0x04
    37c2:	2d 83       	std	Y+5, r18	; 0x05
    37c4:	0e 83       	std	Y+6, r16	; 0x06
{
    37c6:	19 82       	std	Y+1, r1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    37c8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ca:	88 23       	and	r24, r24
    37cc:	31 f4       	brne	.+12     	; 0x37da <MCAL_SPI_SPIInit+0x2e>
	Local_ErrorStatus = MCAL_USART_USARTTransmitterStatus(DISABLE);
	Local_ErrorStatus = MCAL_USART_USARTReceiverStatus(DISABLE);
    37ce:	ed e2       	ldi	r30, 0x2D	; 45
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	8f 7b       	andi	r24, 0xBF	; 191
    37d6:	80 83       	st	Z, r24
    37d8:	42 c0       	rjmp	.+132    	; 0x385e <MCAL_SPI_SPIInit+0xb2>
	Local_ErrorStatus = MCAL_USART_SetBaudRate(UART_Module.Copy_SystemClockFreq, UART_Module.BaudRate);
	Local_ErrorStatus = MCAL_USART_SetSyncStatusAndFrameFormat(UART_Module.Sync_Mode, UART_Module.Parity_Check,
										  UART_Module.Stop_Bits, UART_Module.Data_Bits);

    37da:	ed e2       	ldi	r30, 0x2D	; 45
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	80 64       	ori	r24, 0x40	; 64
    37e2:	80 83       	st	Z, r24
	return Local_ErrorStatus;
    37e4:	ed e2       	ldi	r30, 0x2D	; 45
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ea:	81 70       	andi	r24, 0x01	; 1
    37ec:	81 70       	andi	r24, 0x01	; 1
    37ee:	98 2f       	mov	r25, r24
    37f0:	99 0f       	add	r25, r25
    37f2:	99 0f       	add	r25, r25
    37f4:	99 0f       	add	r25, r25
    37f6:	80 81       	ld	r24, Z
    37f8:	87 7f       	andi	r24, 0xF7	; 247
    37fa:	89 2b       	or	r24, r25
    37fc:	80 83       	st	Z, r24
}
    37fe:	ed e2       	ldi	r30, 0x2D	; 45
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	81 70       	andi	r24, 0x01	; 1
    3806:	81 70       	andi	r24, 0x01	; 1
    3808:	98 2f       	mov	r25, r24
    380a:	99 0f       	add	r25, r25
    380c:	99 0f       	add	r25, r25
    380e:	80 81       	ld	r24, Z
    3810:	8b 7f       	andi	r24, 0xFB	; 251
    3812:	89 2b       	or	r24, r25
    3814:	80 83       	st	Z, r24

    3816:	ed e2       	ldi	r30, 0x2D	; 45
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	8e 81       	ldd	r24, Y+6	; 0x06
    381c:	81 70       	andi	r24, 0x01	; 1
    381e:	81 70       	andi	r24, 0x01	; 1
    3820:	98 2f       	mov	r25, r24
    3822:	92 95       	swap	r25
    3824:	99 0f       	add	r25, r25
    3826:	90 7e       	andi	r25, 0xE0	; 224
    3828:	80 81       	ld	r24, Z
    382a:	8f 7d       	andi	r24, 0xDF	; 223
    382c:	89 2b       	or	r24, r25
    382e:	80 83       	st	Z, r24
Std_ReturnType MCAL_USART_USARTTransmitterStatus(uint8 Copy_TxStatus)
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	85 30       	cpi	r24, 0x05	; 5
    3834:	19 f0       	breq	.+6      	; 0x383c <MCAL_SPI_SPIInit+0x90>
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	86 30       	cpi	r24, 0x06	; 6
    383a:	21 f4       	brne	.+8      	; 0x3844 <MCAL_SPI_SPIInit+0x98>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <MCAL_SPI_DoubleSPISpeedStatus>
    3842:	03 c0       	rjmp	.+6      	; 0x384a <MCAL_SPI_SPIInit+0x9e>
	UCSRB_REG.TXEN_Bit3 = Copy_TxStatus;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <MCAL_SPI_DoubleSPISpeedStatus>
Std_ReturnType MCAL_USART_USARTSendData(uint16 Copy_DataToBeSend)
{
    384a:	ed e2       	ldi	r30, 0x2D	; 45
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	83 70       	andi	r24, 0x03	; 3
    3852:	98 2f       	mov	r25, r24
    3854:	93 70       	andi	r25, 0x03	; 3
    3856:	80 81       	ld	r24, Z
    3858:	8c 7f       	andi	r24, 0xFC	; 252
    385a:	89 2b       	or	r24, r25
    385c:	80 83       	st	Z, r24
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	if(UART_Module.Data_Bits == Bits_9)
    385e:	89 81       	ldd	r24, Y+1	; 0x01
		UCSRB_REG.TXB8_Bit0 = Copy_DataToBeSend >> 8;
    3860:	26 96       	adiw	r28, 0x06	; 6
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	0f 91       	pop	r16
    3872:	08 95       	ret

00003874 <MCAL_SPI_SPISelectMode>:
	UDR_REG = Copy_DataToBeSend;
	Local_ErrorStatus = E_OK;
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	00 d0       	rcall	.+0      	; 0x387a <MCAL_SPI_SPISelectMode+0x6>
    387a:	0f 92       	push	r0
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	8b 83       	std	Y+3, r24	; 0x03
	return Local_ErrorStatus;
    3882:	19 82       	std	Y+1, r1	; 0x01
}
    3884:	ed e2       	ldi	r30, 0x2D	; 45
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	8b 81       	ldd	r24, Y+3	; 0x03
    388a:	81 70       	andi	r24, 0x01	; 1
    388c:	81 70       	andi	r24, 0x01	; 1
    388e:	98 2f       	mov	r25, r24
    3890:	92 95       	swap	r25
    3892:	90 7f       	andi	r25, 0xF0	; 240
    3894:	80 81       	ld	r24, Z
    3896:	8f 7e       	andi	r24, 0xEF	; 239
    3898:	89 2b       	or	r24, r25
    389a:	80 83       	st	Z, r24
Std_ReturnType MCAL_USART_USARTReceiverStatus(uint8 Copy_RxStatus)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    389c:	1a 82       	std	Y+2, r1	; 0x02
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	8c 7f       	andi	r24, 0xFC	; 252
    38a2:	81 60       	ori	r24, 0x01	; 1
    38a4:	8a 83       	std	Y+2, r24	; 0x02
	UCSRB_REG.RXEN_Bit4 = Copy_RxStatus;
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	81 30       	cpi	r24, 0x01	; 1
    38aa:	91 f5       	brne	.+100    	; 0x3910 <MCAL_SPI_SPISelectMode+0x9c>
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	8c 61       	ori	r24, 0x1C	; 28
    38b0:	8a 83       	std	Y+2, r24	; 0x02
}
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	8f 79       	andi	r24, 0x9F	; 159
    38b6:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType MCAL_USART_USARTReceiveData(uint16 *Copy_ReceivedData)
    38b8:	ce 01       	movw	r24, r28
    38ba:	02 96       	adiw	r24, 0x02	; 2
    38bc:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	83 7e       	andi	r24, 0xE3	; 227
    38c4:	84 61       	ori	r24, 0x14	; 20
    38c6:	8a 83       	std	Y+2, r24	; 0x02
	*Copy_ReceivedData = 0;
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	8f 79       	andi	r24, 0x9F	; 159
    38cc:	8a 83       	std	Y+2, r24	; 0x02
	if(UCSRA_REG.FE_Bit4 | UCSRA_REG.PE_Bit2)//Handling the Frame Error and the Parity Error cases.
    38ce:	ce 01       	movw	r24, r28
    38d0:	02 96       	adiw	r24, 0x02	; 2
    38d2:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	{
		*Copy_ReceivedData = UDR_REG;
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	83 7e       	andi	r24, 0xE3	; 227
    38da:	88 61       	ori	r24, 0x18	; 24
    38dc:	8a 83       	std	Y+2, r24	; 0x02
		*Copy_ReceivedData = INVALID_RECEIVED_DATA;
    38de:	8a 81       	ldd	r24, Y+2	; 0x02
    38e0:	8f 79       	andi	r24, 0x9F	; 159
    38e2:	80 62       	ori	r24, 0x20	; 32
    38e4:	8a 83       	std	Y+2, r24	; 0x02
		Local_ErrorStatus = E_NOT_OK;
    38e6:	ce 01       	movw	r24, r28
    38e8:	02 96       	adiw	r24, 0x02	; 2
    38ea:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	}
	else
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	83 7e       	andi	r24, 0xE3	; 227
    38f2:	80 61       	ori	r24, 0x10	; 16
    38f4:	8a 83       	std	Y+2, r24	; 0x02
	{
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	8f 79       	andi	r24, 0x9F	; 159
    38fa:	8a 83       	std	Y+2, r24	; 0x02
		while(UCSRA_REG.RXC_Bit7 == USART_STILL_RECIEVE);
    38fc:	ce 01       	movw	r24, r28
    38fe:	02 96       	adiw	r24, 0x02	; 2
    3900:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
		if(UART_Module.Data_Bits == Bits_9)
    3904:	ce 01       	movw	r24, r28
    3906:	02 96       	adiw	r24, 0x02	; 2
    3908:	61 e0       	ldi	r22, 0x01	; 1
    390a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    390e:	31 c0       	rjmp	.+98     	; 0x3972 <MCAL_SPI_SPISelectMode+0xfe>
			*Copy_ReceivedData = UCSRB_REG.RXB8_Bit1;
		*Copy_ReceivedData = (*Copy_ReceivedData << 8) | UDR_REG;
    3910:	8b 81       	ldd	r24, Y+3	; 0x03
    3912:	88 23       	and	r24, r24
    3914:	71 f5       	brne	.+92     	; 0x3972 <MCAL_SPI_SPISelectMode+0xfe>
		Local_ErrorStatus = E_OK;
	}
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	8c 61       	ori	r24, 0x1C	; 28
    391a:	8a 83       	std	Y+2, r24	; 0x02
	return Local_ErrorStatus;
    391c:	8a 81       	ldd	r24, Y+2	; 0x02
    391e:	8f 79       	andi	r24, 0x9F	; 159
    3920:	80 62       	ori	r24, 0x20	; 32
    3922:	8a 83       	std	Y+2, r24	; 0x02
}
    3924:	ce 01       	movw	r24, r28
    3926:	02 96       	adiw	r24, 0x02	; 2
    3928:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
Std_ReturnType MCAL_USART_SetBaudRate(const uint32 Copy_SystemClockFreq, const uint32 Copy_BaudRate)
{
    392c:	8a 81       	ldd	r24, Y+2	; 0x02
    392e:	83 7e       	andi	r24, 0xE3	; 227
    3930:	84 61       	ori	r24, 0x14	; 20
    3932:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3934:	8a 81       	ldd	r24, Y+2	; 0x02
    3936:	8f 79       	andi	r24, 0x9F	; 159
    3938:	80 62       	ori	r24, 0x20	; 32
    393a:	8a 83       	std	Y+2, r24	; 0x02
	uint16 Local_UBRRValue = 0;
    393c:	ce 01       	movw	r24, r28
    393e:	02 96       	adiw	r24, 0x02	; 2
    3940:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	if(((UCSRB_REG.TXEN_Bit3) & (~(UCSRA_REG.UDRE_Bit5))) /*Transmission in progress*/
	   || ((UCSRB_REG.RXEN_Bit4) & (UCSRA_REG.RXC_Bit7))) /*Reception in progress or done but not read*/
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	83 7e       	andi	r24, 0xE3	; 227
    3948:	88 61       	ori	r24, 0x18	; 24
    394a:	8a 83       	std	Y+2, r24	; 0x02
	{
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	8f 79       	andi	r24, 0x9F	; 159
    3950:	8a 83       	std	Y+2, r24	; 0x02
		Local_ErrorStatus = E_NOT_OK;
    3952:	ce 01       	movw	r24, r28
    3954:	02 96       	adiw	r24, 0x02	; 2
    3956:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	}
	else
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	83 7e       	andi	r24, 0xE3	; 227
    395e:	80 61       	ori	r24, 0x10	; 16
    3960:	8a 83       	std	Y+2, r24	; 0x02
	{
    3962:	8a 81       	ldd	r24, Y+2	; 0x02
    3964:	8f 79       	andi	r24, 0x9F	; 159
    3966:	80 62       	ori	r24, 0x20	; 32
    3968:	8a 83       	std	Y+2, r24	; 0x02
		switch(UART_Module.Sync_Mode)
    396a:	ce 01       	movw	r24, r28
    396c:	02 96       	adiw	r24, 0x02	; 2
    396e:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
		{
		case Normal_Async_mode:
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	89 83       	std	Y+1, r24	; 0x01
			Local_UBRRValue =(Copy_SystemClockFreq / (16 * Copy_BaudRate)) - 1;
    3976:	89 81       	ldd	r24, Y+1	; 0x01
			UBRRL_REG = Local_UBRRValue;
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <MCAL_SPI_CreateSlaveToMaster>:
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
			UART_Module.BaudRate = Copy_BaudRate;
			Local_ErrorStatus = E_OK;
			break;
		case Double_Speed_Async_mode:
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	00 d0       	rcall	.+0      	; 0x398a <MCAL_SPI_CreateSlaveToMaster+0x6>
    398a:	0f 92       	push	r0
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    3990:	9b 83       	std	Y+3, r25	; 0x03
    3992:	8a 83       	std	Y+2, r24	; 0x02
			Local_UBRRValue =(Copy_SystemClockFreq / (8 * Copy_BaudRate)) - 1;
    3994:	19 82       	std	Y+1, r1	; 0x01
			UBRRL_REG = Local_UBRRValue;
    3996:	ea 81       	ldd	r30, Y+2	; 0x02
    3998:	fb 81       	ldd	r31, Y+3	; 0x03
    399a:	80 81       	ld	r24, Z
    399c:	8f 79       	andi	r24, 0x9F	; 159
    399e:	80 83       	st	Z, r24
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	9b 81       	ldd	r25, Y+3	; 0x03
    39a4:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
			UART_Module.BaudRate = Copy_BaudRate;
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	9b 81       	ldd	r25, Y+3	; 0x03
    39ac:	61 e0       	ldi	r22, 0x01	; 1
    39ae:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
			Local_ErrorStatus = E_OK;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	89 83       	std	Y+1, r24	; 0x01
			break;
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
		case Sync_Master_Tx_Rx:
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <MCAL_SPI_MasterActivesSlave>:
		case Sync_Master_Rx_Tx:
			Local_UBRRValue =(Copy_SystemClockFreq / (2 * Copy_BaudRate)) - 1;
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <MCAL_SPI_MasterActivesSlave+0x6>
    39ca:	0f 92       	push	r0
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	9b 83       	std	Y+3, r25	; 0x03
    39d2:	8a 83       	std	Y+2, r24	; 0x02
			UBRRL_REG = Local_UBRRValue;
    39d4:	19 82       	std	Y+1, r1	; 0x01
			UBRRH_REG = (((uint16)Local_UBRRValue) >> 8) & (0b00001111);
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	9b 81       	ldd	r25, Y+3	; 0x03
    39da:	60 e0       	ldi	r22, 0x00	; 0
    39dc:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
			UART_Module.BaudRate = Copy_BaudRate;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	89 83       	std	Y+1, r24	; 0x01
			Local_ErrorStatus = E_OK;
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
			break;
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	cf 91       	pop	r28
    39ee:	df 91       	pop	r29
    39f0:	08 95       	ret

000039f2 <MCAL_SPI_MasterDeactivesSlave>:
		default:
			Local_ErrorStatus = E_NOT_OK;
    39f2:	df 93       	push	r29
    39f4:	cf 93       	push	r28
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <MCAL_SPI_MasterDeactivesSlave+0x6>
    39f8:	0f 92       	push	r0
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	9b 83       	std	Y+3, r25	; 0x03
    3a00:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3a02:	19 82       	std	Y+1, r1	; 0x01
		}
    3a04:	8a 81       	ldd	r24, Y+2	; 0x02
    3a06:	9b 81       	ldd	r25, Y+3	; 0x03
    3a08:	61 e0       	ldi	r22, 0x01	; 1
    3a0a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	}
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	08 95       	ret

00003a20 <MCAL_SPI_Mastersend>:

Std_ReturnType MCAL_USART_SetSyncStatusAndFrameFormat(const Clock_Generation_Mode_t Copy_SyncStatus,
													  const Parity_Frame_Format_t Copy_Parity_Check,
    3a20:	df 93       	push	r29
    3a22:	cf 93       	push	r28
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <MCAL_SPI_Mastersend+0x6>
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
													  const Stop_Bits_Frame_Format_t Copy_Stop_Bits,
    3a2c:	19 82       	std	Y+1, r1	; 0x01
													  const Data_Bits_Frame_Format_t Copy_Data_Bits)
    3a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a30:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <MCAL_SPI_SPIWriteData>
    3a34:	89 83       	std	Y+1, r24	; 0x01
{
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	08 95       	ret

00003a42 <MCAL_SPI_SlavePrepareDataToBeSendToMaster>:
	UCSRC_REG_t Local_UCSRCValue;
	//Choose to write in UCSRC not UBRRH.
	Local_UCSRCValue.URSEL_Bit7 = SET;
	/* Since we will write in UCSRA during setting the synchronization modes, it's recommended
	* from the data-sheet to write the bits: FE, DOR, and PE in UCSRA by zero when writing in USCRA.
	*/
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	00 d0       	rcall	.+0      	; 0x3a48 <MCAL_SPI_SlavePrepareDataToBeSendToMaster+0x6>
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	8a 83       	std	Y+2, r24	; 0x02
	UCSRA_REG.FE_Bit4  = CLEAR;
    3a4e:	19 82       	std	Y+1, r1	; 0x01
	UCSRA_REG.DOR_Bit3 = CLEAR;
    3a50:	8a 81       	ldd	r24, Y+2	; 0x02
    3a52:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <MCAL_SPI_SPIWriteData>
    3a56:	89 83       	std	Y+1, r24	; 0x01
	UCSRA_REG.PE_Bit2  = CLEAR;
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
	//Set the Synchronization mode settings
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <MCAL_SPI_ReadReceivedData>:
	if((Copy_SyncStatus == Normal_Async_mode) || (Copy_SyncStatus == Double_Speed_Async_mode))
	{
		Local_UCSRCValue.UMSEL_Bit6 = CLEAR;
		Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	00 d0       	rcall	.+0      	; 0x3a6a <MCAL_SPI_ReadReceivedData+0x6>
    3a6a:	0f 92       	push	r0
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
		if(Copy_SyncStatus == Normal_Async_mode)
    3a74:	19 82       	std	Y+1, r1	; 0x01
			UCSRA_REG.U2X_Bit1 = CLEAR;
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <MCAL_SPI_SPIReadData>
    3a7e:	89 83       	std	Y+1, r24	; 0x01
		else
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
			UCSRA_REG.U2X_Bit1 = SET;
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	08 95       	ret

00003a8e <MCAL_SPI_SPIWriteData>:
		UART_Module.Sync_Mode = Copy_SyncStatus;
		Local_ErrorStatus = E_OK;
	}
    3a8e:	df 93       	push	r29
    3a90:	cf 93       	push	r28
    3a92:	00 d0       	rcall	.+0      	; 0x3a94 <MCAL_SPI_SPIWriteData+0x6>
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	8a 83       	std	Y+2, r24	; 0x02
	else if((Copy_SyncStatus == Sync_Master_Tx_Rx) || (Copy_SyncStatus == Sync_Master_Rx_Tx) ||
    3a9a:	19 82       	std	Y+1, r1	; 0x01
			(Copy_SyncStatus == Sync_Slave_Tx_Rx) || (Copy_SyncStatus == Sync_Slave_Rx_Tx))
    3a9c:	ef e2       	ldi	r30, 0x2F	; 47
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	80 83       	st	Z, r24
	{
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRCValue.UMSEL_Bit6 = SET;
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
		UCSRA_REG.U2X_Bit1 = CLEAR;
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <MCAL_SPI_SPIReadData>:
		if((Copy_SyncStatus == Sync_Master_Tx_Rx) || (Copy_SyncStatus == Sync_Master_Rx_Tx))
		{
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <MCAL_SPI_SPIReadData+0x6>
    3aba:	0f 92       	push	r0
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	9b 83       	std	Y+3, r25	; 0x03
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
			Pin_Conig_t Local_XCKPin = {
    3ac4:	19 82       	std	Y+1, r1	; 0x01
					.PORT_ID = DIO_PORTB,
    3ac6:	ef e2       	ldi	r30, 0x2F	; 47
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	80 81       	ld	r24, Z
    3acc:	ea 81       	ldd	r30, Y+2	; 0x02
    3ace:	fb 81       	ldd	r31, Y+3	; 0x03
    3ad0:	80 83       	st	Z, r24
					.Pin_Num = DIO_PIN0,
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	89 83       	std	Y+1, r24	; 0x01
					.Pin_Direction = DIO_PIN_OUTPUT
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
			};
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <MCAL_SPI_GetWriteCollisionFlag>:
			Local_ErrorStatus = MCAL_DIO_SetPinDirection(&Local_XCKPin);
			if(Copy_SyncStatus == Sync_Master_Tx_Rx)
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	00 d0       	rcall	.+0      	; 0x3aea <MCAL_SPI_GetWriteCollisionFlag+0x6>
    3aea:	0f 92       	push	r0
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	9b 83       	std	Y+3, r25	; 0x03
    3af2:	8a 83       	std	Y+2, r24	; 0x02
				Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
    3af4:	19 82       	std	Y+1, r1	; 0x01
			else
    3af6:	ee e2       	ldi	r30, 0x2E	; 46
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	82 95       	swap	r24
    3afe:	86 95       	lsr	r24
    3b00:	86 95       	lsr	r24
    3b02:	83 70       	andi	r24, 0x03	; 3
    3b04:	81 70       	andi	r24, 0x01	; 1
    3b06:	ea 81       	ldd	r30, Y+2	; 0x02
    3b08:	fb 81       	ldd	r31, Y+3	; 0x03
    3b0a:	80 83       	st	Z, r24
				Local_UCSRCValue.UCPOL_Bit0 = SET;
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	89 83       	std	Y+1, r24	; 0x01
		}
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
		else
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <MCAL_SPI_DoubleSPISpeedStatus>:
		{
			Pin_Conig_t Local_XCKPin = {
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <MCAL_SPI_DoubleSPISpeedStatus+0x6>
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	8a 83       	std	Y+2, r24	; 0x02
					.PORT_ID = DIO_PORTB,
    3b2a:	19 82       	std	Y+1, r1	; 0x01
					.Pin_Num = DIO_PIN0,
    3b2c:	ee e2       	ldi	r30, 0x2E	; 46
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	81 70       	andi	r24, 0x01	; 1
    3b34:	98 2f       	mov	r25, r24
    3b36:	91 70       	andi	r25, 0x01	; 1
    3b38:	80 81       	ld	r24, Z
    3b3a:	8e 7f       	andi	r24, 0xFE	; 254
    3b3c:	89 2b       	or	r24, r25
    3b3e:	80 83       	st	Z, r24
					.Pin_Direction = DIO_PIN_INPUT
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	89 83       	std	Y+1, r24	; 0x01
			};
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
			Local_ErrorStatus = MCAL_DIO_SetPinDirection(&Local_XCKPin);
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <MCAL_SPI_SPIInterruptStatus>:
			if(Copy_SyncStatus == Sync_Slave_Tx_Rx)
				Local_UCSRCValue.UCPOL_Bit0 = CLEAR;
			else
				Local_UCSRCValue.UCPOL_Bit0 = SET;
		}
    3b50:	df 93       	push	r29
    3b52:	cf 93       	push	r28
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <MCAL_SPI_SPIInterruptStatus+0x6>
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	8a 83       	std	Y+2, r24	; 0x02
		UART_Module.Sync_Mode = Copy_SyncStatus;
    3b5c:	19 82       	std	Y+1, r1	; 0x01
	}
    3b5e:	ed e2       	ldi	r30, 0x2D	; 45
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	81 70       	andi	r24, 0x01	; 1
    3b66:	98 2f       	mov	r25, r24
    3b68:	97 95       	ror	r25
    3b6a:	99 27       	eor	r25, r25
    3b6c:	97 95       	ror	r25
    3b6e:	80 81       	ld	r24, Z
    3b70:	8f 77       	andi	r24, 0x7F	; 127
    3b72:	89 2b       	or	r24, r25
    3b74:	80 83       	st	Z, r24
	else
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	89 83       	std	Y+1, r24	; 0x01
		Local_ErrorStatus = E_NOT_OK;
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
	//Set the parity check mode
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	08 95       	ret

00003b86 <MCAL_SPI_ClearSPIInterruptFlag>:
	Local_UCSRCValue.UPM_BITs = Copy_Parity_Check;
	//Set the stop bits number
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <MCAL_SPI_ClearSPIInterruptFlag+0x6>
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
	Local_UCSRCValue.USBS_Bit3 = Copy_Stop_Bits;
    3b90:	1a 82       	std	Y+2, r1	; 0x02
	//Set the data(character) bits number in a frame.
    3b92:	ee e2       	ldi	r30, 0x2E	; 46
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	89 83       	std	Y+1, r24	; 0x01
	Local_UCSRCValue.UCSZ_1_0_BITs = Copy_Data_Bits;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	8a 83       	std	Y+2, r24	; 0x02
	UCSRB_REG.UCSZ2_Bit2 = ((uint8)Copy_Data_Bits) >> 2; //In case of 9-bits data, the UCSZ2 bit UCSRB must be set, otherwise it's cleared
    3b9e:	8a 81       	ldd	r24, Y+2	; 0x02
	//Assign the UCSRC value to it.
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <MCAL_SPI_SetCallBack>:
	UCSRC_REG = Local_UCSRCValue.UCSRC_Register;
	Local_ErrorStatus = Local_ErrorStatus && E_OK;
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <MCAL_SPI_SetCallBack+0x6>
    3bb0:	0f 92       	push	r0
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	9b 83       	std	Y+3, r25	; 0x03
    3bb8:	8a 83       	std	Y+2, r24	; 0x02
	return Local_ErrorStatus;
    3bba:	19 82       	std	Y+1, r1	; 0x01
}
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc0:	90 93 e5 01 	sts	0x01E5, r25
    3bc4:	80 93 e4 01 	sts	0x01E4, r24
Std_ReturnType MCAL_USART_ReadUBRRHorUCSRC(uint8 Copy_RegToBeRead, uint8 *Copy_RegValue)
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
{
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	cf 91       	pop	r28
    3bd2:	df 91       	pop	r29
    3bd4:	08 95       	ret

00003bd6 <ISR>:
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	*Copy_RegValue = UBRRH_REG;
	if(Copy_RegToBeRead == READ_UCSRC)
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	00 d0       	rcall	.+0      	; 0x3bdc <ISR+0x6>
    3bdc:	00 d0       	rcall	.+0      	; 0x3bde <ISR+0x8>
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	9a 83       	std	Y+2, r25	; 0x02
    3be4:	89 83       	std	Y+1, r24	; 0x01
		*Copy_RegValue = UCSRC_REG;
    3be6:	e0 91 e4 01 	lds	r30, 0x01E4
    3bea:	f0 91 e5 01 	lds	r31, 0x01E5
    3bee:	09 95       	icall
	Local_ErrorStatus = E_OK;
    3bf0:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <MCAL_SPI_ClearSPIInterruptFlag>
	return Local_ErrorStatus;
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <MCAL_GlobalINTStatusWrite>:
 */

//External libraries
#include <avr/interrupt.h>
#include "../DIO/DIO_Interface.h"

    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <MCAL_GlobalINTStatusWrite+0x6>
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <MCAL_GlobalINTStatusWrite+0x8>
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
//Private libraries
    3c10:	19 82       	std	Y+1, r1	; 0x01
#include "UART_Interface.h"
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	3c 83       	std	Y+4, r19	; 0x04
    3c1a:	2b 83       	std	Y+3, r18	; 0x03
    3c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	31 f0       	breq	.+12     	; 0x3c30 <MCAL_GlobalINTStatusWrite+0x2e>
    3c24:	2b 81       	ldd	r18, Y+3	; 0x03
    3c26:	3c 81       	ldd	r19, Y+4	; 0x04
    3c28:	21 30       	cpi	r18, 0x01	; 1
    3c2a:	31 05       	cpc	r19, r1
    3c2c:	59 f0       	breq	.+22     	; 0x3c44 <MCAL_GlobalINTStatusWrite+0x42>
    3c2e:	14 c0       	rjmp	.+40     	; 0x3c58 <MCAL_GlobalINTStatusWrite+0x56>
#include "UART_Config.h"

void (*UART_Tx_Complete_Ptr)(void)  = NULL_PTR;
    3c30:	af e5       	ldi	r26, 0x5F	; 95
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	ef e5       	ldi	r30, 0x5F	; 95
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	8f 77       	andi	r24, 0x7F	; 127
    3c3c:	8c 93       	st	X, r24

    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	0b c0       	rjmp	.+22     	; 0x3c5a <MCAL_GlobalINTStatusWrite+0x58>
void (*UART_Rx_Complete_Ptr)(void)  = NULL_PTR;

void (*UART_Tx_BuffEmpty_Ptr)(void) = NULL_PTR;
    3c44:	af e5       	ldi	r26, 0x5F	; 95
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	ef e5       	ldi	r30, 0x5F	; 95
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	80 68       	ori	r24, 0x80	; 128
    3c50:	8c 93       	st	X, r24

    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	01 c0       	rjmp	.+2      	; 0x3c5a <MCAL_GlobalINTStatusWrite+0x58>
Std_ReturnType MCAL_USART_USARTInit()
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3c58:	19 82       	std	Y+1, r1	; 0x01
	Local_ErrorStatus = MCAL_USART_USARTTransmitterStatus(DISABLE);
	Local_ErrorStatus = MCAL_USART_USARTReceiverStatus(DISABLE);
	Local_ErrorStatus = MCAL_USART_SetBaudRate(UART_Module.Copy_SystemClockFreq, UART_Module.BaudRate);
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
	Local_ErrorStatus = MCAL_USART_SetSyncStatusAndFrameFormat(UART_Module.Sync_Mode, UART_Module.Parity_Check,
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <MCAL_GlobalINTStatusRead>:
										  UART_Module.Stop_Bits, UART_Module.Data_Bits);

	return Local_ErrorStatus;
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <MCAL_GlobalINTStatusRead+0x6>
    3c70:	0f 92       	push	r0
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	9b 83       	std	Y+3, r25	; 0x03
    3c78:	8a 83       	std	Y+2, r24	; 0x02
}
    3c7a:	19 82       	std	Y+1, r1	; 0x01

    3c7c:	ef e5       	ldi	r30, 0x5F	; 95
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	88 1f       	adc	r24, r24
    3c84:	88 27       	eor	r24, r24
    3c86:	88 1f       	adc	r24, r24
    3c88:	ea 81       	ldd	r30, Y+2	; 0x02
    3c8a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c8c:	80 83       	st	Z, r24
Std_ReturnType MCAL_USART_USARTTransmitterStatus(uint8 Copy_TxStatus)
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	89 83       	std	Y+1, r24	; 0x01
{
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	08 95       	ret

00003ca0 <MCAL_EXT_Interrupt_EXTIntStatus>:
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;


/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	00 d0       	rcall	.+0      	; 0x3ca6 <MCAL_EXT_Interrupt_EXTIntStatus+0x6>
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <MCAL_EXT_Interrupt_EXTIntStatus+0x8>
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <MCAL_EXT_Interrupt_EXTIntStatus+0xa>
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	9b 83       	std	Y+3, r25	; 0x03
    3cb0:	8a 83       	std	Y+2, r24	; 0x02
    3cb2:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3cb4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_EXTIntStatus == INT_DISABLE)
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	88 23       	and	r24, r24
    3cba:	b9 f4       	brne	.+46     	; 0x3cea <MCAL_EXT_Interrupt_EXTIntStatus+0x4a>
    {
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    3cbc:	ab e5       	ldi	r26, 0x5B	; 91
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	eb e5       	ldi	r30, 0x5B	; 91
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	48 2f       	mov	r20, r24
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	28 2f       	mov	r18, r24
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	02 2e       	mov	r0, r18
    3cd4:	02 c0       	rjmp	.+4      	; 0x3cda <MCAL_EXT_Interrupt_EXTIntStatus+0x3a>
    3cd6:	88 0f       	add	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	0a 94       	dec	r0
    3cdc:	e2 f7       	brpl	.-8      	; 0x3cd6 <MCAL_EXT_Interrupt_EXTIntStatus+0x36>
    3cde:	80 95       	com	r24
    3ce0:	84 23       	and	r24, r20
    3ce2:	8c 93       	st	X, r24
		Local_ErrorStatus = E_OK;
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	89 83       	std	Y+1, r24	; 0x01
    3ce8:	72 c0       	rjmp	.+228    	; 0x3dce <MCAL_EXT_Interrupt_EXTIntStatus+0x12e>
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
    3cea:	8c 81       	ldd	r24, Y+4	; 0x04
    3cec:	81 30       	cpi	r24, 0x01	; 1
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <MCAL_EXT_Interrupt_EXTIntStatus+0x52>
    3cf0:	6e c0       	rjmp	.+220    	; 0x3dce <MCAL_EXT_Interrupt_EXTIntStatus+0x12e>
	{
		switch(Copy_EXTInt.INTNum)
    3cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf4:	28 2f       	mov	r18, r24
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	3e 83       	std	Y+6, r19	; 0x06
    3cfa:	2d 83       	std	Y+5, r18	; 0x05
    3cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3d00:	86 30       	cpi	r24, 0x06	; 6
    3d02:	91 05       	cpc	r25, r1
    3d04:	59 f0       	breq	.+22     	; 0x3d1c <MCAL_EXT_Interrupt_EXTIntStatus+0x7c>
    3d06:	2d 81       	ldd	r18, Y+5	; 0x05
    3d08:	3e 81       	ldd	r19, Y+6	; 0x06
    3d0a:	27 30       	cpi	r18, 0x07	; 7
    3d0c:	31 05       	cpc	r19, r1
    3d0e:	f1 f0       	breq	.+60     	; 0x3d4c <MCAL_EXT_Interrupt_EXTIntStatus+0xac>
    3d10:	8d 81       	ldd	r24, Y+5	; 0x05
    3d12:	9e 81       	ldd	r25, Y+6	; 0x06
    3d14:	85 30       	cpi	r24, 0x05	; 5
    3d16:	91 05       	cpc	r25, r1
    3d18:	99 f1       	breq	.+102    	; 0x3d80 <MCAL_EXT_Interrupt_EXTIntStatus+0xe0>
    3d1a:	58 c0       	rjmp	.+176    	; 0x3dcc <MCAL_EXT_Interrupt_EXTIntStatus+0x12c>
	    {
	    case EXTINT0:
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    3d1c:	e5 e5       	ldi	r30, 0x55	; 85
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	83 70       	andi	r24, 0x03	; 3
    3d24:	98 2f       	mov	r25, r24
    3d26:	93 70       	andi	r25, 0x03	; 3
    3d28:	80 81       	ld	r24, Z
    3d2a:	8c 7f       	andi	r24, 0xFC	; 252
    3d2c:	89 2b       	or	r24, r25
    3d2e:	80 83       	st	Z, r24
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	9b 81       	ldd	r25, Y+3	; 0x03
    3d34:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <MCAL_EXT_Interrupt_ClearEXTIntFlag>
	    	SET_BIT(GICR_REG, EXTINT0);
    3d38:	ab e5       	ldi	r26, 0x5B	; 91
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	eb e5       	ldi	r30, 0x5B	; 91
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	80 64       	ori	r24, 0x40	; 64
    3d44:	8c 93       	st	X, r24
            Local_ErrorStatus = E_OK;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	89 83       	std	Y+1, r24	; 0x01
    3d4a:	41 c0       	rjmp	.+130    	; 0x3dce <MCAL_EXT_Interrupt_EXTIntStatus+0x12e>
	    	break;
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
    3d4c:	e5 e5       	ldi	r30, 0x55	; 85
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	83 70       	andi	r24, 0x03	; 3
    3d54:	83 70       	andi	r24, 0x03	; 3
    3d56:	98 2f       	mov	r25, r24
    3d58:	99 0f       	add	r25, r25
    3d5a:	99 0f       	add	r25, r25
    3d5c:	80 81       	ld	r24, Z
    3d5e:	83 7f       	andi	r24, 0xF3	; 243
    3d60:	89 2b       	or	r24, r25
    3d62:	80 83       	st	Z, r24
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    3d64:	8a 81       	ldd	r24, Y+2	; 0x02
    3d66:	9b 81       	ldd	r25, Y+3	; 0x03
    3d68:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <MCAL_EXT_Interrupt_ClearEXTIntFlag>
	    	SET_BIT(GICR_REG, EXTINT1);
    3d6c:	ab e5       	ldi	r26, 0x5B	; 91
    3d6e:	b0 e0       	ldi	r27, 0x00	; 0
    3d70:	eb e5       	ldi	r30, 0x5B	; 91
    3d72:	f0 e0       	ldi	r31, 0x00	; 0
    3d74:	80 81       	ld	r24, Z
    3d76:	80 68       	ori	r24, 0x80	; 128
    3d78:	8c 93       	st	X, r24
	    	Local_ErrorStatus = E_OK;
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	89 83       	std	Y+1, r24	; 0x01
    3d7e:	27 c0       	rjmp	.+78     	; 0x3dce <MCAL_EXT_Interrupt_EXTIntStatus+0x12e>
	    	break;
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    3d80:	8b 81       	ldd	r24, Y+3	; 0x03
    3d82:	88 23       	and	r24, r24
    3d84:	19 f4       	brne	.+6      	; 0x3d8c <MCAL_EXT_Interrupt_EXTIntStatus+0xec>
    3d86:	8b 81       	ldd	r24, Y+3	; 0x03
    3d88:	81 30       	cpi	r24, 0x01	; 1
    3d8a:	f1 f0       	breq	.+60     	; 0x3dc8 <MCAL_EXT_Interrupt_EXTIntStatus+0x128>
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
    3d8c:	e4 e5       	ldi	r30, 0x54	; 84
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	81 70       	andi	r24, 0x01	; 1
    3d94:	81 70       	andi	r24, 0x01	; 1
    3d96:	81 70       	andi	r24, 0x01	; 1
    3d98:	81 70       	andi	r24, 0x01	; 1
    3d9a:	98 2f       	mov	r25, r24
    3d9c:	92 95       	swap	r25
    3d9e:	99 0f       	add	r25, r25
    3da0:	99 0f       	add	r25, r25
    3da2:	90 7c       	andi	r25, 0xC0	; 192
    3da4:	80 81       	ld	r24, Z
    3da6:	8f 7b       	andi	r24, 0xBF	; 191
    3da8:	89 2b       	or	r24, r25
    3daa:	80 83       	st	Z, r24
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	9b 81       	ldd	r25, Y+3	; 0x03
    3db0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <MCAL_EXT_Interrupt_ClearEXTIntFlag>
	    		SET_BIT(GICR_REG, EXTINT2);
    3db4:	ab e5       	ldi	r26, 0x5B	; 91
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	eb e5       	ldi	r30, 0x5B	; 91
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	80 62       	ori	r24, 0x20	; 32
    3dc0:	8c 93       	st	X, r24
	    	    Local_ErrorStatus = E_OK;
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	89 83       	std	Y+1, r24	; 0x01
    3dc6:	03 c0       	rjmp	.+6      	; 0x3dce <MCAL_EXT_Interrupt_EXTIntStatus+0x12e>
	    	}
	    	else
	    	{
	    		Local_ErrorStatus = E_NOT_OK;
    3dc8:	19 82       	std	Y+1, r1	; 0x01
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <MCAL_EXT_Interrupt_EXTIntStatus+0x12e>
	    	}
	    	break;
	    default:
	    	Local_ErrorStatus = E_NOT_OK;
    3dcc:	19 82       	std	Y+1, r1	; 0x01
	}
	}
	return Local_ErrorStatus;
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dd0:	26 96       	adiw	r28, 0x06	; 6
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	de bf       	out	0x3e, r29	; 62
    3dd8:	0f be       	out	0x3f, r0	; 63
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	08 95       	ret

00003de2 <MCAL_EXT_Interrupt_ReadEXTIntFlag>:
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
{
    3de2:	df 93       	push	r29
    3de4:	cf 93       	push	r28
    3de6:	00 d0       	rcall	.+0      	; 0x3de8 <MCAL_EXT_Interrupt_ReadEXTIntFlag+0x6>
    3de8:	00 d0       	rcall	.+0      	; 0x3dea <MCAL_EXT_Interrupt_ReadEXTIntFlag+0x8>
    3dea:	0f 92       	push	r0
    3dec:	cd b7       	in	r28, 0x3d	; 61
    3dee:	de b7       	in	r29, 0x3e	; 62
    3df0:	9b 83       	std	Y+3, r25	; 0x03
    3df2:	8a 83       	std	Y+2, r24	; 0x02
    3df4:	7d 83       	std	Y+5, r23	; 0x05
    3df6:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3df8:	19 82       	std	Y+1, r1	; 0x01
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    3dfa:	ea e5       	ldi	r30, 0x5A	; 90
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	80 81       	ld	r24, Z
    3e00:	28 2f       	mov	r18, r24
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	88 2f       	mov	r24, r24
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	a9 01       	movw	r20, r18
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <MCAL_EXT_Interrupt_ReadEXTIntFlag+0x30>
    3e0e:	55 95       	asr	r21
    3e10:	47 95       	ror	r20
    3e12:	8a 95       	dec	r24
    3e14:	e2 f7       	brpl	.-8      	; 0x3e0e <MCAL_EXT_Interrupt_ReadEXTIntFlag+0x2c>
    3e16:	ca 01       	movw	r24, r20
    3e18:	81 70       	andi	r24, 0x01	; 1
    3e1a:	ec 81       	ldd	r30, Y+4	; 0x04
    3e1c:	fd 81       	ldd	r31, Y+5	; 0x05
    3e1e:	80 83       	st	Z, r24
	Local_ErrorStatus = E_OK;
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	08 95       	ret

00003e36 <MCAL_EXT_Interrupt_ClearEXTIntFlag>:
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <MCAL_EXT_Interrupt_ClearEXTIntFlag+0x6>
    3e3c:	0f 92       	push	r0
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9b 83       	std	Y+3, r25	; 0x03
    3e44:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3e46:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    3e48:	aa e5       	ldi	r26, 0x5A	; 90
    3e4a:	b0 e0       	ldi	r27, 0x00	; 0
    3e4c:	ea e5       	ldi	r30, 0x5A	; 90
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	48 2f       	mov	r20, r24
    3e54:	8a 81       	ldd	r24, Y+2	; 0x02
    3e56:	28 2f       	mov	r18, r24
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	02 2e       	mov	r0, r18
    3e60:	02 c0       	rjmp	.+4      	; 0x3e66 <MCAL_EXT_Interrupt_ClearEXTIntFlag+0x30>
    3e62:	88 0f       	add	r24, r24
    3e64:	99 1f       	adc	r25, r25
    3e66:	0a 94       	dec	r0
    3e68:	e2 f7       	brpl	.-8      	; 0x3e62 <MCAL_EXT_Interrupt_ClearEXTIntFlag+0x2c>
    3e6a:	84 2b       	or	r24, r20
    3e6c:	8c 93       	st	X, r24
	Local_ErrorStatus = E_OK;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <MCAL_EXT_Interrupt_SetEXTINT0CallBack>:
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	00 d0       	rcall	.+0      	; 0x3e86 <MCAL_EXT_Interrupt_SetEXTINT0CallBack+0x6>
    3e86:	0f 92       	push	r0
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	9b 83       	std	Y+3, r25	; 0x03
    3e8e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3e90:	19 82       	std	Y+1, r1	; 0x01
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    3e92:	8a 81       	ldd	r24, Y+2	; 0x02
    3e94:	9b 81       	ldd	r25, Y+3	; 0x03
    3e96:	90 93 e7 01 	sts	0x01E7, r25
    3e9a:	80 93 e6 01 	sts	0x01E6, r24
	Local_ErrorStatus = E_OK;
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <MCAL_EXT_Interrupt_SetEXTINT1CallBack>:
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
{
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	00 d0       	rcall	.+0      	; 0x3eb6 <MCAL_EXT_Interrupt_SetEXTINT1CallBack+0x6>
    3eb6:	0f 92       	push	r0
    3eb8:	cd b7       	in	r28, 0x3d	; 61
    3eba:	de b7       	in	r29, 0x3e	; 62
    3ebc:	9b 83       	std	Y+3, r25	; 0x03
    3ebe:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3ec0:	19 82       	std	Y+1, r1	; 0x01
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
    3ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec6:	90 93 e9 01 	sts	0x01E9, r25
    3eca:	80 93 e8 01 	sts	0x01E8, r24
	Local_ErrorStatus = E_OK;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	cf 91       	pop	r28
    3edc:	df 91       	pop	r29
    3ede:	08 95       	ret

00003ee0 <MCAL_EXT_Interrupt_SetEXTINT2CallBack>:
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
{
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	00 d0       	rcall	.+0      	; 0x3ee6 <MCAL_EXT_Interrupt_SetEXTINT2CallBack+0x6>
    3ee6:	0f 92       	push	r0
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
    3eec:	9b 83       	std	Y+3, r25	; 0x03
    3eee:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    3ef0:	19 82       	std	Y+1, r1	; 0x01
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
    3ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef6:	90 93 eb 01 	sts	0x01EB, r25
    3efa:	80 93 ea 01 	sts	0x01EA, r24
	Local_ErrorStatus = E_OK;
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <__vector_1>:

ISR(INT0_vect)
{
    3f10:	1f 92       	push	r1
    3f12:	0f 92       	push	r0
    3f14:	0f b6       	in	r0, 0x3f	; 63
    3f16:	0f 92       	push	r0
    3f18:	11 24       	eor	r1, r1
    3f1a:	2f 93       	push	r18
    3f1c:	3f 93       	push	r19
    3f1e:	4f 93       	push	r20
    3f20:	5f 93       	push	r21
    3f22:	6f 93       	push	r22
    3f24:	7f 93       	push	r23
    3f26:	8f 93       	push	r24
    3f28:	9f 93       	push	r25
    3f2a:	af 93       	push	r26
    3f2c:	bf 93       	push	r27
    3f2e:	ef 93       	push	r30
    3f30:	ff 93       	push	r31
    3f32:	df 93       	push	r29
    3f34:	cf 93       	push	r28
    3f36:	cd b7       	in	r28, 0x3d	; 61
    3f38:	de b7       	in	r29, 0x3e	; 62
	EXT_Interrupt_EXTINT0_CallBack();
    3f3a:	e0 91 e6 01 	lds	r30, 0x01E6
    3f3e:	f0 91 e7 01 	lds	r31, 0x01E7
    3f42:	09 95       	icall
}
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	ff 91       	pop	r31
    3f4a:	ef 91       	pop	r30
    3f4c:	bf 91       	pop	r27
    3f4e:	af 91       	pop	r26
    3f50:	9f 91       	pop	r25
    3f52:	8f 91       	pop	r24
    3f54:	7f 91       	pop	r23
    3f56:	6f 91       	pop	r22
    3f58:	5f 91       	pop	r21
    3f5a:	4f 91       	pop	r20
    3f5c:	3f 91       	pop	r19
    3f5e:	2f 91       	pop	r18
    3f60:	0f 90       	pop	r0
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	0f 90       	pop	r0
    3f66:	1f 90       	pop	r1
    3f68:	18 95       	reti

00003f6a <__vector_2>:

ISR(INT1_vect)
{
    3f6a:	1f 92       	push	r1
    3f6c:	0f 92       	push	r0
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	0f 92       	push	r0
    3f72:	11 24       	eor	r1, r1
    3f74:	2f 93       	push	r18
    3f76:	3f 93       	push	r19
    3f78:	4f 93       	push	r20
    3f7a:	5f 93       	push	r21
    3f7c:	6f 93       	push	r22
    3f7e:	7f 93       	push	r23
    3f80:	8f 93       	push	r24
    3f82:	9f 93       	push	r25
    3f84:	af 93       	push	r26
    3f86:	bf 93       	push	r27
    3f88:	ef 93       	push	r30
    3f8a:	ff 93       	push	r31
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
	EXT_Interrupt_EXTINT1_CallBack();
    3f94:	e0 91 e8 01 	lds	r30, 0x01E8
    3f98:	f0 91 e9 01 	lds	r31, 0x01E9
    3f9c:	09 95       	icall
}
    3f9e:	cf 91       	pop	r28
    3fa0:	df 91       	pop	r29
    3fa2:	ff 91       	pop	r31
    3fa4:	ef 91       	pop	r30
    3fa6:	bf 91       	pop	r27
    3fa8:	af 91       	pop	r26
    3faa:	9f 91       	pop	r25
    3fac:	8f 91       	pop	r24
    3fae:	7f 91       	pop	r23
    3fb0:	6f 91       	pop	r22
    3fb2:	5f 91       	pop	r21
    3fb4:	4f 91       	pop	r20
    3fb6:	3f 91       	pop	r19
    3fb8:	2f 91       	pop	r18
    3fba:	0f 90       	pop	r0
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	0f 90       	pop	r0
    3fc0:	1f 90       	pop	r1
    3fc2:	18 95       	reti

00003fc4 <__vector_3>:

ISR(INT2_vect)
{
    3fc4:	1f 92       	push	r1
    3fc6:	0f 92       	push	r0
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	0f 92       	push	r0
    3fcc:	11 24       	eor	r1, r1
    3fce:	2f 93       	push	r18
    3fd0:	3f 93       	push	r19
    3fd2:	4f 93       	push	r20
    3fd4:	5f 93       	push	r21
    3fd6:	6f 93       	push	r22
    3fd8:	7f 93       	push	r23
    3fda:	8f 93       	push	r24
    3fdc:	9f 93       	push	r25
    3fde:	af 93       	push	r26
    3fe0:	bf 93       	push	r27
    3fe2:	ef 93       	push	r30
    3fe4:	ff 93       	push	r31
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
	EXT_Interrupt_EXTINT2_CallBack();
    3fee:	e0 91 ea 01 	lds	r30, 0x01EA
    3ff2:	f0 91 eb 01 	lds	r31, 0x01EB
    3ff6:	09 95       	icall
}
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	ff 91       	pop	r31
    3ffe:	ef 91       	pop	r30
    4000:	bf 91       	pop	r27
    4002:	af 91       	pop	r26
    4004:	9f 91       	pop	r25
    4006:	8f 91       	pop	r24
    4008:	7f 91       	pop	r23
    400a:	6f 91       	pop	r22
    400c:	5f 91       	pop	r21
    400e:	4f 91       	pop	r20
    4010:	3f 91       	pop	r19
    4012:	2f 91       	pop	r18
    4014:	0f 90       	pop	r0
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	0f 90       	pop	r0
    401a:	1f 90       	pop	r1
    401c:	18 95       	reti

0000401e <MCAL_DIO_SetPinDirection>:
#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
    4026:	2d 97       	sbiw	r28, 0x0d	; 13
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	cd bf       	out	0x3d, r28	; 61
    4032:	9b 83       	std	Y+3, r25	; 0x03
    4034:	8a 83       	std	Y+2, r24	; 0x02
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;
    4036:	19 82       	std	Y+1, r1	; 0x01

    4038:	ea 81       	ldd	r30, Y+2	; 0x02
    403a:	fb 81       	ldd	r31, Y+3	; 0x03
    403c:	80 81       	ld	r24, Z
    403e:	86 95       	lsr	r24
    4040:	86 95       	lsr	r24
    4042:	87 70       	andi	r24, 0x07	; 7
    4044:	88 2f       	mov	r24, r24
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	88 30       	cpi	r24, 0x08	; 8
    404a:	91 05       	cpc	r25, r1
    404c:	14 f0       	brlt	.+4      	; 0x4052 <MCAL_DIO_SetPinDirection+0x34>

/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    404e:	19 82       	std	Y+1, r1	; 0x01
    4050:	c6 c2       	rjmp	.+1420   	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	if(Copy_EXTIntStatus == INT_DISABLE)
    4052:	ea 81       	ldd	r30, Y+2	; 0x02
    4054:	fb 81       	ldd	r31, Y+3	; 0x03
    4056:	80 81       	ld	r24, Z
    4058:	83 70       	andi	r24, 0x03	; 3
    405a:	28 2f       	mov	r18, r24
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	3d 87       	std	Y+13, r19	; 0x0d
    4060:	2c 87       	std	Y+12, r18	; 0x0c
    4062:	8c 85       	ldd	r24, Y+12	; 0x0c
    4064:	9d 85       	ldd	r25, Y+13	; 0x0d
    4066:	81 30       	cpi	r24, 0x01	; 1
    4068:	91 05       	cpc	r25, r1
    406a:	09 f4       	brne	.+2      	; 0x406e <MCAL_DIO_SetPinDirection+0x50>
    406c:	bf c0       	rjmp	.+382    	; 0x41ec <MCAL_DIO_SetPinDirection+0x1ce>
    406e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4070:	3d 85       	ldd	r19, Y+13	; 0x0d
    4072:	22 30       	cpi	r18, 0x02	; 2
    4074:	31 05       	cpc	r19, r1
    4076:	2c f4       	brge	.+10     	; 0x4082 <MCAL_DIO_SetPinDirection+0x64>
    4078:	8c 85       	ldd	r24, Y+12	; 0x0c
    407a:	9d 85       	ldd	r25, Y+13	; 0x0d
    407c:	00 97       	sbiw	r24, 0x00	; 0
    407e:	71 f0       	breq	.+28     	; 0x409c <MCAL_DIO_SetPinDirection+0x7e>
    4080:	ad c2       	rjmp	.+1370   	; 0x45dc <MCAL_DIO_SetPinDirection+0x5be>
    4082:	2c 85       	ldd	r18, Y+12	; 0x0c
    4084:	3d 85       	ldd	r19, Y+13	; 0x0d
    4086:	22 30       	cpi	r18, 0x02	; 2
    4088:	31 05       	cpc	r19, r1
    408a:	09 f4       	brne	.+2      	; 0x408e <MCAL_DIO_SetPinDirection+0x70>
    408c:	57 c1       	rjmp	.+686    	; 0x433c <MCAL_DIO_SetPinDirection+0x31e>
    408e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4090:	9d 85       	ldd	r25, Y+13	; 0x0d
    4092:	83 30       	cpi	r24, 0x03	; 3
    4094:	91 05       	cpc	r25, r1
    4096:	09 f4       	brne	.+2      	; 0x409a <MCAL_DIO_SetPinDirection+0x7c>
    4098:	f9 c1       	rjmp	.+1010   	; 0x448c <MCAL_DIO_SetPinDirection+0x46e>
    409a:	a0 c2       	rjmp	.+1344   	; 0x45dc <MCAL_DIO_SetPinDirection+0x5be>
    {
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
		Local_ErrorStatus = E_OK;
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	89 83       	std	Y+1, r24	; 0x01
    }
    40a0:	ea 81       	ldd	r30, Y+2	; 0x02
    40a2:	fb 81       	ldd	r31, Y+3	; 0x03
    40a4:	80 81       	ld	r24, Z
    40a6:	82 95       	swap	r24
    40a8:	86 95       	lsr	r24
    40aa:	87 70       	andi	r24, 0x07	; 7
    40ac:	83 70       	andi	r24, 0x03	; 3
    40ae:	28 2f       	mov	r18, r24
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	3b 87       	std	Y+11, r19	; 0x0b
    40b4:	2a 87       	std	Y+10, r18	; 0x0a
    40b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	91 05       	cpc	r25, r1
    40be:	21 f1       	breq	.+72     	; 0x4108 <MCAL_DIO_SetPinDirection+0xea>
    40c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    40c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    40c4:	22 30       	cpi	r18, 0x02	; 2
    40c6:	31 05       	cpc	r19, r1
    40c8:	09 f4       	brne	.+2      	; 0x40cc <MCAL_DIO_SetPinDirection+0xae>
    40ca:	56 c0       	rjmp	.+172    	; 0x4178 <MCAL_DIO_SetPinDirection+0x15a>
    40cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <MCAL_DIO_SetPinDirection+0xb8>
    40d4:	89 c0       	rjmp	.+274    	; 0x41e8 <MCAL_DIO_SetPinDirection+0x1ca>
	else if(Copy_EXTIntStatus == INT_ENABLE)
	{
		switch(Copy_EXTInt.INTNum)
    40d6:	aa e3       	ldi	r26, 0x3A	; 58
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	ea e3       	ldi	r30, 0x3A	; 58
    40dc:	f0 e0       	ldi	r31, 0x00	; 0
    40de:	80 81       	ld	r24, Z
    40e0:	48 2f       	mov	r20, r24
    40e2:	ea 81       	ldd	r30, Y+2	; 0x02
    40e4:	fb 81       	ldd	r31, Y+3	; 0x03
    40e6:	80 81       	ld	r24, Z
    40e8:	86 95       	lsr	r24
    40ea:	86 95       	lsr	r24
    40ec:	87 70       	andi	r24, 0x07	; 7
    40ee:	28 2f       	mov	r18, r24
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	02 2e       	mov	r0, r18
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <MCAL_DIO_SetPinDirection+0xe0>
    40fa:	88 0f       	add	r24, r24
    40fc:	99 1f       	adc	r25, r25
    40fe:	0a 94       	dec	r0
    4100:	e2 f7       	brpl	.-8      	; 0x40fa <MCAL_DIO_SetPinDirection+0xdc>
    4102:	84 2b       	or	r24, r20
    4104:	8c 93       	st	X, r24
    4106:	6b c2       	rjmp	.+1238   	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	    {
	    case EXTINT0:
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    4108:	aa e3       	ldi	r26, 0x3A	; 58
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	ea e3       	ldi	r30, 0x3A	; 58
    410e:	f0 e0       	ldi	r31, 0x00	; 0
    4110:	80 81       	ld	r24, Z
    4112:	48 2f       	mov	r20, r24
    4114:	ea 81       	ldd	r30, Y+2	; 0x02
    4116:	fb 81       	ldd	r31, Y+3	; 0x03
    4118:	80 81       	ld	r24, Z
    411a:	86 95       	lsr	r24
    411c:	86 95       	lsr	r24
    411e:	87 70       	andi	r24, 0x07	; 7
    4120:	28 2f       	mov	r18, r24
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	02 c0       	rjmp	.+4      	; 0x412e <MCAL_DIO_SetPinDirection+0x110>
    412a:	88 0f       	add	r24, r24
    412c:	99 1f       	adc	r25, r25
    412e:	2a 95       	dec	r18
    4130:	e2 f7       	brpl	.-8      	; 0x412a <MCAL_DIO_SetPinDirection+0x10c>
    4132:	80 95       	com	r24
    4134:	84 23       	and	r24, r20
    4136:	8c 93       	st	X, r24
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    4138:	ab e3       	ldi	r26, 0x3B	; 59
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	eb e3       	ldi	r30, 0x3B	; 59
    413e:	f0 e0       	ldi	r31, 0x00	; 0
    4140:	80 81       	ld	r24, Z
    4142:	48 2f       	mov	r20, r24
    4144:	ea 81       	ldd	r30, Y+2	; 0x02
    4146:	fb 81       	ldd	r31, Y+3	; 0x03
    4148:	80 81       	ld	r24, Z
    414a:	86 95       	lsr	r24
    414c:	86 95       	lsr	r24
    414e:	87 70       	andi	r24, 0x07	; 7
    4150:	28 2f       	mov	r18, r24
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	02 2e       	mov	r0, r18
    415a:	02 c0       	rjmp	.+4      	; 0x4160 <MCAL_DIO_SetPinDirection+0x142>
    415c:	88 0f       	add	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	0a 94       	dec	r0
    4162:	e2 f7       	brpl	.-8      	; 0x415c <MCAL_DIO_SetPinDirection+0x13e>
    4164:	84 2b       	or	r24, r20
    4166:	8c 93       	st	X, r24
	    	SET_BIT(GICR_REG, EXTINT0);
    4168:	a0 e5       	ldi	r26, 0x50	; 80
    416a:	b0 e0       	ldi	r27, 0x00	; 0
    416c:	e0 e5       	ldi	r30, 0x50	; 80
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	80 81       	ld	r24, Z
    4172:	84 60       	ori	r24, 0x04	; 4
    4174:	8c 93       	st	X, r24
    4176:	33 c2       	rjmp	.+1126   	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
            Local_ErrorStatus = E_OK;
	    	break;
	    case EXTINT1:
    4178:	aa e3       	ldi	r26, 0x3A	; 58
    417a:	b0 e0       	ldi	r27, 0x00	; 0
    417c:	ea e3       	ldi	r30, 0x3A	; 58
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	80 81       	ld	r24, Z
    4182:	48 2f       	mov	r20, r24
    4184:	ea 81       	ldd	r30, Y+2	; 0x02
    4186:	fb 81       	ldd	r31, Y+3	; 0x03
    4188:	80 81       	ld	r24, Z
    418a:	86 95       	lsr	r24
    418c:	86 95       	lsr	r24
    418e:	87 70       	andi	r24, 0x07	; 7
    4190:	28 2f       	mov	r18, r24
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	02 c0       	rjmp	.+4      	; 0x419e <MCAL_DIO_SetPinDirection+0x180>
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	2a 95       	dec	r18
    41a0:	e2 f7       	brpl	.-8      	; 0x419a <MCAL_DIO_SetPinDirection+0x17c>
    41a2:	80 95       	com	r24
    41a4:	84 23       	and	r24, r20
    41a6:	8c 93       	st	X, r24
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
    41a8:	ab e3       	ldi	r26, 0x3B	; 59
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	eb e3       	ldi	r30, 0x3B	; 59
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	80 81       	ld	r24, Z
    41b2:	48 2f       	mov	r20, r24
    41b4:	ea 81       	ldd	r30, Y+2	; 0x02
    41b6:	fb 81       	ldd	r31, Y+3	; 0x03
    41b8:	80 81       	ld	r24, Z
    41ba:	86 95       	lsr	r24
    41bc:	86 95       	lsr	r24
    41be:	87 70       	andi	r24, 0x07	; 7
    41c0:	28 2f       	mov	r18, r24
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	02 2e       	mov	r0, r18
    41ca:	02 c0       	rjmp	.+4      	; 0x41d0 <MCAL_DIO_SetPinDirection+0x1b2>
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	0a 94       	dec	r0
    41d2:	e2 f7       	brpl	.-8      	; 0x41cc <MCAL_DIO_SetPinDirection+0x1ae>
    41d4:	84 2b       	or	r24, r20
    41d6:	8c 93       	st	X, r24
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    41d8:	a0 e5       	ldi	r26, 0x50	; 80
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	e0 e5       	ldi	r30, 0x50	; 80
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	8b 7f       	andi	r24, 0xFB	; 251
    41e4:	8c 93       	st	X, r24
    41e6:	fb c1       	rjmp	.+1014   	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	    	SET_BIT(GICR_REG, EXTINT1);
	    	Local_ErrorStatus = E_OK;
	    	break;
    41e8:	19 82       	std	Y+1, r1	; 0x01
    41ea:	f9 c1       	rjmp	.+1010   	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	89 83       	std	Y+1, r24	; 0x01
	    		SET_BIT(GICR_REG, EXTINT2);
    41f0:	ea 81       	ldd	r30, Y+2	; 0x02
    41f2:	fb 81       	ldd	r31, Y+3	; 0x03
    41f4:	80 81       	ld	r24, Z
    41f6:	82 95       	swap	r24
    41f8:	86 95       	lsr	r24
    41fa:	87 70       	andi	r24, 0x07	; 7
    41fc:	83 70       	andi	r24, 0x03	; 3
    41fe:	28 2f       	mov	r18, r24
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	39 87       	std	Y+9, r19	; 0x09
    4204:	28 87       	std	Y+8, r18	; 0x08
    4206:	88 85       	ldd	r24, Y+8	; 0x08
    4208:	99 85       	ldd	r25, Y+9	; 0x09
    420a:	81 30       	cpi	r24, 0x01	; 1
    420c:	91 05       	cpc	r25, r1
    420e:	21 f1       	breq	.+72     	; 0x4258 <MCAL_DIO_SetPinDirection+0x23a>
    4210:	28 85       	ldd	r18, Y+8	; 0x08
    4212:	39 85       	ldd	r19, Y+9	; 0x09
    4214:	22 30       	cpi	r18, 0x02	; 2
    4216:	31 05       	cpc	r19, r1
    4218:	09 f4       	brne	.+2      	; 0x421c <MCAL_DIO_SetPinDirection+0x1fe>
    421a:	56 c0       	rjmp	.+172    	; 0x42c8 <MCAL_DIO_SetPinDirection+0x2aa>
    421c:	88 85       	ldd	r24, Y+8	; 0x08
    421e:	99 85       	ldd	r25, Y+9	; 0x09
    4220:	00 97       	sbiw	r24, 0x00	; 0
    4222:	09 f0       	breq	.+2      	; 0x4226 <MCAL_DIO_SetPinDirection+0x208>
    4224:	89 c0       	rjmp	.+274    	; 0x4338 <MCAL_DIO_SetPinDirection+0x31a>
	    	    Local_ErrorStatus = E_OK;
	    	}
	    	else
    4226:	a7 e3       	ldi	r26, 0x37	; 55
    4228:	b0 e0       	ldi	r27, 0x00	; 0
    422a:	e7 e3       	ldi	r30, 0x37	; 55
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	80 81       	ld	r24, Z
    4230:	48 2f       	mov	r20, r24
    4232:	ea 81       	ldd	r30, Y+2	; 0x02
    4234:	fb 81       	ldd	r31, Y+3	; 0x03
    4236:	80 81       	ld	r24, Z
    4238:	86 95       	lsr	r24
    423a:	86 95       	lsr	r24
    423c:	87 70       	andi	r24, 0x07	; 7
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	02 2e       	mov	r0, r18
    4248:	02 c0       	rjmp	.+4      	; 0x424e <MCAL_DIO_SetPinDirection+0x230>
    424a:	88 0f       	add	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	0a 94       	dec	r0
    4250:	e2 f7       	brpl	.-8      	; 0x424a <MCAL_DIO_SetPinDirection+0x22c>
    4252:	84 2b       	or	r24, r20
    4254:	8c 93       	st	X, r24
    4256:	c3 c1       	rjmp	.+902    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	    	{
	    		Local_ErrorStatus = E_NOT_OK;
	    	}
    4258:	a7 e3       	ldi	r26, 0x37	; 55
    425a:	b0 e0       	ldi	r27, 0x00	; 0
    425c:	e7 e3       	ldi	r30, 0x37	; 55
    425e:	f0 e0       	ldi	r31, 0x00	; 0
    4260:	80 81       	ld	r24, Z
    4262:	48 2f       	mov	r20, r24
    4264:	ea 81       	ldd	r30, Y+2	; 0x02
    4266:	fb 81       	ldd	r31, Y+3	; 0x03
    4268:	80 81       	ld	r24, Z
    426a:	86 95       	lsr	r24
    426c:	86 95       	lsr	r24
    426e:	87 70       	andi	r24, 0x07	; 7
    4270:	28 2f       	mov	r18, r24
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	02 c0       	rjmp	.+4      	; 0x427e <MCAL_DIO_SetPinDirection+0x260>
    427a:	88 0f       	add	r24, r24
    427c:	99 1f       	adc	r25, r25
    427e:	2a 95       	dec	r18
    4280:	e2 f7       	brpl	.-8      	; 0x427a <MCAL_DIO_SetPinDirection+0x25c>
    4282:	80 95       	com	r24
    4284:	84 23       	and	r24, r20
    4286:	8c 93       	st	X, r24
	    	break;
    4288:	a8 e3       	ldi	r26, 0x38	; 56
    428a:	b0 e0       	ldi	r27, 0x00	; 0
    428c:	e8 e3       	ldi	r30, 0x38	; 56
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	80 81       	ld	r24, Z
    4292:	48 2f       	mov	r20, r24
    4294:	ea 81       	ldd	r30, Y+2	; 0x02
    4296:	fb 81       	ldd	r31, Y+3	; 0x03
    4298:	80 81       	ld	r24, Z
    429a:	86 95       	lsr	r24
    429c:	86 95       	lsr	r24
    429e:	87 70       	andi	r24, 0x07	; 7
    42a0:	28 2f       	mov	r18, r24
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	02 2e       	mov	r0, r18
    42aa:	02 c0       	rjmp	.+4      	; 0x42b0 <MCAL_DIO_SetPinDirection+0x292>
    42ac:	88 0f       	add	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	0a 94       	dec	r0
    42b2:	e2 f7       	brpl	.-8      	; 0x42ac <MCAL_DIO_SetPinDirection+0x28e>
    42b4:	84 2b       	or	r24, r20
    42b6:	8c 93       	st	X, r24
	    default:
    42b8:	a0 e5       	ldi	r26, 0x50	; 80
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	e0 e5       	ldi	r30, 0x50	; 80
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	80 81       	ld	r24, Z
    42c2:	84 60       	ori	r24, 0x04	; 4
    42c4:	8c 93       	st	X, r24
    42c6:	8b c1       	rjmp	.+790    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	    	Local_ErrorStatus = E_NOT_OK;
	}
	}
    42c8:	a7 e3       	ldi	r26, 0x37	; 55
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	e7 e3       	ldi	r30, 0x37	; 55
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	48 2f       	mov	r20, r24
    42d4:	ea 81       	ldd	r30, Y+2	; 0x02
    42d6:	fb 81       	ldd	r31, Y+3	; 0x03
    42d8:	80 81       	ld	r24, Z
    42da:	86 95       	lsr	r24
    42dc:	86 95       	lsr	r24
    42de:	87 70       	andi	r24, 0x07	; 7
    42e0:	28 2f       	mov	r18, r24
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <MCAL_DIO_SetPinDirection+0x2d0>
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	2a 95       	dec	r18
    42f0:	e2 f7       	brpl	.-8      	; 0x42ea <MCAL_DIO_SetPinDirection+0x2cc>
    42f2:	80 95       	com	r24
    42f4:	84 23       	and	r24, r20
    42f6:	8c 93       	st	X, r24
	return Local_ErrorStatus;
    42f8:	a8 e3       	ldi	r26, 0x38	; 56
    42fa:	b0 e0       	ldi	r27, 0x00	; 0
    42fc:	e8 e3       	ldi	r30, 0x38	; 56
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	48 2f       	mov	r20, r24
    4304:	ea 81       	ldd	r30, Y+2	; 0x02
    4306:	fb 81       	ldd	r31, Y+3	; 0x03
    4308:	80 81       	ld	r24, Z
    430a:	86 95       	lsr	r24
    430c:	86 95       	lsr	r24
    430e:	87 70       	andi	r24, 0x07	; 7
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	02 2e       	mov	r0, r18
    431a:	02 c0       	rjmp	.+4      	; 0x4320 <MCAL_DIO_SetPinDirection+0x302>
    431c:	88 0f       	add	r24, r24
    431e:	99 1f       	adc	r25, r25
    4320:	0a 94       	dec	r0
    4322:	e2 f7       	brpl	.-8      	; 0x431c <MCAL_DIO_SetPinDirection+0x2fe>
    4324:	84 2b       	or	r24, r20
    4326:	8c 93       	st	X, r24
}
    4328:	a0 e5       	ldi	r26, 0x50	; 80
    432a:	b0 e0       	ldi	r27, 0x00	; 0
    432c:	e0 e5       	ldi	r30, 0x50	; 80
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	80 81       	ld	r24, Z
    4332:	8b 7f       	andi	r24, 0xFB	; 251
    4334:	8c 93       	st	X, r24
    4336:	53 c1       	rjmp	.+678    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    4338:	19 82       	std	Y+1, r1	; 0x01
    433a:	51 c1       	rjmp	.+674    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	89 83       	std	Y+1, r24	; 0x01
{
    4340:	ea 81       	ldd	r30, Y+2	; 0x02
    4342:	fb 81       	ldd	r31, Y+3	; 0x03
    4344:	80 81       	ld	r24, Z
    4346:	82 95       	swap	r24
    4348:	86 95       	lsr	r24
    434a:	87 70       	andi	r24, 0x07	; 7
    434c:	83 70       	andi	r24, 0x03	; 3
    434e:	28 2f       	mov	r18, r24
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	3f 83       	std	Y+7, r19	; 0x07
    4354:	2e 83       	std	Y+6, r18	; 0x06
    4356:	8e 81       	ldd	r24, Y+6	; 0x06
    4358:	9f 81       	ldd	r25, Y+7	; 0x07
    435a:	81 30       	cpi	r24, 0x01	; 1
    435c:	91 05       	cpc	r25, r1
    435e:	21 f1       	breq	.+72     	; 0x43a8 <MCAL_DIO_SetPinDirection+0x38a>
    4360:	2e 81       	ldd	r18, Y+6	; 0x06
    4362:	3f 81       	ldd	r19, Y+7	; 0x07
    4364:	22 30       	cpi	r18, 0x02	; 2
    4366:	31 05       	cpc	r19, r1
    4368:	09 f4       	brne	.+2      	; 0x436c <MCAL_DIO_SetPinDirection+0x34e>
    436a:	56 c0       	rjmp	.+172    	; 0x4418 <MCAL_DIO_SetPinDirection+0x3fa>
    436c:	8e 81       	ldd	r24, Y+6	; 0x06
    436e:	9f 81       	ldd	r25, Y+7	; 0x07
    4370:	00 97       	sbiw	r24, 0x00	; 0
    4372:	09 f0       	breq	.+2      	; 0x4376 <MCAL_DIO_SetPinDirection+0x358>
    4374:	89 c0       	rjmp	.+274    	; 0x4488 <MCAL_DIO_SetPinDirection+0x46a>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
    4376:	a4 e3       	ldi	r26, 0x34	; 52
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e4 e3       	ldi	r30, 0x34	; 52
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	48 2f       	mov	r20, r24
    4382:	ea 81       	ldd	r30, Y+2	; 0x02
    4384:	fb 81       	ldd	r31, Y+3	; 0x03
    4386:	80 81       	ld	r24, Z
    4388:	86 95       	lsr	r24
    438a:	86 95       	lsr	r24
    438c:	87 70       	andi	r24, 0x07	; 7
    438e:	28 2f       	mov	r18, r24
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	02 2e       	mov	r0, r18
    4398:	02 c0       	rjmp	.+4      	; 0x439e <MCAL_DIO_SetPinDirection+0x380>
    439a:	88 0f       	add	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	0a 94       	dec	r0
    43a0:	e2 f7       	brpl	.-8      	; 0x439a <MCAL_DIO_SetPinDirection+0x37c>
    43a2:	84 2b       	or	r24, r20
    43a4:	8c 93       	st	X, r24
    43a6:	1b c1       	rjmp	.+566    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	return Local_ErrorStatus;
}
/*SetCallBack APIs for EXTINTx */
    43a8:	a4 e3       	ldi	r26, 0x34	; 52
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	e4 e3       	ldi	r30, 0x34	; 52
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	80 81       	ld	r24, Z
    43b2:	48 2f       	mov	r20, r24
    43b4:	ea 81       	ldd	r30, Y+2	; 0x02
    43b6:	fb 81       	ldd	r31, Y+3	; 0x03
    43b8:	80 81       	ld	r24, Z
    43ba:	86 95       	lsr	r24
    43bc:	86 95       	lsr	r24
    43be:	87 70       	andi	r24, 0x07	; 7
    43c0:	28 2f       	mov	r18, r24
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	02 c0       	rjmp	.+4      	; 0x43ce <MCAL_DIO_SetPinDirection+0x3b0>
    43ca:	88 0f       	add	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	2a 95       	dec	r18
    43d0:	e2 f7       	brpl	.-8      	; 0x43ca <MCAL_DIO_SetPinDirection+0x3ac>
    43d2:	80 95       	com	r24
    43d4:	84 23       	and	r24, r20
    43d6:	8c 93       	st	X, r24
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    43d8:	a5 e3       	ldi	r26, 0x35	; 53
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	e5 e3       	ldi	r30, 0x35	; 53
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	80 81       	ld	r24, Z
    43e2:	48 2f       	mov	r20, r24
    43e4:	ea 81       	ldd	r30, Y+2	; 0x02
    43e6:	fb 81       	ldd	r31, Y+3	; 0x03
    43e8:	80 81       	ld	r24, Z
    43ea:	86 95       	lsr	r24
    43ec:	86 95       	lsr	r24
    43ee:	87 70       	andi	r24, 0x07	; 7
    43f0:	28 2f       	mov	r18, r24
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	02 2e       	mov	r0, r18
    43fa:	02 c0       	rjmp	.+4      	; 0x4400 <MCAL_DIO_SetPinDirection+0x3e2>
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	0a 94       	dec	r0
    4402:	e2 f7       	brpl	.-8      	; 0x43fc <MCAL_DIO_SetPinDirection+0x3de>
    4404:	84 2b       	or	r24, r20
    4406:	8c 93       	st	X, r24
{
    4408:	a0 e5       	ldi	r26, 0x50	; 80
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e0 e5       	ldi	r30, 0x50	; 80
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	84 60       	ori	r24, 0x04	; 4
    4414:	8c 93       	st	X, r24
    4416:	e3 c0       	rjmp	.+454    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
    4418:	a4 e3       	ldi	r26, 0x34	; 52
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	e4 e3       	ldi	r30, 0x34	; 52
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	80 81       	ld	r24, Z
    4422:	48 2f       	mov	r20, r24
    4424:	ea 81       	ldd	r30, Y+2	; 0x02
    4426:	fb 81       	ldd	r31, Y+3	; 0x03
    4428:	80 81       	ld	r24, Z
    442a:	86 95       	lsr	r24
    442c:	86 95       	lsr	r24
    442e:	87 70       	andi	r24, 0x07	; 7
    4430:	28 2f       	mov	r18, r24
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	02 c0       	rjmp	.+4      	; 0x443e <MCAL_DIO_SetPinDirection+0x420>
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	2a 95       	dec	r18
    4440:	e2 f7       	brpl	.-8      	; 0x443a <MCAL_DIO_SetPinDirection+0x41c>
    4442:	80 95       	com	r24
    4444:	84 23       	and	r24, r20
    4446:	8c 93       	st	X, r24
	return Local_ErrorStatus;
    4448:	a5 e3       	ldi	r26, 0x35	; 53
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	e5 e3       	ldi	r30, 0x35	; 53
    444e:	f0 e0       	ldi	r31, 0x00	; 0
    4450:	80 81       	ld	r24, Z
    4452:	48 2f       	mov	r20, r24
    4454:	ea 81       	ldd	r30, Y+2	; 0x02
    4456:	fb 81       	ldd	r31, Y+3	; 0x03
    4458:	80 81       	ld	r24, Z
    445a:	86 95       	lsr	r24
    445c:	86 95       	lsr	r24
    445e:	87 70       	andi	r24, 0x07	; 7
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	02 2e       	mov	r0, r18
    446a:	02 c0       	rjmp	.+4      	; 0x4470 <MCAL_DIO_SetPinDirection+0x452>
    446c:	88 0f       	add	r24, r24
    446e:	99 1f       	adc	r25, r25
    4470:	0a 94       	dec	r0
    4472:	e2 f7       	brpl	.-8      	; 0x446c <MCAL_DIO_SetPinDirection+0x44e>
    4474:	84 2b       	or	r24, r20
    4476:	8c 93       	st	X, r24
}
    4478:	a0 e5       	ldi	r26, 0x50	; 80
    447a:	b0 e0       	ldi	r27, 0x00	; 0
    447c:	e0 e5       	ldi	r30, 0x50	; 80
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	80 81       	ld	r24, Z
    4482:	8b 7f       	andi	r24, 0xFB	; 251
    4484:	8c 93       	st	X, r24
    4486:	ab c0       	rjmp	.+342    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    4488:	19 82       	std	Y+1, r1	; 0x01
    448a:	a9 c0       	rjmp	.+338    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	89 83       	std	Y+1, r24	; 0x01
{
    4490:	ea 81       	ldd	r30, Y+2	; 0x02
    4492:	fb 81       	ldd	r31, Y+3	; 0x03
    4494:	80 81       	ld	r24, Z
    4496:	82 95       	swap	r24
    4498:	86 95       	lsr	r24
    449a:	87 70       	andi	r24, 0x07	; 7
    449c:	83 70       	andi	r24, 0x03	; 3
    449e:	28 2f       	mov	r18, r24
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	3d 83       	std	Y+5, r19	; 0x05
    44a4:	2c 83       	std	Y+4, r18	; 0x04
    44a6:	8c 81       	ldd	r24, Y+4	; 0x04
    44a8:	9d 81       	ldd	r25, Y+5	; 0x05
    44aa:	81 30       	cpi	r24, 0x01	; 1
    44ac:	91 05       	cpc	r25, r1
    44ae:	21 f1       	breq	.+72     	; 0x44f8 <MCAL_DIO_SetPinDirection+0x4da>
    44b0:	2c 81       	ldd	r18, Y+4	; 0x04
    44b2:	3d 81       	ldd	r19, Y+5	; 0x05
    44b4:	22 30       	cpi	r18, 0x02	; 2
    44b6:	31 05       	cpc	r19, r1
    44b8:	09 f4       	brne	.+2      	; 0x44bc <MCAL_DIO_SetPinDirection+0x49e>
    44ba:	56 c0       	rjmp	.+172    	; 0x4568 <MCAL_DIO_SetPinDirection+0x54a>
    44bc:	8c 81       	ldd	r24, Y+4	; 0x04
    44be:	9d 81       	ldd	r25, Y+5	; 0x05
    44c0:	00 97       	sbiw	r24, 0x00	; 0
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <MCAL_DIO_SetPinDirection+0x4a8>
    44c4:	89 c0       	rjmp	.+274    	; 0x45d8 <MCAL_DIO_SetPinDirection+0x5ba>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
    44c6:	a1 e3       	ldi	r26, 0x31	; 49
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	e1 e3       	ldi	r30, 0x31	; 49
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	48 2f       	mov	r20, r24
    44d2:	ea 81       	ldd	r30, Y+2	; 0x02
    44d4:	fb 81       	ldd	r31, Y+3	; 0x03
    44d6:	80 81       	ld	r24, Z
    44d8:	86 95       	lsr	r24
    44da:	86 95       	lsr	r24
    44dc:	87 70       	andi	r24, 0x07	; 7
    44de:	28 2f       	mov	r18, r24
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	02 2e       	mov	r0, r18
    44e8:	02 c0       	rjmp	.+4      	; 0x44ee <MCAL_DIO_SetPinDirection+0x4d0>
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	0a 94       	dec	r0
    44f0:	e2 f7       	brpl	.-8      	; 0x44ea <MCAL_DIO_SetPinDirection+0x4cc>
    44f2:	84 2b       	or	r24, r20
    44f4:	8c 93       	st	X, r24
    44f6:	73 c0       	rjmp	.+230    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	return Local_ErrorStatus;
}

    44f8:	a1 e3       	ldi	r26, 0x31	; 49
    44fa:	b0 e0       	ldi	r27, 0x00	; 0
    44fc:	e1 e3       	ldi	r30, 0x31	; 49
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	80 81       	ld	r24, Z
    4502:	48 2f       	mov	r20, r24
    4504:	ea 81       	ldd	r30, Y+2	; 0x02
    4506:	fb 81       	ldd	r31, Y+3	; 0x03
    4508:	80 81       	ld	r24, Z
    450a:	86 95       	lsr	r24
    450c:	86 95       	lsr	r24
    450e:	87 70       	andi	r24, 0x07	; 7
    4510:	28 2f       	mov	r18, r24
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	02 c0       	rjmp	.+4      	; 0x451e <MCAL_DIO_SetPinDirection+0x500>
    451a:	88 0f       	add	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	2a 95       	dec	r18
    4520:	e2 f7       	brpl	.-8      	; 0x451a <MCAL_DIO_SetPinDirection+0x4fc>
    4522:	80 95       	com	r24
    4524:	84 23       	and	r24, r20
    4526:	8c 93       	st	X, r24
ISR(INT0_vect)
    4528:	a2 e3       	ldi	r26, 0x32	; 50
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	e2 e3       	ldi	r30, 0x32	; 50
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	80 81       	ld	r24, Z
    4532:	48 2f       	mov	r20, r24
    4534:	ea 81       	ldd	r30, Y+2	; 0x02
    4536:	fb 81       	ldd	r31, Y+3	; 0x03
    4538:	80 81       	ld	r24, Z
    453a:	86 95       	lsr	r24
    453c:	86 95       	lsr	r24
    453e:	87 70       	andi	r24, 0x07	; 7
    4540:	28 2f       	mov	r18, r24
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	02 2e       	mov	r0, r18
    454a:	02 c0       	rjmp	.+4      	; 0x4550 <MCAL_DIO_SetPinDirection+0x532>
    454c:	88 0f       	add	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	0a 94       	dec	r0
    4552:	e2 f7       	brpl	.-8      	; 0x454c <MCAL_DIO_SetPinDirection+0x52e>
    4554:	84 2b       	or	r24, r20
    4556:	8c 93       	st	X, r24
{
    4558:	a0 e5       	ldi	r26, 0x50	; 80
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	e0 e5       	ldi	r30, 0x50	; 80
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	84 60       	ori	r24, 0x04	; 4
    4564:	8c 93       	st	X, r24
    4566:	3b c0       	rjmp	.+118    	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	EXT_Interrupt_EXTINT0_CallBack();
}

    4568:	a4 e3       	ldi	r26, 0x34	; 52
    456a:	b0 e0       	ldi	r27, 0x00	; 0
    456c:	e4 e3       	ldi	r30, 0x34	; 52
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	48 2f       	mov	r20, r24
    4574:	ea 81       	ldd	r30, Y+2	; 0x02
    4576:	fb 81       	ldd	r31, Y+3	; 0x03
    4578:	80 81       	ld	r24, Z
    457a:	86 95       	lsr	r24
    457c:	86 95       	lsr	r24
    457e:	87 70       	andi	r24, 0x07	; 7
    4580:	28 2f       	mov	r18, r24
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	02 c0       	rjmp	.+4      	; 0x458e <MCAL_DIO_SetPinDirection+0x570>
    458a:	88 0f       	add	r24, r24
    458c:	99 1f       	adc	r25, r25
    458e:	2a 95       	dec	r18
    4590:	e2 f7       	brpl	.-8      	; 0x458a <MCAL_DIO_SetPinDirection+0x56c>
    4592:	80 95       	com	r24
    4594:	84 23       	and	r24, r20
    4596:	8c 93       	st	X, r24
ISR(INT1_vect)
    4598:	a5 e3       	ldi	r26, 0x35	; 53
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	e5 e3       	ldi	r30, 0x35	; 53
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	80 81       	ld	r24, Z
    45a2:	48 2f       	mov	r20, r24
    45a4:	ea 81       	ldd	r30, Y+2	; 0x02
    45a6:	fb 81       	ldd	r31, Y+3	; 0x03
    45a8:	80 81       	ld	r24, Z
    45aa:	86 95       	lsr	r24
    45ac:	86 95       	lsr	r24
    45ae:	87 70       	andi	r24, 0x07	; 7
    45b0:	28 2f       	mov	r18, r24
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	02 2e       	mov	r0, r18
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <MCAL_DIO_SetPinDirection+0x5a2>
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	0a 94       	dec	r0
    45c2:	e2 f7       	brpl	.-8      	; 0x45bc <MCAL_DIO_SetPinDirection+0x59e>
    45c4:	84 2b       	or	r24, r20
    45c6:	8c 93       	st	X, r24
{
    45c8:	a0 e5       	ldi	r26, 0x50	; 80
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	e0 e5       	ldi	r30, 0x50	; 80
    45ce:	f0 e0       	ldi	r31, 0x00	; 0
    45d0:	80 81       	ld	r24, Z
    45d2:	8b 7f       	andi	r24, 0xFB	; 251
    45d4:	8c 93       	st	X, r24
    45d6:	03 c0       	rjmp	.+6      	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
	EXT_Interrupt_EXTINT1_CallBack();
}

    45d8:	19 82       	std	Y+1, r1	; 0x01
    45da:	01 c0       	rjmp	.+2      	; 0x45de <MCAL_DIO_SetPinDirection+0x5c0>
ISR(INT2_vect)
{
	EXT_Interrupt_EXTINT2_CallBack();
}
    45dc:	19 82       	std	Y+1, r1	; 0x01
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	2d 96       	adiw	r28, 0x0d	; 13
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	cf 91       	pop	r28
    45ee:	df 91       	pop	r29
    45f0:	08 95       	ret

000045f2 <MCAL_DIO_GetPinDirection>:
    45f2:	df 93       	push	r29
    45f4:	cf 93       	push	r28
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	28 97       	sbiw	r28, 0x08	; 8
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	f8 94       	cli
    4600:	de bf       	out	0x3e, r29	; 62
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	9c 83       	std	Y+4, r25	; 0x04
    4608:	8b 83       	std	Y+3, r24	; 0x03
    460a:	7e 83       	std	Y+6, r23	; 0x06
    460c:	6d 83       	std	Y+5, r22	; 0x05
    460e:	1a 82       	std	Y+2, r1	; 0x02
    4610:	86 e0       	ldi	r24, 0x06	; 6
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	eb 81       	ldd	r30, Y+3	; 0x03
    4616:	fc 81       	ldd	r31, Y+4	; 0x04
    4618:	80 81       	ld	r24, Z
    461a:	86 95       	lsr	r24
    461c:	86 95       	lsr	r24
    461e:	87 70       	andi	r24, 0x07	; 7
    4620:	88 2f       	mov	r24, r24
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	88 30       	cpi	r24, 0x08	; 8
    4626:	91 05       	cpc	r25, r1
    4628:	14 f0       	brlt	.+4      	; 0x462e <MCAL_DIO_GetPinDirection+0x3c>
    462a:	1a 82       	std	Y+2, r1	; 0x02
    462c:	bb c0       	rjmp	.+374    	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    462e:	eb 81       	ldd	r30, Y+3	; 0x03
    4630:	fc 81       	ldd	r31, Y+4	; 0x04
    4632:	80 81       	ld	r24, Z
    4634:	83 70       	andi	r24, 0x03	; 3
    4636:	28 2f       	mov	r18, r24
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	38 87       	std	Y+8, r19	; 0x08
    463c:	2f 83       	std	Y+7, r18	; 0x07
    463e:	4f 81       	ldd	r20, Y+7	; 0x07
    4640:	58 85       	ldd	r21, Y+8	; 0x08
    4642:	41 30       	cpi	r20, 0x01	; 1
    4644:	51 05       	cpc	r21, r1
    4646:	09 f4       	brne	.+2      	; 0x464a <MCAL_DIO_GetPinDirection+0x58>
    4648:	3d c0       	rjmp	.+122    	; 0x46c4 <MCAL_DIO_GetPinDirection+0xd2>
    464a:	8f 81       	ldd	r24, Y+7	; 0x07
    464c:	98 85       	ldd	r25, Y+8	; 0x08
    464e:	82 30       	cpi	r24, 0x02	; 2
    4650:	91 05       	cpc	r25, r1
    4652:	34 f4       	brge	.+12     	; 0x4660 <MCAL_DIO_GetPinDirection+0x6e>
    4654:	2f 81       	ldd	r18, Y+7	; 0x07
    4656:	38 85       	ldd	r19, Y+8	; 0x08
    4658:	21 15       	cp	r18, r1
    465a:	31 05       	cpc	r19, r1
    465c:	71 f0       	breq	.+28     	; 0x467a <MCAL_DIO_GetPinDirection+0x88>
    465e:	a1 c0       	rjmp	.+322    	; 0x47a2 <MCAL_DIO_GetPinDirection+0x1b0>
    4660:	4f 81       	ldd	r20, Y+7	; 0x07
    4662:	58 85       	ldd	r21, Y+8	; 0x08
    4664:	42 30       	cpi	r20, 0x02	; 2
    4666:	51 05       	cpc	r21, r1
    4668:	09 f4       	brne	.+2      	; 0x466c <MCAL_DIO_GetPinDirection+0x7a>
    466a:	51 c0       	rjmp	.+162    	; 0x470e <MCAL_DIO_GetPinDirection+0x11c>
    466c:	8f 81       	ldd	r24, Y+7	; 0x07
    466e:	98 85       	ldd	r25, Y+8	; 0x08
    4670:	83 30       	cpi	r24, 0x03	; 3
    4672:	91 05       	cpc	r25, r1
    4674:	09 f4       	brne	.+2      	; 0x4678 <MCAL_DIO_GetPinDirection+0x86>
    4676:	70 c0       	rjmp	.+224    	; 0x4758 <MCAL_DIO_GetPinDirection+0x166>
    4678:	94 c0       	rjmp	.+296    	; 0x47a2 <MCAL_DIO_GetPinDirection+0x1b0>
    467a:	ea e3       	ldi	r30, 0x3A	; 58
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	80 81       	ld	r24, Z
    4680:	28 2f       	mov	r18, r24
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	eb 81       	ldd	r30, Y+3	; 0x03
    4686:	fc 81       	ldd	r31, Y+4	; 0x04
    4688:	80 81       	ld	r24, Z
    468a:	86 95       	lsr	r24
    468c:	86 95       	lsr	r24
    468e:	87 70       	andi	r24, 0x07	; 7
    4690:	88 2f       	mov	r24, r24
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	a9 01       	movw	r20, r18
    4696:	02 c0       	rjmp	.+4      	; 0x469c <MCAL_DIO_GetPinDirection+0xaa>
    4698:	55 95       	asr	r21
    469a:	47 95       	ror	r20
    469c:	8a 95       	dec	r24
    469e:	e2 f7       	brpl	.-8      	; 0x4698 <MCAL_DIO_GetPinDirection+0xa6>
    46a0:	ca 01       	movw	r24, r20
    46a2:	81 70       	andi	r24, 0x01	; 1
    46a4:	89 83       	std	Y+1, r24	; 0x01
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	81 30       	cpi	r24, 0x01	; 1
    46aa:	19 f0       	breq	.+6      	; 0x46b2 <MCAL_DIO_GetPinDirection+0xc0>
    46ac:	89 81       	ldd	r24, Y+1	; 0x01
    46ae:	88 23       	and	r24, r24
    46b0:	39 f4       	brne	.+14     	; 0x46c0 <MCAL_DIO_GetPinDirection+0xce>
    46b2:	ed 81       	ldd	r30, Y+5	; 0x05
    46b4:	fe 81       	ldd	r31, Y+6	; 0x06
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	80 83       	st	Z, r24
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	8a 83       	std	Y+2, r24	; 0x02
    46be:	72 c0       	rjmp	.+228    	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    46c0:	1a 82       	std	Y+2, r1	; 0x02
    46c2:	70 c0       	rjmp	.+224    	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    46c4:	e7 e3       	ldi	r30, 0x37	; 55
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	80 81       	ld	r24, Z
    46ca:	28 2f       	mov	r18, r24
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	eb 81       	ldd	r30, Y+3	; 0x03
    46d0:	fc 81       	ldd	r31, Y+4	; 0x04
    46d2:	80 81       	ld	r24, Z
    46d4:	86 95       	lsr	r24
    46d6:	86 95       	lsr	r24
    46d8:	87 70       	andi	r24, 0x07	; 7
    46da:	88 2f       	mov	r24, r24
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	a9 01       	movw	r20, r18
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <MCAL_DIO_GetPinDirection+0xf4>
    46e2:	55 95       	asr	r21
    46e4:	47 95       	ror	r20
    46e6:	8a 95       	dec	r24
    46e8:	e2 f7       	brpl	.-8      	; 0x46e2 <MCAL_DIO_GetPinDirection+0xf0>
    46ea:	ca 01       	movw	r24, r20
    46ec:	81 70       	andi	r24, 0x01	; 1
    46ee:	89 83       	std	Y+1, r24	; 0x01
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	81 30       	cpi	r24, 0x01	; 1
    46f4:	19 f0       	breq	.+6      	; 0x46fc <MCAL_DIO_GetPinDirection+0x10a>
    46f6:	89 81       	ldd	r24, Y+1	; 0x01
    46f8:	88 23       	and	r24, r24
    46fa:	39 f4       	brne	.+14     	; 0x470a <MCAL_DIO_GetPinDirection+0x118>
    46fc:	ed 81       	ldd	r30, Y+5	; 0x05
    46fe:	fe 81       	ldd	r31, Y+6	; 0x06
    4700:	89 81       	ldd	r24, Y+1	; 0x01
    4702:	80 83       	st	Z, r24
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	8a 83       	std	Y+2, r24	; 0x02
    4708:	4d c0       	rjmp	.+154    	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    470a:	1a 82       	std	Y+2, r1	; 0x02
    470c:	4b c0       	rjmp	.+150    	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    470e:	e4 e3       	ldi	r30, 0x34	; 52
    4710:	f0 e0       	ldi	r31, 0x00	; 0
    4712:	80 81       	ld	r24, Z
    4714:	28 2f       	mov	r18, r24
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	eb 81       	ldd	r30, Y+3	; 0x03
    471a:	fc 81       	ldd	r31, Y+4	; 0x04
    471c:	80 81       	ld	r24, Z
    471e:	86 95       	lsr	r24
    4720:	86 95       	lsr	r24
    4722:	87 70       	andi	r24, 0x07	; 7
    4724:	88 2f       	mov	r24, r24
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	a9 01       	movw	r20, r18
    472a:	02 c0       	rjmp	.+4      	; 0x4730 <MCAL_DIO_GetPinDirection+0x13e>
    472c:	55 95       	asr	r21
    472e:	47 95       	ror	r20
    4730:	8a 95       	dec	r24
    4732:	e2 f7       	brpl	.-8      	; 0x472c <MCAL_DIO_GetPinDirection+0x13a>
    4734:	ca 01       	movw	r24, r20
    4736:	81 70       	andi	r24, 0x01	; 1
    4738:	89 83       	std	Y+1, r24	; 0x01
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	81 30       	cpi	r24, 0x01	; 1
    473e:	19 f0       	breq	.+6      	; 0x4746 <MCAL_DIO_GetPinDirection+0x154>
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	88 23       	and	r24, r24
    4744:	39 f4       	brne	.+14     	; 0x4754 <MCAL_DIO_GetPinDirection+0x162>
    4746:	ed 81       	ldd	r30, Y+5	; 0x05
    4748:	fe 81       	ldd	r31, Y+6	; 0x06
    474a:	89 81       	ldd	r24, Y+1	; 0x01
    474c:	80 83       	st	Z, r24
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	8a 83       	std	Y+2, r24	; 0x02
    4752:	28 c0       	rjmp	.+80     	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    4754:	1a 82       	std	Y+2, r1	; 0x02
    4756:	26 c0       	rjmp	.+76     	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    4758:	e1 e3       	ldi	r30, 0x31	; 49
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	80 81       	ld	r24, Z
    475e:	28 2f       	mov	r18, r24
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	eb 81       	ldd	r30, Y+3	; 0x03
    4764:	fc 81       	ldd	r31, Y+4	; 0x04
    4766:	80 81       	ld	r24, Z
    4768:	86 95       	lsr	r24
    476a:	86 95       	lsr	r24
    476c:	87 70       	andi	r24, 0x07	; 7
    476e:	88 2f       	mov	r24, r24
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	a9 01       	movw	r20, r18
    4774:	02 c0       	rjmp	.+4      	; 0x477a <MCAL_DIO_GetPinDirection+0x188>
    4776:	55 95       	asr	r21
    4778:	47 95       	ror	r20
    477a:	8a 95       	dec	r24
    477c:	e2 f7       	brpl	.-8      	; 0x4776 <MCAL_DIO_GetPinDirection+0x184>
    477e:	ca 01       	movw	r24, r20
    4780:	81 70       	andi	r24, 0x01	; 1
    4782:	89 83       	std	Y+1, r24	; 0x01
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	81 30       	cpi	r24, 0x01	; 1
    4788:	19 f0       	breq	.+6      	; 0x4790 <MCAL_DIO_GetPinDirection+0x19e>
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	88 23       	and	r24, r24
    478e:	39 f4       	brne	.+14     	; 0x479e <MCAL_DIO_GetPinDirection+0x1ac>
    4790:	ed 81       	ldd	r30, Y+5	; 0x05
    4792:	fe 81       	ldd	r31, Y+6	; 0x06
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	80 83       	st	Z, r24
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	8a 83       	std	Y+2, r24	; 0x02
    479c:	03 c0       	rjmp	.+6      	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    479e:	1a 82       	std	Y+2, r1	; 0x02
    47a0:	01 c0       	rjmp	.+2      	; 0x47a4 <MCAL_DIO_GetPinDirection+0x1b2>
    47a2:	1a 82       	std	Y+2, r1	; 0x02
    47a4:	8a 81       	ldd	r24, Y+2	; 0x02
    47a6:	28 96       	adiw	r28, 0x08	; 8
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	cf 91       	pop	r28
    47b4:	df 91       	pop	r29
    47b6:	08 95       	ret

000047b8 <MCAL_DIO_SetPinValue>:
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	2e 97       	sbiw	r28, 0x0e	; 14
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	9b 83       	std	Y+3, r25	; 0x03
    47ce:	8a 83       	std	Y+2, r24	; 0x02
    47d0:	6c 83       	std	Y+4, r22	; 0x04
    47d2:	19 82       	std	Y+1, r1	; 0x01
    47d4:	ea 81       	ldd	r30, Y+2	; 0x02
    47d6:	fb 81       	ldd	r31, Y+3	; 0x03
    47d8:	80 81       	ld	r24, Z
    47da:	86 95       	lsr	r24
    47dc:	86 95       	lsr	r24
    47de:	87 70       	andi	r24, 0x07	; 7
    47e0:	88 2f       	mov	r24, r24
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	88 30       	cpi	r24, 0x08	; 8
    47e6:	91 05       	cpc	r25, r1
    47e8:	34 f4       	brge	.+12     	; 0x47f6 <MCAL_DIO_SetPinValue+0x3e>
    47ea:	ea 81       	ldd	r30, Y+2	; 0x02
    47ec:	fb 81       	ldd	r31, Y+3	; 0x03
    47ee:	80 81       	ld	r24, Z
    47f0:	80 76       	andi	r24, 0x60	; 96
    47f2:	80 32       	cpi	r24, 0x20	; 32
    47f4:	11 f4       	brne	.+4      	; 0x47fa <MCAL_DIO_SetPinValue+0x42>
    47f6:	19 82       	std	Y+1, r1	; 0x01
    47f8:	9e c1       	rjmp	.+828    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    47fa:	ea 81       	ldd	r30, Y+2	; 0x02
    47fc:	fb 81       	ldd	r31, Y+3	; 0x03
    47fe:	80 81       	ld	r24, Z
    4800:	83 70       	andi	r24, 0x03	; 3
    4802:	28 2f       	mov	r18, r24
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	3e 87       	std	Y+14, r19	; 0x0e
    4808:	2d 87       	std	Y+13, r18	; 0x0d
    480a:	8d 85       	ldd	r24, Y+13	; 0x0d
    480c:	9e 85       	ldd	r25, Y+14	; 0x0e
    480e:	81 30       	cpi	r24, 0x01	; 1
    4810:	91 05       	cpc	r25, r1
    4812:	09 f4       	brne	.+2      	; 0x4816 <MCAL_DIO_SetPinValue+0x5e>
    4814:	75 c0       	rjmp	.+234    	; 0x4900 <MCAL_DIO_SetPinValue+0x148>
    4816:	2d 85       	ldd	r18, Y+13	; 0x0d
    4818:	3e 85       	ldd	r19, Y+14	; 0x0e
    481a:	22 30       	cpi	r18, 0x02	; 2
    481c:	31 05       	cpc	r19, r1
    481e:	2c f4       	brge	.+10     	; 0x482a <MCAL_DIO_SetPinValue+0x72>
    4820:	8d 85       	ldd	r24, Y+13	; 0x0d
    4822:	9e 85       	ldd	r25, Y+14	; 0x0e
    4824:	00 97       	sbiw	r24, 0x00	; 0
    4826:	71 f0       	breq	.+28     	; 0x4844 <MCAL_DIO_SetPinValue+0x8c>
    4828:	85 c1       	rjmp	.+778    	; 0x4b34 <MCAL_DIO_SetPinValue+0x37c>
    482a:	2d 85       	ldd	r18, Y+13	; 0x0d
    482c:	3e 85       	ldd	r19, Y+14	; 0x0e
    482e:	22 30       	cpi	r18, 0x02	; 2
    4830:	31 05       	cpc	r19, r1
    4832:	09 f4       	brne	.+2      	; 0x4836 <MCAL_DIO_SetPinValue+0x7e>
    4834:	c3 c0       	rjmp	.+390    	; 0x49bc <MCAL_DIO_SetPinValue+0x204>
    4836:	8d 85       	ldd	r24, Y+13	; 0x0d
    4838:	9e 85       	ldd	r25, Y+14	; 0x0e
    483a:	83 30       	cpi	r24, 0x03	; 3
    483c:	91 05       	cpc	r25, r1
    483e:	09 f4       	brne	.+2      	; 0x4842 <MCAL_DIO_SetPinValue+0x8a>
    4840:	1b c1       	rjmp	.+566    	; 0x4a78 <MCAL_DIO_SetPinValue+0x2c0>
    4842:	78 c1       	rjmp	.+752    	; 0x4b34 <MCAL_DIO_SetPinValue+0x37c>
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	89 83       	std	Y+1, r24	; 0x01
    4848:	8c 81       	ldd	r24, Y+4	; 0x04
    484a:	28 2f       	mov	r18, r24
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	3c 87       	std	Y+12, r19	; 0x0c
    4850:	2b 87       	std	Y+11, r18	; 0x0b
    4852:	8b 85       	ldd	r24, Y+11	; 0x0b
    4854:	9c 85       	ldd	r25, Y+12	; 0x0c
    4856:	00 97       	sbiw	r24, 0x00	; 0
    4858:	59 f1       	breq	.+86     	; 0x48b0 <MCAL_DIO_SetPinValue+0xf8>
    485a:	2b 85       	ldd	r18, Y+11	; 0x0b
    485c:	3c 85       	ldd	r19, Y+12	; 0x0c
    485e:	21 30       	cpi	r18, 0x01	; 1
    4860:	31 05       	cpc	r19, r1
    4862:	09 f0       	breq	.+2      	; 0x4866 <MCAL_DIO_SetPinValue+0xae>
    4864:	4b c0       	rjmp	.+150    	; 0x48fc <MCAL_DIO_SetPinValue+0x144>
    4866:	ab e3       	ldi	r26, 0x3B	; 59
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	eb e3       	ldi	r30, 0x3B	; 59
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	48 2f       	mov	r20, r24
    4872:	ea 81       	ldd	r30, Y+2	; 0x02
    4874:	fb 81       	ldd	r31, Y+3	; 0x03
    4876:	80 81       	ld	r24, Z
    4878:	86 95       	lsr	r24
    487a:	86 95       	lsr	r24
    487c:	87 70       	andi	r24, 0x07	; 7
    487e:	28 2f       	mov	r18, r24
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	02 2e       	mov	r0, r18
    4888:	02 c0       	rjmp	.+4      	; 0x488e <MCAL_DIO_SetPinValue+0xd6>
    488a:	88 0f       	add	r24, r24
    488c:	99 1f       	adc	r25, r25
    488e:	0a 94       	dec	r0
    4890:	e2 f7       	brpl	.-8      	; 0x488a <MCAL_DIO_SetPinValue+0xd2>
    4892:	84 2b       	or	r24, r20
    4894:	8c 93       	st	X, r24
    4896:	8c 81       	ldd	r24, Y+4	; 0x04
    4898:	81 70       	andi	r24, 0x01	; 1
    489a:	ea 81       	ldd	r30, Y+2	; 0x02
    489c:	fb 81       	ldd	r31, Y+3	; 0x03
    489e:	98 2f       	mov	r25, r24
    48a0:	97 95       	ror	r25
    48a2:	99 27       	eor	r25, r25
    48a4:	97 95       	ror	r25
    48a6:	80 81       	ld	r24, Z
    48a8:	8f 77       	andi	r24, 0x7F	; 127
    48aa:	89 2b       	or	r24, r25
    48ac:	80 83       	st	Z, r24
    48ae:	43 c1       	rjmp	.+646    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    48b0:	ab e3       	ldi	r26, 0x3B	; 59
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	eb e3       	ldi	r30, 0x3B	; 59
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	80 81       	ld	r24, Z
    48ba:	48 2f       	mov	r20, r24
    48bc:	ea 81       	ldd	r30, Y+2	; 0x02
    48be:	fb 81       	ldd	r31, Y+3	; 0x03
    48c0:	80 81       	ld	r24, Z
    48c2:	86 95       	lsr	r24
    48c4:	86 95       	lsr	r24
    48c6:	87 70       	andi	r24, 0x07	; 7
    48c8:	28 2f       	mov	r18, r24
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	02 2e       	mov	r0, r18
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <MCAL_DIO_SetPinValue+0x120>
    48d4:	88 0f       	add	r24, r24
    48d6:	99 1f       	adc	r25, r25
    48d8:	0a 94       	dec	r0
    48da:	e2 f7       	brpl	.-8      	; 0x48d4 <MCAL_DIO_SetPinValue+0x11c>
    48dc:	80 95       	com	r24
    48de:	84 23       	and	r24, r20
    48e0:	8c 93       	st	X, r24
    48e2:	8c 81       	ldd	r24, Y+4	; 0x04
    48e4:	81 70       	andi	r24, 0x01	; 1
    48e6:	ea 81       	ldd	r30, Y+2	; 0x02
    48e8:	fb 81       	ldd	r31, Y+3	; 0x03
    48ea:	98 2f       	mov	r25, r24
    48ec:	97 95       	ror	r25
    48ee:	99 27       	eor	r25, r25
    48f0:	97 95       	ror	r25
    48f2:	80 81       	ld	r24, Z
    48f4:	8f 77       	andi	r24, 0x7F	; 127
    48f6:	89 2b       	or	r24, r25
    48f8:	80 83       	st	Z, r24
    48fa:	1d c1       	rjmp	.+570    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    48fc:	19 82       	std	Y+1, r1	; 0x01
    48fe:	1b c1       	rjmp	.+566    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	89 83       	std	Y+1, r24	; 0x01
    4904:	8c 81       	ldd	r24, Y+4	; 0x04
    4906:	28 2f       	mov	r18, r24
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	3a 87       	std	Y+10, r19	; 0x0a
    490c:	29 87       	std	Y+9, r18	; 0x09
    490e:	89 85       	ldd	r24, Y+9	; 0x09
    4910:	9a 85       	ldd	r25, Y+10	; 0x0a
    4912:	00 97       	sbiw	r24, 0x00	; 0
    4914:	59 f1       	breq	.+86     	; 0x496c <MCAL_DIO_SetPinValue+0x1b4>
    4916:	29 85       	ldd	r18, Y+9	; 0x09
    4918:	3a 85       	ldd	r19, Y+10	; 0x0a
    491a:	21 30       	cpi	r18, 0x01	; 1
    491c:	31 05       	cpc	r19, r1
    491e:	09 f0       	breq	.+2      	; 0x4922 <MCAL_DIO_SetPinValue+0x16a>
    4920:	4b c0       	rjmp	.+150    	; 0x49b8 <MCAL_DIO_SetPinValue+0x200>
    4922:	a8 e3       	ldi	r26, 0x38	; 56
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	e8 e3       	ldi	r30, 0x38	; 56
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	48 2f       	mov	r20, r24
    492e:	ea 81       	ldd	r30, Y+2	; 0x02
    4930:	fb 81       	ldd	r31, Y+3	; 0x03
    4932:	80 81       	ld	r24, Z
    4934:	86 95       	lsr	r24
    4936:	86 95       	lsr	r24
    4938:	87 70       	andi	r24, 0x07	; 7
    493a:	28 2f       	mov	r18, r24
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	02 2e       	mov	r0, r18
    4944:	02 c0       	rjmp	.+4      	; 0x494a <MCAL_DIO_SetPinValue+0x192>
    4946:	88 0f       	add	r24, r24
    4948:	99 1f       	adc	r25, r25
    494a:	0a 94       	dec	r0
    494c:	e2 f7       	brpl	.-8      	; 0x4946 <MCAL_DIO_SetPinValue+0x18e>
    494e:	84 2b       	or	r24, r20
    4950:	8c 93       	st	X, r24
    4952:	8c 81       	ldd	r24, Y+4	; 0x04
    4954:	81 70       	andi	r24, 0x01	; 1
    4956:	ea 81       	ldd	r30, Y+2	; 0x02
    4958:	fb 81       	ldd	r31, Y+3	; 0x03
    495a:	98 2f       	mov	r25, r24
    495c:	97 95       	ror	r25
    495e:	99 27       	eor	r25, r25
    4960:	97 95       	ror	r25
    4962:	80 81       	ld	r24, Z
    4964:	8f 77       	andi	r24, 0x7F	; 127
    4966:	89 2b       	or	r24, r25
    4968:	80 83       	st	Z, r24
    496a:	e5 c0       	rjmp	.+458    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    496c:	a8 e3       	ldi	r26, 0x38	; 56
    496e:	b0 e0       	ldi	r27, 0x00	; 0
    4970:	e8 e3       	ldi	r30, 0x38	; 56
    4972:	f0 e0       	ldi	r31, 0x00	; 0
    4974:	80 81       	ld	r24, Z
    4976:	48 2f       	mov	r20, r24
    4978:	ea 81       	ldd	r30, Y+2	; 0x02
    497a:	fb 81       	ldd	r31, Y+3	; 0x03
    497c:	80 81       	ld	r24, Z
    497e:	86 95       	lsr	r24
    4980:	86 95       	lsr	r24
    4982:	87 70       	andi	r24, 0x07	; 7
    4984:	28 2f       	mov	r18, r24
    4986:	30 e0       	ldi	r19, 0x00	; 0
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	02 2e       	mov	r0, r18
    498e:	02 c0       	rjmp	.+4      	; 0x4994 <MCAL_DIO_SetPinValue+0x1dc>
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	0a 94       	dec	r0
    4996:	e2 f7       	brpl	.-8      	; 0x4990 <MCAL_DIO_SetPinValue+0x1d8>
    4998:	80 95       	com	r24
    499a:	84 23       	and	r24, r20
    499c:	8c 93       	st	X, r24
    499e:	8c 81       	ldd	r24, Y+4	; 0x04
    49a0:	81 70       	andi	r24, 0x01	; 1
    49a2:	ea 81       	ldd	r30, Y+2	; 0x02
    49a4:	fb 81       	ldd	r31, Y+3	; 0x03
    49a6:	98 2f       	mov	r25, r24
    49a8:	97 95       	ror	r25
    49aa:	99 27       	eor	r25, r25
    49ac:	97 95       	ror	r25
    49ae:	80 81       	ld	r24, Z
    49b0:	8f 77       	andi	r24, 0x7F	; 127
    49b2:	89 2b       	or	r24, r25
    49b4:	80 83       	st	Z, r24
    49b6:	bf c0       	rjmp	.+382    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    49b8:	19 82       	std	Y+1, r1	; 0x01
    49ba:	bd c0       	rjmp	.+378    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	89 83       	std	Y+1, r24	; 0x01
    49c0:	8c 81       	ldd	r24, Y+4	; 0x04
    49c2:	28 2f       	mov	r18, r24
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	38 87       	std	Y+8, r19	; 0x08
    49c8:	2f 83       	std	Y+7, r18	; 0x07
    49ca:	8f 81       	ldd	r24, Y+7	; 0x07
    49cc:	98 85       	ldd	r25, Y+8	; 0x08
    49ce:	00 97       	sbiw	r24, 0x00	; 0
    49d0:	59 f1       	breq	.+86     	; 0x4a28 <MCAL_DIO_SetPinValue+0x270>
    49d2:	2f 81       	ldd	r18, Y+7	; 0x07
    49d4:	38 85       	ldd	r19, Y+8	; 0x08
    49d6:	21 30       	cpi	r18, 0x01	; 1
    49d8:	31 05       	cpc	r19, r1
    49da:	09 f0       	breq	.+2      	; 0x49de <MCAL_DIO_SetPinValue+0x226>
    49dc:	4b c0       	rjmp	.+150    	; 0x4a74 <MCAL_DIO_SetPinValue+0x2bc>
    49de:	a5 e3       	ldi	r26, 0x35	; 53
    49e0:	b0 e0       	ldi	r27, 0x00	; 0
    49e2:	e5 e3       	ldi	r30, 0x35	; 53
    49e4:	f0 e0       	ldi	r31, 0x00	; 0
    49e6:	80 81       	ld	r24, Z
    49e8:	48 2f       	mov	r20, r24
    49ea:	ea 81       	ldd	r30, Y+2	; 0x02
    49ec:	fb 81       	ldd	r31, Y+3	; 0x03
    49ee:	80 81       	ld	r24, Z
    49f0:	86 95       	lsr	r24
    49f2:	86 95       	lsr	r24
    49f4:	87 70       	andi	r24, 0x07	; 7
    49f6:	28 2f       	mov	r18, r24
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	02 2e       	mov	r0, r18
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <MCAL_DIO_SetPinValue+0x24e>
    4a02:	88 0f       	add	r24, r24
    4a04:	99 1f       	adc	r25, r25
    4a06:	0a 94       	dec	r0
    4a08:	e2 f7       	brpl	.-8      	; 0x4a02 <MCAL_DIO_SetPinValue+0x24a>
    4a0a:	84 2b       	or	r24, r20
    4a0c:	8c 93       	st	X, r24
    4a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a10:	81 70       	andi	r24, 0x01	; 1
    4a12:	ea 81       	ldd	r30, Y+2	; 0x02
    4a14:	fb 81       	ldd	r31, Y+3	; 0x03
    4a16:	98 2f       	mov	r25, r24
    4a18:	97 95       	ror	r25
    4a1a:	99 27       	eor	r25, r25
    4a1c:	97 95       	ror	r25
    4a1e:	80 81       	ld	r24, Z
    4a20:	8f 77       	andi	r24, 0x7F	; 127
    4a22:	89 2b       	or	r24, r25
    4a24:	80 83       	st	Z, r24
    4a26:	87 c0       	rjmp	.+270    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4a28:	a5 e3       	ldi	r26, 0x35	; 53
    4a2a:	b0 e0       	ldi	r27, 0x00	; 0
    4a2c:	e5 e3       	ldi	r30, 0x35	; 53
    4a2e:	f0 e0       	ldi	r31, 0x00	; 0
    4a30:	80 81       	ld	r24, Z
    4a32:	48 2f       	mov	r20, r24
    4a34:	ea 81       	ldd	r30, Y+2	; 0x02
    4a36:	fb 81       	ldd	r31, Y+3	; 0x03
    4a38:	80 81       	ld	r24, Z
    4a3a:	86 95       	lsr	r24
    4a3c:	86 95       	lsr	r24
    4a3e:	87 70       	andi	r24, 0x07	; 7
    4a40:	28 2f       	mov	r18, r24
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	02 2e       	mov	r0, r18
    4a4a:	02 c0       	rjmp	.+4      	; 0x4a50 <MCAL_DIO_SetPinValue+0x298>
    4a4c:	88 0f       	add	r24, r24
    4a4e:	99 1f       	adc	r25, r25
    4a50:	0a 94       	dec	r0
    4a52:	e2 f7       	brpl	.-8      	; 0x4a4c <MCAL_DIO_SetPinValue+0x294>
    4a54:	80 95       	com	r24
    4a56:	84 23       	and	r24, r20
    4a58:	8c 93       	st	X, r24
    4a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5c:	81 70       	andi	r24, 0x01	; 1
    4a5e:	ea 81       	ldd	r30, Y+2	; 0x02
    4a60:	fb 81       	ldd	r31, Y+3	; 0x03
    4a62:	98 2f       	mov	r25, r24
    4a64:	97 95       	ror	r25
    4a66:	99 27       	eor	r25, r25
    4a68:	97 95       	ror	r25
    4a6a:	80 81       	ld	r24, Z
    4a6c:	8f 77       	andi	r24, 0x7F	; 127
    4a6e:	89 2b       	or	r24, r25
    4a70:	80 83       	st	Z, r24
    4a72:	61 c0       	rjmp	.+194    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4a74:	19 82       	std	Y+1, r1	; 0x01
    4a76:	5f c0       	rjmp	.+190    	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	89 83       	std	Y+1, r24	; 0x01
    4a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7e:	28 2f       	mov	r18, r24
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	3e 83       	std	Y+6, r19	; 0x06
    4a84:	2d 83       	std	Y+5, r18	; 0x05
    4a86:	8d 81       	ldd	r24, Y+5	; 0x05
    4a88:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8a:	00 97       	sbiw	r24, 0x00	; 0
    4a8c:	59 f1       	breq	.+86     	; 0x4ae4 <MCAL_DIO_SetPinValue+0x32c>
    4a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    4a90:	3e 81       	ldd	r19, Y+6	; 0x06
    4a92:	21 30       	cpi	r18, 0x01	; 1
    4a94:	31 05       	cpc	r19, r1
    4a96:	09 f0       	breq	.+2      	; 0x4a9a <MCAL_DIO_SetPinValue+0x2e2>
    4a98:	4b c0       	rjmp	.+150    	; 0x4b30 <MCAL_DIO_SetPinValue+0x378>
    4a9a:	a2 e3       	ldi	r26, 0x32	; 50
    4a9c:	b0 e0       	ldi	r27, 0x00	; 0
    4a9e:	e2 e3       	ldi	r30, 0x32	; 50
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	80 81       	ld	r24, Z
    4aa4:	48 2f       	mov	r20, r24
    4aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    4aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    4aaa:	80 81       	ld	r24, Z
    4aac:	86 95       	lsr	r24
    4aae:	86 95       	lsr	r24
    4ab0:	87 70       	andi	r24, 0x07	; 7
    4ab2:	28 2f       	mov	r18, r24
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	02 2e       	mov	r0, r18
    4abc:	02 c0       	rjmp	.+4      	; 0x4ac2 <MCAL_DIO_SetPinValue+0x30a>
    4abe:	88 0f       	add	r24, r24
    4ac0:	99 1f       	adc	r25, r25
    4ac2:	0a 94       	dec	r0
    4ac4:	e2 f7       	brpl	.-8      	; 0x4abe <MCAL_DIO_SetPinValue+0x306>
    4ac6:	84 2b       	or	r24, r20
    4ac8:	8c 93       	st	X, r24
    4aca:	8c 81       	ldd	r24, Y+4	; 0x04
    4acc:	81 70       	andi	r24, 0x01	; 1
    4ace:	ea 81       	ldd	r30, Y+2	; 0x02
    4ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ad2:	98 2f       	mov	r25, r24
    4ad4:	97 95       	ror	r25
    4ad6:	99 27       	eor	r25, r25
    4ad8:	97 95       	ror	r25
    4ada:	80 81       	ld	r24, Z
    4adc:	8f 77       	andi	r24, 0x7F	; 127
    4ade:	89 2b       	or	r24, r25
    4ae0:	80 83       	st	Z, r24
    4ae2:	29 c0       	rjmp	.+82     	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4ae4:	a2 e3       	ldi	r26, 0x32	; 50
    4ae6:	b0 e0       	ldi	r27, 0x00	; 0
    4ae8:	e2 e3       	ldi	r30, 0x32	; 50
    4aea:	f0 e0       	ldi	r31, 0x00	; 0
    4aec:	80 81       	ld	r24, Z
    4aee:	48 2f       	mov	r20, r24
    4af0:	ea 81       	ldd	r30, Y+2	; 0x02
    4af2:	fb 81       	ldd	r31, Y+3	; 0x03
    4af4:	80 81       	ld	r24, Z
    4af6:	86 95       	lsr	r24
    4af8:	86 95       	lsr	r24
    4afa:	87 70       	andi	r24, 0x07	; 7
    4afc:	28 2f       	mov	r18, r24
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	02 2e       	mov	r0, r18
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <MCAL_DIO_SetPinValue+0x354>
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	0a 94       	dec	r0
    4b0e:	e2 f7       	brpl	.-8      	; 0x4b08 <MCAL_DIO_SetPinValue+0x350>
    4b10:	80 95       	com	r24
    4b12:	84 23       	and	r24, r20
    4b14:	8c 93       	st	X, r24
    4b16:	8c 81       	ldd	r24, Y+4	; 0x04
    4b18:	81 70       	andi	r24, 0x01	; 1
    4b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    4b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    4b1e:	98 2f       	mov	r25, r24
    4b20:	97 95       	ror	r25
    4b22:	99 27       	eor	r25, r25
    4b24:	97 95       	ror	r25
    4b26:	80 81       	ld	r24, Z
    4b28:	8f 77       	andi	r24, 0x7F	; 127
    4b2a:	89 2b       	or	r24, r25
    4b2c:	80 83       	st	Z, r24
    4b2e:	03 c0       	rjmp	.+6      	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4b30:	19 82       	std	Y+1, r1	; 0x01
    4b32:	01 c0       	rjmp	.+2      	; 0x4b36 <MCAL_DIO_SetPinValue+0x37e>
    4b34:	19 82       	std	Y+1, r1	; 0x01
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	2e 96       	adiw	r28, 0x0e	; 14
    4b3a:	0f b6       	in	r0, 0x3f	; 63
    4b3c:	f8 94       	cli
    4b3e:	de bf       	out	0x3e, r29	; 62
    4b40:	0f be       	out	0x3f, r0	; 63
    4b42:	cd bf       	out	0x3d, r28	; 61
    4b44:	cf 91       	pop	r28
    4b46:	df 91       	pop	r29
    4b48:	08 95       	ret

00004b4a <MCAL_DIO_ReadPinValue>:
    4b4a:	df 93       	push	r29
    4b4c:	cf 93       	push	r28
    4b4e:	cd b7       	in	r28, 0x3d	; 61
    4b50:	de b7       	in	r29, 0x3e	; 62
    4b52:	28 97       	sbiw	r28, 0x08	; 8
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	f8 94       	cli
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	cd bf       	out	0x3d, r28	; 61
    4b5e:	9c 83       	std	Y+4, r25	; 0x04
    4b60:	8b 83       	std	Y+3, r24	; 0x03
    4b62:	7e 83       	std	Y+6, r23	; 0x06
    4b64:	6d 83       	std	Y+5, r22	; 0x05
    4b66:	1a 82       	std	Y+2, r1	; 0x02
    4b68:	86 e0       	ldi	r24, 0x06	; 6
    4b6a:	89 83       	std	Y+1, r24	; 0x01
    4b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    4b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    4b70:	80 81       	ld	r24, Z
    4b72:	86 95       	lsr	r24
    4b74:	86 95       	lsr	r24
    4b76:	87 70       	andi	r24, 0x07	; 7
    4b78:	88 2f       	mov	r24, r24
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	88 30       	cpi	r24, 0x08	; 8
    4b7e:	91 05       	cpc	r25, r1
    4b80:	34 f4       	brge	.+12     	; 0x4b8e <MCAL_DIO_ReadPinValue+0x44>
    4b82:	eb 81       	ldd	r30, Y+3	; 0x03
    4b84:	fc 81       	ldd	r31, Y+4	; 0x04
    4b86:	80 81       	ld	r24, Z
    4b88:	80 76       	andi	r24, 0x60	; 96
    4b8a:	88 23       	and	r24, r24
    4b8c:	11 f4       	brne	.+4      	; 0x4b92 <MCAL_DIO_ReadPinValue+0x48>
    4b8e:	1a 82       	std	Y+2, r1	; 0x02
    4b90:	bb c0       	rjmp	.+374    	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4b92:	eb 81       	ldd	r30, Y+3	; 0x03
    4b94:	fc 81       	ldd	r31, Y+4	; 0x04
    4b96:	80 81       	ld	r24, Z
    4b98:	83 70       	andi	r24, 0x03	; 3
    4b9a:	28 2f       	mov	r18, r24
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	38 87       	std	Y+8, r19	; 0x08
    4ba0:	2f 83       	std	Y+7, r18	; 0x07
    4ba2:	4f 81       	ldd	r20, Y+7	; 0x07
    4ba4:	58 85       	ldd	r21, Y+8	; 0x08
    4ba6:	41 30       	cpi	r20, 0x01	; 1
    4ba8:	51 05       	cpc	r21, r1
    4baa:	09 f4       	brne	.+2      	; 0x4bae <MCAL_DIO_ReadPinValue+0x64>
    4bac:	3d c0       	rjmp	.+122    	; 0x4c28 <MCAL_DIO_ReadPinValue+0xde>
    4bae:	8f 81       	ldd	r24, Y+7	; 0x07
    4bb0:	98 85       	ldd	r25, Y+8	; 0x08
    4bb2:	82 30       	cpi	r24, 0x02	; 2
    4bb4:	91 05       	cpc	r25, r1
    4bb6:	34 f4       	brge	.+12     	; 0x4bc4 <MCAL_DIO_ReadPinValue+0x7a>
    4bb8:	2f 81       	ldd	r18, Y+7	; 0x07
    4bba:	38 85       	ldd	r19, Y+8	; 0x08
    4bbc:	21 15       	cp	r18, r1
    4bbe:	31 05       	cpc	r19, r1
    4bc0:	71 f0       	breq	.+28     	; 0x4bde <MCAL_DIO_ReadPinValue+0x94>
    4bc2:	a1 c0       	rjmp	.+322    	; 0x4d06 <MCAL_DIO_ReadPinValue+0x1bc>
    4bc4:	4f 81       	ldd	r20, Y+7	; 0x07
    4bc6:	58 85       	ldd	r21, Y+8	; 0x08
    4bc8:	42 30       	cpi	r20, 0x02	; 2
    4bca:	51 05       	cpc	r21, r1
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <MCAL_DIO_ReadPinValue+0x86>
    4bce:	51 c0       	rjmp	.+162    	; 0x4c72 <MCAL_DIO_ReadPinValue+0x128>
    4bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    4bd2:	98 85       	ldd	r25, Y+8	; 0x08
    4bd4:	83 30       	cpi	r24, 0x03	; 3
    4bd6:	91 05       	cpc	r25, r1
    4bd8:	09 f4       	brne	.+2      	; 0x4bdc <MCAL_DIO_ReadPinValue+0x92>
    4bda:	70 c0       	rjmp	.+224    	; 0x4cbc <MCAL_DIO_ReadPinValue+0x172>
    4bdc:	94 c0       	rjmp	.+296    	; 0x4d06 <MCAL_DIO_ReadPinValue+0x1bc>
    4bde:	e9 e3       	ldi	r30, 0x39	; 57
    4be0:	f0 e0       	ldi	r31, 0x00	; 0
    4be2:	80 81       	ld	r24, Z
    4be4:	28 2f       	mov	r18, r24
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	eb 81       	ldd	r30, Y+3	; 0x03
    4bea:	fc 81       	ldd	r31, Y+4	; 0x04
    4bec:	80 81       	ld	r24, Z
    4bee:	86 95       	lsr	r24
    4bf0:	86 95       	lsr	r24
    4bf2:	87 70       	andi	r24, 0x07	; 7
    4bf4:	88 2f       	mov	r24, r24
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	a9 01       	movw	r20, r18
    4bfa:	02 c0       	rjmp	.+4      	; 0x4c00 <MCAL_DIO_ReadPinValue+0xb6>
    4bfc:	55 95       	asr	r21
    4bfe:	47 95       	ror	r20
    4c00:	8a 95       	dec	r24
    4c02:	e2 f7       	brpl	.-8      	; 0x4bfc <MCAL_DIO_ReadPinValue+0xb2>
    4c04:	ca 01       	movw	r24, r20
    4c06:	81 70       	andi	r24, 0x01	; 1
    4c08:	89 83       	std	Y+1, r24	; 0x01
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	81 30       	cpi	r24, 0x01	; 1
    4c0e:	19 f0       	breq	.+6      	; 0x4c16 <MCAL_DIO_ReadPinValue+0xcc>
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	88 23       	and	r24, r24
    4c14:	39 f4       	brne	.+14     	; 0x4c24 <MCAL_DIO_ReadPinValue+0xda>
    4c16:	ed 81       	ldd	r30, Y+5	; 0x05
    4c18:	fe 81       	ldd	r31, Y+6	; 0x06
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
    4c1c:	80 83       	st	Z, r24
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	8a 83       	std	Y+2, r24	; 0x02
    4c22:	72 c0       	rjmp	.+228    	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4c24:	1a 82       	std	Y+2, r1	; 0x02
    4c26:	70 c0       	rjmp	.+224    	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4c28:	e6 e3       	ldi	r30, 0x36	; 54
    4c2a:	f0 e0       	ldi	r31, 0x00	; 0
    4c2c:	80 81       	ld	r24, Z
    4c2e:	28 2f       	mov	r18, r24
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	eb 81       	ldd	r30, Y+3	; 0x03
    4c34:	fc 81       	ldd	r31, Y+4	; 0x04
    4c36:	80 81       	ld	r24, Z
    4c38:	86 95       	lsr	r24
    4c3a:	86 95       	lsr	r24
    4c3c:	87 70       	andi	r24, 0x07	; 7
    4c3e:	88 2f       	mov	r24, r24
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	a9 01       	movw	r20, r18
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <MCAL_DIO_ReadPinValue+0x100>
    4c46:	55 95       	asr	r21
    4c48:	47 95       	ror	r20
    4c4a:	8a 95       	dec	r24
    4c4c:	e2 f7       	brpl	.-8      	; 0x4c46 <MCAL_DIO_ReadPinValue+0xfc>
    4c4e:	ca 01       	movw	r24, r20
    4c50:	81 70       	andi	r24, 0x01	; 1
    4c52:	89 83       	std	Y+1, r24	; 0x01
    4c54:	89 81       	ldd	r24, Y+1	; 0x01
    4c56:	81 30       	cpi	r24, 0x01	; 1
    4c58:	19 f0       	breq	.+6      	; 0x4c60 <MCAL_DIO_ReadPinValue+0x116>
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
    4c5c:	88 23       	and	r24, r24
    4c5e:	39 f4       	brne	.+14     	; 0x4c6e <MCAL_DIO_ReadPinValue+0x124>
    4c60:	ed 81       	ldd	r30, Y+5	; 0x05
    4c62:	fe 81       	ldd	r31, Y+6	; 0x06
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	80 83       	st	Z, r24
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	8a 83       	std	Y+2, r24	; 0x02
    4c6c:	4d c0       	rjmp	.+154    	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4c6e:	1a 82       	std	Y+2, r1	; 0x02
    4c70:	4b c0       	rjmp	.+150    	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4c72:	e3 e3       	ldi	r30, 0x33	; 51
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	80 81       	ld	r24, Z
    4c78:	28 2f       	mov	r18, r24
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	eb 81       	ldd	r30, Y+3	; 0x03
    4c7e:	fc 81       	ldd	r31, Y+4	; 0x04
    4c80:	80 81       	ld	r24, Z
    4c82:	86 95       	lsr	r24
    4c84:	86 95       	lsr	r24
    4c86:	87 70       	andi	r24, 0x07	; 7
    4c88:	88 2f       	mov	r24, r24
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	a9 01       	movw	r20, r18
    4c8e:	02 c0       	rjmp	.+4      	; 0x4c94 <MCAL_DIO_ReadPinValue+0x14a>
    4c90:	55 95       	asr	r21
    4c92:	47 95       	ror	r20
    4c94:	8a 95       	dec	r24
    4c96:	e2 f7       	brpl	.-8      	; 0x4c90 <MCAL_DIO_ReadPinValue+0x146>
    4c98:	ca 01       	movw	r24, r20
    4c9a:	81 70       	andi	r24, 0x01	; 1
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	81 30       	cpi	r24, 0x01	; 1
    4ca2:	19 f0       	breq	.+6      	; 0x4caa <MCAL_DIO_ReadPinValue+0x160>
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	88 23       	and	r24, r24
    4ca8:	39 f4       	brne	.+14     	; 0x4cb8 <MCAL_DIO_ReadPinValue+0x16e>
    4caa:	ed 81       	ldd	r30, Y+5	; 0x05
    4cac:	fe 81       	ldd	r31, Y+6	; 0x06
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	80 83       	st	Z, r24
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	8a 83       	std	Y+2, r24	; 0x02
    4cb6:	28 c0       	rjmp	.+80     	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4cb8:	1a 82       	std	Y+2, r1	; 0x02
    4cba:	26 c0       	rjmp	.+76     	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4cbc:	e0 e3       	ldi	r30, 0x30	; 48
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	80 81       	ld	r24, Z
    4cc2:	28 2f       	mov	r18, r24
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    4cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    4cca:	80 81       	ld	r24, Z
    4ccc:	86 95       	lsr	r24
    4cce:	86 95       	lsr	r24
    4cd0:	87 70       	andi	r24, 0x07	; 7
    4cd2:	88 2f       	mov	r24, r24
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	a9 01       	movw	r20, r18
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <MCAL_DIO_ReadPinValue+0x194>
    4cda:	55 95       	asr	r21
    4cdc:	47 95       	ror	r20
    4cde:	8a 95       	dec	r24
    4ce0:	e2 f7       	brpl	.-8      	; 0x4cda <MCAL_DIO_ReadPinValue+0x190>
    4ce2:	ca 01       	movw	r24, r20
    4ce4:	81 70       	andi	r24, 0x01	; 1
    4ce6:	89 83       	std	Y+1, r24	; 0x01
    4ce8:	89 81       	ldd	r24, Y+1	; 0x01
    4cea:	81 30       	cpi	r24, 0x01	; 1
    4cec:	19 f0       	breq	.+6      	; 0x4cf4 <MCAL_DIO_ReadPinValue+0x1aa>
    4cee:	89 81       	ldd	r24, Y+1	; 0x01
    4cf0:	88 23       	and	r24, r24
    4cf2:	39 f4       	brne	.+14     	; 0x4d02 <MCAL_DIO_ReadPinValue+0x1b8>
    4cf4:	ed 81       	ldd	r30, Y+5	; 0x05
    4cf6:	fe 81       	ldd	r31, Y+6	; 0x06
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	80 83       	st	Z, r24
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	8a 83       	std	Y+2, r24	; 0x02
    4d00:	03 c0       	rjmp	.+6      	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4d02:	1a 82       	std	Y+2, r1	; 0x02
    4d04:	01 c0       	rjmp	.+2      	; 0x4d08 <MCAL_DIO_ReadPinValue+0x1be>
    4d06:	1a 82       	std	Y+2, r1	; 0x02
    4d08:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0a:	28 96       	adiw	r28, 0x08	; 8
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	cd bf       	out	0x3d, r28	; 61
    4d16:	cf 91       	pop	r28
    4d18:	df 91       	pop	r29
    4d1a:	08 95       	ret

00004d1c <MCAL_DIO_TogglePinValue>:
    4d1c:	df 93       	push	r29
    4d1e:	cf 93       	push	r28
    4d20:	00 d0       	rcall	.+0      	; 0x4d22 <MCAL_DIO_TogglePinValue+0x6>
    4d22:	00 d0       	rcall	.+0      	; 0x4d24 <MCAL_DIO_TogglePinValue+0x8>
    4d24:	0f 92       	push	r0
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
    4d2a:	9b 83       	std	Y+3, r25	; 0x03
    4d2c:	8a 83       	std	Y+2, r24	; 0x02
    4d2e:	19 82       	std	Y+1, r1	; 0x01
    4d30:	ea 81       	ldd	r30, Y+2	; 0x02
    4d32:	fb 81       	ldd	r31, Y+3	; 0x03
    4d34:	80 81       	ld	r24, Z
    4d36:	86 95       	lsr	r24
    4d38:	86 95       	lsr	r24
    4d3a:	87 70       	andi	r24, 0x07	; 7
    4d3c:	88 2f       	mov	r24, r24
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	88 30       	cpi	r24, 0x08	; 8
    4d42:	91 05       	cpc	r25, r1
    4d44:	34 f4       	brge	.+12     	; 0x4d52 <MCAL_DIO_TogglePinValue+0x36>
    4d46:	ea 81       	ldd	r30, Y+2	; 0x02
    4d48:	fb 81       	ldd	r31, Y+3	; 0x03
    4d4a:	80 81       	ld	r24, Z
    4d4c:	80 76       	andi	r24, 0x60	; 96
    4d4e:	80 32       	cpi	r24, 0x20	; 32
    4d50:	11 f4       	brne	.+4      	; 0x4d56 <MCAL_DIO_TogglePinValue+0x3a>
    4d52:	19 82       	std	Y+1, r1	; 0x01
    4d54:	da c0       	rjmp	.+436    	; 0x4f0a <MCAL_DIO_TogglePinValue+0x1ee>
    4d56:	ea 81       	ldd	r30, Y+2	; 0x02
    4d58:	fb 81       	ldd	r31, Y+3	; 0x03
    4d5a:	80 81       	ld	r24, Z
    4d5c:	83 70       	andi	r24, 0x03	; 3
    4d5e:	28 2f       	mov	r18, r24
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	3d 83       	std	Y+5, r19	; 0x05
    4d64:	2c 83       	std	Y+4, r18	; 0x04
    4d66:	8c 81       	ldd	r24, Y+4	; 0x04
    4d68:	9d 81       	ldd	r25, Y+5	; 0x05
    4d6a:	81 30       	cpi	r24, 0x01	; 1
    4d6c:	91 05       	cpc	r25, r1
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <MCAL_DIO_TogglePinValue+0x56>
    4d70:	44 c0       	rjmp	.+136    	; 0x4dfa <MCAL_DIO_TogglePinValue+0xde>
    4d72:	2c 81       	ldd	r18, Y+4	; 0x04
    4d74:	3d 81       	ldd	r19, Y+5	; 0x05
    4d76:	22 30       	cpi	r18, 0x02	; 2
    4d78:	31 05       	cpc	r19, r1
    4d7a:	2c f4       	brge	.+10     	; 0x4d86 <MCAL_DIO_TogglePinValue+0x6a>
    4d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d80:	00 97       	sbiw	r24, 0x00	; 0
    4d82:	71 f0       	breq	.+28     	; 0x4da0 <MCAL_DIO_TogglePinValue+0x84>
    4d84:	c1 c0       	rjmp	.+386    	; 0x4f08 <MCAL_DIO_TogglePinValue+0x1ec>
    4d86:	2c 81       	ldd	r18, Y+4	; 0x04
    4d88:	3d 81       	ldd	r19, Y+5	; 0x05
    4d8a:	22 30       	cpi	r18, 0x02	; 2
    4d8c:	31 05       	cpc	r19, r1
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <MCAL_DIO_TogglePinValue+0x76>
    4d90:	61 c0       	rjmp	.+194    	; 0x4e54 <MCAL_DIO_TogglePinValue+0x138>
    4d92:	8c 81       	ldd	r24, Y+4	; 0x04
    4d94:	9d 81       	ldd	r25, Y+5	; 0x05
    4d96:	83 30       	cpi	r24, 0x03	; 3
    4d98:	91 05       	cpc	r25, r1
    4d9a:	09 f4       	brne	.+2      	; 0x4d9e <MCAL_DIO_TogglePinValue+0x82>
    4d9c:	88 c0       	rjmp	.+272    	; 0x4eae <MCAL_DIO_TogglePinValue+0x192>
    4d9e:	b4 c0       	rjmp	.+360    	; 0x4f08 <MCAL_DIO_TogglePinValue+0x1ec>
    4da0:	ab e3       	ldi	r26, 0x3B	; 59
    4da2:	b0 e0       	ldi	r27, 0x00	; 0
    4da4:	eb e3       	ldi	r30, 0x3B	; 59
    4da6:	f0 e0       	ldi	r31, 0x00	; 0
    4da8:	80 81       	ld	r24, Z
    4daa:	48 2f       	mov	r20, r24
    4dac:	ea 81       	ldd	r30, Y+2	; 0x02
    4dae:	fb 81       	ldd	r31, Y+3	; 0x03
    4db0:	80 81       	ld	r24, Z
    4db2:	86 95       	lsr	r24
    4db4:	86 95       	lsr	r24
    4db6:	87 70       	andi	r24, 0x07	; 7
    4db8:	28 2f       	mov	r18, r24
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	02 2e       	mov	r0, r18
    4dc2:	02 c0       	rjmp	.+4      	; 0x4dc8 <MCAL_DIO_TogglePinValue+0xac>
    4dc4:	88 0f       	add	r24, r24
    4dc6:	99 1f       	adc	r25, r25
    4dc8:	0a 94       	dec	r0
    4dca:	e2 f7       	brpl	.-8      	; 0x4dc4 <MCAL_DIO_TogglePinValue+0xa8>
    4dcc:	84 27       	eor	r24, r20
    4dce:	8c 93       	st	X, r24
    4dd0:	ea 81       	ldd	r30, Y+2	; 0x02
    4dd2:	fb 81       	ldd	r31, Y+3	; 0x03
    4dd4:	80 81       	ld	r24, Z
    4dd6:	88 1f       	adc	r24, r24
    4dd8:	88 27       	eor	r24, r24
    4dda:	88 1f       	adc	r24, r24
    4ddc:	80 95       	com	r24
    4dde:	81 70       	andi	r24, 0x01	; 1
    4de0:	ea 81       	ldd	r30, Y+2	; 0x02
    4de2:	fb 81       	ldd	r31, Y+3	; 0x03
    4de4:	98 2f       	mov	r25, r24
    4de6:	97 95       	ror	r25
    4de8:	99 27       	eor	r25, r25
    4dea:	97 95       	ror	r25
    4dec:	80 81       	ld	r24, Z
    4dee:	8f 77       	andi	r24, 0x7F	; 127
    4df0:	89 2b       	or	r24, r25
    4df2:	80 83       	st	Z, r24
    4df4:	81 e0       	ldi	r24, 0x01	; 1
    4df6:	89 83       	std	Y+1, r24	; 0x01
    4df8:	88 c0       	rjmp	.+272    	; 0x4f0a <MCAL_DIO_TogglePinValue+0x1ee>
    4dfa:	a8 e3       	ldi	r26, 0x38	; 56
    4dfc:	b0 e0       	ldi	r27, 0x00	; 0
    4dfe:	e8 e3       	ldi	r30, 0x38	; 56
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	80 81       	ld	r24, Z
    4e04:	48 2f       	mov	r20, r24
    4e06:	ea 81       	ldd	r30, Y+2	; 0x02
    4e08:	fb 81       	ldd	r31, Y+3	; 0x03
    4e0a:	80 81       	ld	r24, Z
    4e0c:	86 95       	lsr	r24
    4e0e:	86 95       	lsr	r24
    4e10:	87 70       	andi	r24, 0x07	; 7
    4e12:	28 2f       	mov	r18, r24
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	81 e0       	ldi	r24, 0x01	; 1
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	02 2e       	mov	r0, r18
    4e1c:	02 c0       	rjmp	.+4      	; 0x4e22 <MCAL_DIO_TogglePinValue+0x106>
    4e1e:	88 0f       	add	r24, r24
    4e20:	99 1f       	adc	r25, r25
    4e22:	0a 94       	dec	r0
    4e24:	e2 f7       	brpl	.-8      	; 0x4e1e <MCAL_DIO_TogglePinValue+0x102>
    4e26:	84 27       	eor	r24, r20
    4e28:	8c 93       	st	X, r24
    4e2a:	ea 81       	ldd	r30, Y+2	; 0x02
    4e2c:	fb 81       	ldd	r31, Y+3	; 0x03
    4e2e:	80 81       	ld	r24, Z
    4e30:	88 1f       	adc	r24, r24
    4e32:	88 27       	eor	r24, r24
    4e34:	88 1f       	adc	r24, r24
    4e36:	80 95       	com	r24
    4e38:	81 70       	andi	r24, 0x01	; 1
    4e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    4e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    4e3e:	98 2f       	mov	r25, r24
    4e40:	97 95       	ror	r25
    4e42:	99 27       	eor	r25, r25
    4e44:	97 95       	ror	r25
    4e46:	80 81       	ld	r24, Z
    4e48:	8f 77       	andi	r24, 0x7F	; 127
    4e4a:	89 2b       	or	r24, r25
    4e4c:	80 83       	st	Z, r24
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	89 83       	std	Y+1, r24	; 0x01
    4e52:	5b c0       	rjmp	.+182    	; 0x4f0a <MCAL_DIO_TogglePinValue+0x1ee>
    4e54:	a5 e3       	ldi	r26, 0x35	; 53
    4e56:	b0 e0       	ldi	r27, 0x00	; 0
    4e58:	e5 e3       	ldi	r30, 0x35	; 53
    4e5a:	f0 e0       	ldi	r31, 0x00	; 0
    4e5c:	80 81       	ld	r24, Z
    4e5e:	48 2f       	mov	r20, r24
    4e60:	ea 81       	ldd	r30, Y+2	; 0x02
    4e62:	fb 81       	ldd	r31, Y+3	; 0x03
    4e64:	80 81       	ld	r24, Z
    4e66:	86 95       	lsr	r24
    4e68:	86 95       	lsr	r24
    4e6a:	87 70       	andi	r24, 0x07	; 7
    4e6c:	28 2f       	mov	r18, r24
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	02 2e       	mov	r0, r18
    4e76:	02 c0       	rjmp	.+4      	; 0x4e7c <MCAL_DIO_TogglePinValue+0x160>
    4e78:	88 0f       	add	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	0a 94       	dec	r0
    4e7e:	e2 f7       	brpl	.-8      	; 0x4e78 <MCAL_DIO_TogglePinValue+0x15c>
    4e80:	84 27       	eor	r24, r20
    4e82:	8c 93       	st	X, r24
    4e84:	ea 81       	ldd	r30, Y+2	; 0x02
    4e86:	fb 81       	ldd	r31, Y+3	; 0x03
    4e88:	80 81       	ld	r24, Z
    4e8a:	88 1f       	adc	r24, r24
    4e8c:	88 27       	eor	r24, r24
    4e8e:	88 1f       	adc	r24, r24
    4e90:	80 95       	com	r24
    4e92:	81 70       	andi	r24, 0x01	; 1
    4e94:	ea 81       	ldd	r30, Y+2	; 0x02
    4e96:	fb 81       	ldd	r31, Y+3	; 0x03
    4e98:	98 2f       	mov	r25, r24
    4e9a:	97 95       	ror	r25
    4e9c:	99 27       	eor	r25, r25
    4e9e:	97 95       	ror	r25
    4ea0:	80 81       	ld	r24, Z
    4ea2:	8f 77       	andi	r24, 0x7F	; 127
    4ea4:	89 2b       	or	r24, r25
    4ea6:	80 83       	st	Z, r24
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	89 83       	std	Y+1, r24	; 0x01
    4eac:	2e c0       	rjmp	.+92     	; 0x4f0a <MCAL_DIO_TogglePinValue+0x1ee>
    4eae:	a2 e3       	ldi	r26, 0x32	; 50
    4eb0:	b0 e0       	ldi	r27, 0x00	; 0
    4eb2:	e2 e3       	ldi	r30, 0x32	; 50
    4eb4:	f0 e0       	ldi	r31, 0x00	; 0
    4eb6:	80 81       	ld	r24, Z
    4eb8:	48 2f       	mov	r20, r24
    4eba:	ea 81       	ldd	r30, Y+2	; 0x02
    4ebc:	fb 81       	ldd	r31, Y+3	; 0x03
    4ebe:	80 81       	ld	r24, Z
    4ec0:	86 95       	lsr	r24
    4ec2:	86 95       	lsr	r24
    4ec4:	87 70       	andi	r24, 0x07	; 7
    4ec6:	28 2f       	mov	r18, r24
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	02 2e       	mov	r0, r18
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <MCAL_DIO_TogglePinValue+0x1ba>
    4ed2:	88 0f       	add	r24, r24
    4ed4:	99 1f       	adc	r25, r25
    4ed6:	0a 94       	dec	r0
    4ed8:	e2 f7       	brpl	.-8      	; 0x4ed2 <MCAL_DIO_TogglePinValue+0x1b6>
    4eda:	84 27       	eor	r24, r20
    4edc:	8c 93       	st	X, r24
    4ede:	ea 81       	ldd	r30, Y+2	; 0x02
    4ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ee2:	80 81       	ld	r24, Z
    4ee4:	88 1f       	adc	r24, r24
    4ee6:	88 27       	eor	r24, r24
    4ee8:	88 1f       	adc	r24, r24
    4eea:	80 95       	com	r24
    4eec:	81 70       	andi	r24, 0x01	; 1
    4eee:	ea 81       	ldd	r30, Y+2	; 0x02
    4ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ef2:	98 2f       	mov	r25, r24
    4ef4:	97 95       	ror	r25
    4ef6:	99 27       	eor	r25, r25
    4ef8:	97 95       	ror	r25
    4efa:	80 81       	ld	r24, Z
    4efc:	8f 77       	andi	r24, 0x7F	; 127
    4efe:	89 2b       	or	r24, r25
    4f00:	80 83       	st	Z, r24
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	89 83       	std	Y+1, r24	; 0x01
    4f06:	01 c0       	rjmp	.+2      	; 0x4f0a <MCAL_DIO_TogglePinValue+0x1ee>
    4f08:	19 82       	std	Y+1, r1	; 0x01
    4f0a:	89 81       	ldd	r24, Y+1	; 0x01
    4f0c:	0f 90       	pop	r0
    4f0e:	0f 90       	pop	r0
    4f10:	0f 90       	pop	r0
    4f12:	0f 90       	pop	r0
    4f14:	0f 90       	pop	r0
    4f16:	cf 91       	pop	r28
    4f18:	df 91       	pop	r29
    4f1a:	08 95       	ret

00004f1c <MCAL_DIO_InitializePinOutput>:
    4f1c:	df 93       	push	r29
    4f1e:	cf 93       	push	r28
    4f20:	00 d0       	rcall	.+0      	; 0x4f22 <MCAL_DIO_InitializePinOutput+0x6>
    4f22:	0f 92       	push	r0
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
    4f28:	9b 83       	std	Y+3, r25	; 0x03
    4f2a:	8a 83       	std	Y+2, r24	; 0x02
    4f2c:	19 82       	std	Y+1, r1	; 0x01
    4f2e:	ea 81       	ldd	r30, Y+2	; 0x02
    4f30:	fb 81       	ldd	r31, Y+3	; 0x03
    4f32:	80 81       	ld	r24, Z
    4f34:	86 95       	lsr	r24
    4f36:	86 95       	lsr	r24
    4f38:	87 70       	andi	r24, 0x07	; 7
    4f3a:	88 2f       	mov	r24, r24
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	88 30       	cpi	r24, 0x08	; 8
    4f40:	91 05       	cpc	r25, r1
    4f42:	34 f4       	brge	.+12     	; 0x4f50 <MCAL_DIO_InitializePinOutput+0x34>
    4f44:	ea 81       	ldd	r30, Y+2	; 0x02
    4f46:	fb 81       	ldd	r31, Y+3	; 0x03
    4f48:	80 81       	ld	r24, Z
    4f4a:	80 76       	andi	r24, 0x60	; 96
    4f4c:	80 32       	cpi	r24, 0x20	; 32
    4f4e:	11 f4       	brne	.+4      	; 0x4f54 <MCAL_DIO_InitializePinOutput+0x38>
    4f50:	19 82       	std	Y+1, r1	; 0x01
    4f52:	09 c0       	rjmp	.+18     	; 0x4f66 <MCAL_DIO_InitializePinOutput+0x4a>
    4f54:	8a 81       	ldd	r24, Y+2	; 0x02
    4f56:	9b 81       	ldd	r25, Y+3	; 0x03
    4f58:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    4f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f60:	60 e0       	ldi	r22, 0x00	; 0
    4f62:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    4f66:	89 81       	ldd	r24, Y+1	; 0x01
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	08 95       	ret

00004f74 <MCAL_DIO_SetPortDirection>:
    4f74:	df 93       	push	r29
    4f76:	cf 93       	push	r28
    4f78:	00 d0       	rcall	.+0      	; 0x4f7a <MCAL_DIO_SetPortDirection+0x6>
    4f7a:	00 d0       	rcall	.+0      	; 0x4f7c <MCAL_DIO_SetPortDirection+0x8>
    4f7c:	0f 92       	push	r0
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
    4f82:	9b 83       	std	Y+3, r25	; 0x03
    4f84:	8a 83       	std	Y+2, r24	; 0x02
    4f86:	19 82       	std	Y+1, r1	; 0x01
    4f88:	ea 81       	ldd	r30, Y+2	; 0x02
    4f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4f8c:	80 81       	ld	r24, Z
    4f8e:	87 70       	andi	r24, 0x07	; 7
    4f90:	88 2f       	mov	r24, r24
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	85 30       	cpi	r24, 0x05	; 5
    4f96:	91 05       	cpc	r25, r1
    4f98:	14 f0       	brlt	.+4      	; 0x4f9e <MCAL_DIO_SetPortDirection+0x2a>
    4f9a:	19 82       	std	Y+1, r1	; 0x01
    4f9c:	47 c0       	rjmp	.+142    	; 0x502c <MCAL_DIO_SetPortDirection+0xb8>
    4f9e:	ea 81       	ldd	r30, Y+2	; 0x02
    4fa0:	fb 81       	ldd	r31, Y+3	; 0x03
    4fa2:	80 81       	ld	r24, Z
    4fa4:	87 70       	andi	r24, 0x07	; 7
    4fa6:	28 2f       	mov	r18, r24
    4fa8:	30 e0       	ldi	r19, 0x00	; 0
    4faa:	3d 83       	std	Y+5, r19	; 0x05
    4fac:	2c 83       	std	Y+4, r18	; 0x04
    4fae:	8c 81       	ldd	r24, Y+4	; 0x04
    4fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    4fb2:	81 30       	cpi	r24, 0x01	; 1
    4fb4:	91 05       	cpc	r25, r1
    4fb6:	f1 f0       	breq	.+60     	; 0x4ff4 <MCAL_DIO_SetPortDirection+0x80>
    4fb8:	2c 81       	ldd	r18, Y+4	; 0x04
    4fba:	3d 81       	ldd	r19, Y+5	; 0x05
    4fbc:	22 30       	cpi	r18, 0x02	; 2
    4fbe:	31 05       	cpc	r19, r1
    4fc0:	2c f4       	brge	.+10     	; 0x4fcc <MCAL_DIO_SetPortDirection+0x58>
    4fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    4fc6:	00 97       	sbiw	r24, 0x00	; 0
    4fc8:	61 f0       	breq	.+24     	; 0x4fe2 <MCAL_DIO_SetPortDirection+0x6e>
    4fca:	2f c0       	rjmp	.+94     	; 0x502a <MCAL_DIO_SetPortDirection+0xb6>
    4fcc:	2c 81       	ldd	r18, Y+4	; 0x04
    4fce:	3d 81       	ldd	r19, Y+5	; 0x05
    4fd0:	22 30       	cpi	r18, 0x02	; 2
    4fd2:	31 05       	cpc	r19, r1
    4fd4:	c1 f0       	breq	.+48     	; 0x5006 <MCAL_DIO_SetPortDirection+0x92>
    4fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    4fda:	83 30       	cpi	r24, 0x03	; 3
    4fdc:	91 05       	cpc	r25, r1
    4fde:	e1 f0       	breq	.+56     	; 0x5018 <MCAL_DIO_SetPortDirection+0xa4>
    4fe0:	24 c0       	rjmp	.+72     	; 0x502a <MCAL_DIO_SetPortDirection+0xb6>
    4fe2:	aa e3       	ldi	r26, 0x3A	; 58
    4fe4:	b0 e0       	ldi	r27, 0x00	; 0
    4fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    4fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    4fea:	82 81       	ldd	r24, Z+2	; 0x02
    4fec:	8c 93       	st	X, r24
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	89 83       	std	Y+1, r24	; 0x01
    4ff2:	1c c0       	rjmp	.+56     	; 0x502c <MCAL_DIO_SetPortDirection+0xb8>
    4ff4:	a7 e3       	ldi	r26, 0x37	; 55
    4ff6:	b0 e0       	ldi	r27, 0x00	; 0
    4ff8:	ea 81       	ldd	r30, Y+2	; 0x02
    4ffa:	fb 81       	ldd	r31, Y+3	; 0x03
    4ffc:	82 81       	ldd	r24, Z+2	; 0x02
    4ffe:	8c 93       	st	X, r24
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	89 83       	std	Y+1, r24	; 0x01
    5004:	13 c0       	rjmp	.+38     	; 0x502c <MCAL_DIO_SetPortDirection+0xb8>
    5006:	a4 e3       	ldi	r26, 0x34	; 52
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	ea 81       	ldd	r30, Y+2	; 0x02
    500c:	fb 81       	ldd	r31, Y+3	; 0x03
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	8c 93       	st	X, r24
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	89 83       	std	Y+1, r24	; 0x01
    5016:	0a c0       	rjmp	.+20     	; 0x502c <MCAL_DIO_SetPortDirection+0xb8>
    5018:	a1 e3       	ldi	r26, 0x31	; 49
    501a:	b0 e0       	ldi	r27, 0x00	; 0
    501c:	ea 81       	ldd	r30, Y+2	; 0x02
    501e:	fb 81       	ldd	r31, Y+3	; 0x03
    5020:	82 81       	ldd	r24, Z+2	; 0x02
    5022:	8c 93       	st	X, r24
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	89 83       	std	Y+1, r24	; 0x01
    5028:	01 c0       	rjmp	.+2      	; 0x502c <MCAL_DIO_SetPortDirection+0xb8>
    502a:	19 82       	std	Y+1, r1	; 0x01
    502c:	89 81       	ldd	r24, Y+1	; 0x01
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	cf 91       	pop	r28
    503a:	df 91       	pop	r29
    503c:	08 95       	ret

0000503e <MCAL_DIO_GetPortDirection>:
    503e:	df 93       	push	r29
    5040:	cf 93       	push	r28
    5042:	cd b7       	in	r28, 0x3d	; 61
    5044:	de b7       	in	r29, 0x3e	; 62
    5046:	27 97       	sbiw	r28, 0x07	; 7
    5048:	0f b6       	in	r0, 0x3f	; 63
    504a:	f8 94       	cli
    504c:	de bf       	out	0x3e, r29	; 62
    504e:	0f be       	out	0x3f, r0	; 63
    5050:	cd bf       	out	0x3d, r28	; 61
    5052:	9b 83       	std	Y+3, r25	; 0x03
    5054:	8a 83       	std	Y+2, r24	; 0x02
    5056:	7d 83       	std	Y+5, r23	; 0x05
    5058:	6c 83       	std	Y+4, r22	; 0x04
    505a:	19 82       	std	Y+1, r1	; 0x01
    505c:	ea 81       	ldd	r30, Y+2	; 0x02
    505e:	fb 81       	ldd	r31, Y+3	; 0x03
    5060:	80 81       	ld	r24, Z
    5062:	87 70       	andi	r24, 0x07	; 7
    5064:	88 2f       	mov	r24, r24
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	85 30       	cpi	r24, 0x05	; 5
    506a:	91 05       	cpc	r25, r1
    506c:	14 f0       	brlt	.+4      	; 0x5072 <MCAL_DIO_GetPortDirection+0x34>
    506e:	19 82       	std	Y+1, r1	; 0x01
    5070:	47 c0       	rjmp	.+142    	; 0x5100 <MCAL_DIO_GetPortDirection+0xc2>
    5072:	ea 81       	ldd	r30, Y+2	; 0x02
    5074:	fb 81       	ldd	r31, Y+3	; 0x03
    5076:	80 81       	ld	r24, Z
    5078:	87 70       	andi	r24, 0x07	; 7
    507a:	28 2f       	mov	r18, r24
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	3f 83       	std	Y+7, r19	; 0x07
    5080:	2e 83       	std	Y+6, r18	; 0x06
    5082:	8e 81       	ldd	r24, Y+6	; 0x06
    5084:	9f 81       	ldd	r25, Y+7	; 0x07
    5086:	81 30       	cpi	r24, 0x01	; 1
    5088:	91 05       	cpc	r25, r1
    508a:	f1 f0       	breq	.+60     	; 0x50c8 <MCAL_DIO_GetPortDirection+0x8a>
    508c:	2e 81       	ldd	r18, Y+6	; 0x06
    508e:	3f 81       	ldd	r19, Y+7	; 0x07
    5090:	22 30       	cpi	r18, 0x02	; 2
    5092:	31 05       	cpc	r19, r1
    5094:	2c f4       	brge	.+10     	; 0x50a0 <MCAL_DIO_GetPortDirection+0x62>
    5096:	8e 81       	ldd	r24, Y+6	; 0x06
    5098:	9f 81       	ldd	r25, Y+7	; 0x07
    509a:	00 97       	sbiw	r24, 0x00	; 0
    509c:	61 f0       	breq	.+24     	; 0x50b6 <MCAL_DIO_GetPortDirection+0x78>
    509e:	2f c0       	rjmp	.+94     	; 0x50fe <MCAL_DIO_GetPortDirection+0xc0>
    50a0:	2e 81       	ldd	r18, Y+6	; 0x06
    50a2:	3f 81       	ldd	r19, Y+7	; 0x07
    50a4:	22 30       	cpi	r18, 0x02	; 2
    50a6:	31 05       	cpc	r19, r1
    50a8:	c1 f0       	breq	.+48     	; 0x50da <MCAL_DIO_GetPortDirection+0x9c>
    50aa:	8e 81       	ldd	r24, Y+6	; 0x06
    50ac:	9f 81       	ldd	r25, Y+7	; 0x07
    50ae:	83 30       	cpi	r24, 0x03	; 3
    50b0:	91 05       	cpc	r25, r1
    50b2:	e1 f0       	breq	.+56     	; 0x50ec <MCAL_DIO_GetPortDirection+0xae>
    50b4:	24 c0       	rjmp	.+72     	; 0x50fe <MCAL_DIO_GetPortDirection+0xc0>
    50b6:	ea e3       	ldi	r30, 0x3A	; 58
    50b8:	f0 e0       	ldi	r31, 0x00	; 0
    50ba:	80 81       	ld	r24, Z
    50bc:	ec 81       	ldd	r30, Y+4	; 0x04
    50be:	fd 81       	ldd	r31, Y+5	; 0x05
    50c0:	80 83       	st	Z, r24
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	89 83       	std	Y+1, r24	; 0x01
    50c6:	1c c0       	rjmp	.+56     	; 0x5100 <MCAL_DIO_GetPortDirection+0xc2>
    50c8:	e7 e3       	ldi	r30, 0x37	; 55
    50ca:	f0 e0       	ldi	r31, 0x00	; 0
    50cc:	80 81       	ld	r24, Z
    50ce:	ec 81       	ldd	r30, Y+4	; 0x04
    50d0:	fd 81       	ldd	r31, Y+5	; 0x05
    50d2:	80 83       	st	Z, r24
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	89 83       	std	Y+1, r24	; 0x01
    50d8:	13 c0       	rjmp	.+38     	; 0x5100 <MCAL_DIO_GetPortDirection+0xc2>
    50da:	e4 e3       	ldi	r30, 0x34	; 52
    50dc:	f0 e0       	ldi	r31, 0x00	; 0
    50de:	80 81       	ld	r24, Z
    50e0:	ec 81       	ldd	r30, Y+4	; 0x04
    50e2:	fd 81       	ldd	r31, Y+5	; 0x05
    50e4:	80 83       	st	Z, r24
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	89 83       	std	Y+1, r24	; 0x01
    50ea:	0a c0       	rjmp	.+20     	; 0x5100 <MCAL_DIO_GetPortDirection+0xc2>
    50ec:	e1 e3       	ldi	r30, 0x31	; 49
    50ee:	f0 e0       	ldi	r31, 0x00	; 0
    50f0:	80 81       	ld	r24, Z
    50f2:	ec 81       	ldd	r30, Y+4	; 0x04
    50f4:	fd 81       	ldd	r31, Y+5	; 0x05
    50f6:	80 83       	st	Z, r24
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	89 83       	std	Y+1, r24	; 0x01
    50fc:	01 c0       	rjmp	.+2      	; 0x5100 <MCAL_DIO_GetPortDirection+0xc2>
    50fe:	19 82       	std	Y+1, r1	; 0x01
    5100:	89 81       	ldd	r24, Y+1	; 0x01
    5102:	27 96       	adiw	r28, 0x07	; 7
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	f8 94       	cli
    5108:	de bf       	out	0x3e, r29	; 62
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	cd bf       	out	0x3d, r28	; 61
    510e:	cf 91       	pop	r28
    5110:	df 91       	pop	r29
    5112:	08 95       	ret

00005114 <MCAL_DIO_SetPortValue>:
    5114:	df 93       	push	r29
    5116:	cf 93       	push	r28
    5118:	00 d0       	rcall	.+0      	; 0x511a <MCAL_DIO_SetPortValue+0x6>
    511a:	00 d0       	rcall	.+0      	; 0x511c <MCAL_DIO_SetPortValue+0x8>
    511c:	00 d0       	rcall	.+0      	; 0x511e <MCAL_DIO_SetPortValue+0xa>
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
    5122:	9b 83       	std	Y+3, r25	; 0x03
    5124:	8a 83       	std	Y+2, r24	; 0x02
    5126:	6c 83       	std	Y+4, r22	; 0x04
    5128:	19 82       	std	Y+1, r1	; 0x01
    512a:	ea 81       	ldd	r30, Y+2	; 0x02
    512c:	fb 81       	ldd	r31, Y+3	; 0x03
    512e:	80 81       	ld	r24, Z
    5130:	87 70       	andi	r24, 0x07	; 7
    5132:	88 2f       	mov	r24, r24
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	85 30       	cpi	r24, 0x05	; 5
    5138:	91 05       	cpc	r25, r1
    513a:	14 f0       	brlt	.+4      	; 0x5140 <MCAL_DIO_SetPortValue+0x2c>
    513c:	19 82       	std	Y+1, r1	; 0x01
    513e:	4f c0       	rjmp	.+158    	; 0x51de <MCAL_DIO_SetPortValue+0xca>
    5140:	ea 81       	ldd	r30, Y+2	; 0x02
    5142:	fb 81       	ldd	r31, Y+3	; 0x03
    5144:	80 81       	ld	r24, Z
    5146:	87 70       	andi	r24, 0x07	; 7
    5148:	28 2f       	mov	r18, r24
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	3e 83       	std	Y+6, r19	; 0x06
    514e:	2d 83       	std	Y+5, r18	; 0x05
    5150:	8d 81       	ldd	r24, Y+5	; 0x05
    5152:	9e 81       	ldd	r25, Y+6	; 0x06
    5154:	81 30       	cpi	r24, 0x01	; 1
    5156:	91 05       	cpc	r25, r1
    5158:	01 f1       	breq	.+64     	; 0x519a <MCAL_DIO_SetPortValue+0x86>
    515a:	2d 81       	ldd	r18, Y+5	; 0x05
    515c:	3e 81       	ldd	r19, Y+6	; 0x06
    515e:	22 30       	cpi	r18, 0x02	; 2
    5160:	31 05       	cpc	r19, r1
    5162:	2c f4       	brge	.+10     	; 0x516e <MCAL_DIO_SetPortValue+0x5a>
    5164:	8d 81       	ldd	r24, Y+5	; 0x05
    5166:	9e 81       	ldd	r25, Y+6	; 0x06
    5168:	00 97       	sbiw	r24, 0x00	; 0
    516a:	61 f0       	breq	.+24     	; 0x5184 <MCAL_DIO_SetPortValue+0x70>
    516c:	37 c0       	rjmp	.+110    	; 0x51dc <MCAL_DIO_SetPortValue+0xc8>
    516e:	2d 81       	ldd	r18, Y+5	; 0x05
    5170:	3e 81       	ldd	r19, Y+6	; 0x06
    5172:	22 30       	cpi	r18, 0x02	; 2
    5174:	31 05       	cpc	r19, r1
    5176:	e1 f0       	breq	.+56     	; 0x51b0 <MCAL_DIO_SetPortValue+0x9c>
    5178:	8d 81       	ldd	r24, Y+5	; 0x05
    517a:	9e 81       	ldd	r25, Y+6	; 0x06
    517c:	83 30       	cpi	r24, 0x03	; 3
    517e:	91 05       	cpc	r25, r1
    5180:	11 f1       	breq	.+68     	; 0x51c6 <MCAL_DIO_SetPortValue+0xb2>
    5182:	2c c0       	rjmp	.+88     	; 0x51dc <MCAL_DIO_SetPortValue+0xc8>
    5184:	eb e3       	ldi	r30, 0x3B	; 59
    5186:	f0 e0       	ldi	r31, 0x00	; 0
    5188:	8c 81       	ldd	r24, Y+4	; 0x04
    518a:	80 83       	st	Z, r24
    518c:	ea 81       	ldd	r30, Y+2	; 0x02
    518e:	fb 81       	ldd	r31, Y+3	; 0x03
    5190:	8c 81       	ldd	r24, Y+4	; 0x04
    5192:	81 83       	std	Z+1, r24	; 0x01
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	89 83       	std	Y+1, r24	; 0x01
    5198:	22 c0       	rjmp	.+68     	; 0x51de <MCAL_DIO_SetPortValue+0xca>
    519a:	e8 e3       	ldi	r30, 0x38	; 56
    519c:	f0 e0       	ldi	r31, 0x00	; 0
    519e:	8c 81       	ldd	r24, Y+4	; 0x04
    51a0:	80 83       	st	Z, r24
    51a2:	ea 81       	ldd	r30, Y+2	; 0x02
    51a4:	fb 81       	ldd	r31, Y+3	; 0x03
    51a6:	8c 81       	ldd	r24, Y+4	; 0x04
    51a8:	81 83       	std	Z+1, r24	; 0x01
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	89 83       	std	Y+1, r24	; 0x01
    51ae:	17 c0       	rjmp	.+46     	; 0x51de <MCAL_DIO_SetPortValue+0xca>
    51b0:	e5 e3       	ldi	r30, 0x35	; 53
    51b2:	f0 e0       	ldi	r31, 0x00	; 0
    51b4:	8c 81       	ldd	r24, Y+4	; 0x04
    51b6:	80 83       	st	Z, r24
    51b8:	ea 81       	ldd	r30, Y+2	; 0x02
    51ba:	fb 81       	ldd	r31, Y+3	; 0x03
    51bc:	8c 81       	ldd	r24, Y+4	; 0x04
    51be:	81 83       	std	Z+1, r24	; 0x01
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	0c c0       	rjmp	.+24     	; 0x51de <MCAL_DIO_SetPortValue+0xca>
    51c6:	e2 e3       	ldi	r30, 0x32	; 50
    51c8:	f0 e0       	ldi	r31, 0x00	; 0
    51ca:	8c 81       	ldd	r24, Y+4	; 0x04
    51cc:	80 83       	st	Z, r24
    51ce:	ea 81       	ldd	r30, Y+2	; 0x02
    51d0:	fb 81       	ldd	r31, Y+3	; 0x03
    51d2:	8c 81       	ldd	r24, Y+4	; 0x04
    51d4:	81 83       	std	Z+1, r24	; 0x01
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	89 83       	std	Y+1, r24	; 0x01
    51da:	01 c0       	rjmp	.+2      	; 0x51de <MCAL_DIO_SetPortValue+0xca>
    51dc:	19 82       	std	Y+1, r1	; 0x01
    51de:	89 81       	ldd	r24, Y+1	; 0x01
    51e0:	26 96       	adiw	r28, 0x06	; 6
    51e2:	0f b6       	in	r0, 0x3f	; 63
    51e4:	f8 94       	cli
    51e6:	de bf       	out	0x3e, r29	; 62
    51e8:	0f be       	out	0x3f, r0	; 63
    51ea:	cd bf       	out	0x3d, r28	; 61
    51ec:	cf 91       	pop	r28
    51ee:	df 91       	pop	r29
    51f0:	08 95       	ret

000051f2 <MCAL_DIO_ReadPortValue>:
    51f2:	df 93       	push	r29
    51f4:	cf 93       	push	r28
    51f6:	cd b7       	in	r28, 0x3d	; 61
    51f8:	de b7       	in	r29, 0x3e	; 62
    51fa:	27 97       	sbiw	r28, 0x07	; 7
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	de bf       	out	0x3e, r29	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	9b 83       	std	Y+3, r25	; 0x03
    5208:	8a 83       	std	Y+2, r24	; 0x02
    520a:	7d 83       	std	Y+5, r23	; 0x05
    520c:	6c 83       	std	Y+4, r22	; 0x04
    520e:	19 82       	std	Y+1, r1	; 0x01
    5210:	ea 81       	ldd	r30, Y+2	; 0x02
    5212:	fb 81       	ldd	r31, Y+3	; 0x03
    5214:	80 81       	ld	r24, Z
    5216:	87 70       	andi	r24, 0x07	; 7
    5218:	88 2f       	mov	r24, r24
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	85 30       	cpi	r24, 0x05	; 5
    521e:	91 05       	cpc	r25, r1
    5220:	14 f0       	brlt	.+4      	; 0x5226 <MCAL_DIO_ReadPortValue+0x34>
    5222:	19 82       	std	Y+1, r1	; 0x01
    5224:	47 c0       	rjmp	.+142    	; 0x52b4 <MCAL_DIO_ReadPortValue+0xc2>
    5226:	ea 81       	ldd	r30, Y+2	; 0x02
    5228:	fb 81       	ldd	r31, Y+3	; 0x03
    522a:	80 81       	ld	r24, Z
    522c:	87 70       	andi	r24, 0x07	; 7
    522e:	28 2f       	mov	r18, r24
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	3f 83       	std	Y+7, r19	; 0x07
    5234:	2e 83       	std	Y+6, r18	; 0x06
    5236:	8e 81       	ldd	r24, Y+6	; 0x06
    5238:	9f 81       	ldd	r25, Y+7	; 0x07
    523a:	81 30       	cpi	r24, 0x01	; 1
    523c:	91 05       	cpc	r25, r1
    523e:	f1 f0       	breq	.+60     	; 0x527c <MCAL_DIO_ReadPortValue+0x8a>
    5240:	2e 81       	ldd	r18, Y+6	; 0x06
    5242:	3f 81       	ldd	r19, Y+7	; 0x07
    5244:	22 30       	cpi	r18, 0x02	; 2
    5246:	31 05       	cpc	r19, r1
    5248:	2c f4       	brge	.+10     	; 0x5254 <MCAL_DIO_ReadPortValue+0x62>
    524a:	8e 81       	ldd	r24, Y+6	; 0x06
    524c:	9f 81       	ldd	r25, Y+7	; 0x07
    524e:	00 97       	sbiw	r24, 0x00	; 0
    5250:	61 f0       	breq	.+24     	; 0x526a <MCAL_DIO_ReadPortValue+0x78>
    5252:	2f c0       	rjmp	.+94     	; 0x52b2 <MCAL_DIO_ReadPortValue+0xc0>
    5254:	2e 81       	ldd	r18, Y+6	; 0x06
    5256:	3f 81       	ldd	r19, Y+7	; 0x07
    5258:	22 30       	cpi	r18, 0x02	; 2
    525a:	31 05       	cpc	r19, r1
    525c:	c1 f0       	breq	.+48     	; 0x528e <MCAL_DIO_ReadPortValue+0x9c>
    525e:	8e 81       	ldd	r24, Y+6	; 0x06
    5260:	9f 81       	ldd	r25, Y+7	; 0x07
    5262:	83 30       	cpi	r24, 0x03	; 3
    5264:	91 05       	cpc	r25, r1
    5266:	e1 f0       	breq	.+56     	; 0x52a0 <MCAL_DIO_ReadPortValue+0xae>
    5268:	24 c0       	rjmp	.+72     	; 0x52b2 <MCAL_DIO_ReadPortValue+0xc0>
    526a:	e9 e3       	ldi	r30, 0x39	; 57
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	80 81       	ld	r24, Z
    5270:	ec 81       	ldd	r30, Y+4	; 0x04
    5272:	fd 81       	ldd	r31, Y+5	; 0x05
    5274:	80 83       	st	Z, r24
    5276:	81 e0       	ldi	r24, 0x01	; 1
    5278:	89 83       	std	Y+1, r24	; 0x01
    527a:	1c c0       	rjmp	.+56     	; 0x52b4 <MCAL_DIO_ReadPortValue+0xc2>
    527c:	e6 e3       	ldi	r30, 0x36	; 54
    527e:	f0 e0       	ldi	r31, 0x00	; 0
    5280:	80 81       	ld	r24, Z
    5282:	ec 81       	ldd	r30, Y+4	; 0x04
    5284:	fd 81       	ldd	r31, Y+5	; 0x05
    5286:	80 83       	st	Z, r24
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	89 83       	std	Y+1, r24	; 0x01
    528c:	13 c0       	rjmp	.+38     	; 0x52b4 <MCAL_DIO_ReadPortValue+0xc2>
    528e:	e3 e3       	ldi	r30, 0x33	; 51
    5290:	f0 e0       	ldi	r31, 0x00	; 0
    5292:	80 81       	ld	r24, Z
    5294:	ec 81       	ldd	r30, Y+4	; 0x04
    5296:	fd 81       	ldd	r31, Y+5	; 0x05
    5298:	80 83       	st	Z, r24
    529a:	81 e0       	ldi	r24, 0x01	; 1
    529c:	89 83       	std	Y+1, r24	; 0x01
    529e:	0a c0       	rjmp	.+20     	; 0x52b4 <MCAL_DIO_ReadPortValue+0xc2>
    52a0:	e0 e3       	ldi	r30, 0x30	; 48
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	80 81       	ld	r24, Z
    52a6:	ec 81       	ldd	r30, Y+4	; 0x04
    52a8:	fd 81       	ldd	r31, Y+5	; 0x05
    52aa:	80 83       	st	Z, r24
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	89 83       	std	Y+1, r24	; 0x01
    52b0:	01 c0       	rjmp	.+2      	; 0x52b4 <MCAL_DIO_ReadPortValue+0xc2>
    52b2:	19 82       	std	Y+1, r1	; 0x01
    52b4:	89 81       	ldd	r24, Y+1	; 0x01
    52b6:	27 96       	adiw	r28, 0x07	; 7
    52b8:	0f b6       	in	r0, 0x3f	; 63
    52ba:	f8 94       	cli
    52bc:	de bf       	out	0x3e, r29	; 62
    52be:	0f be       	out	0x3f, r0	; 63
    52c0:	cd bf       	out	0x3d, r28	; 61
    52c2:	cf 91       	pop	r28
    52c4:	df 91       	pop	r29
    52c6:	08 95       	ret

000052c8 <MCAL_DIO_TogglePortValue>:
    52c8:	df 93       	push	r29
    52ca:	cf 93       	push	r28
    52cc:	00 d0       	rcall	.+0      	; 0x52ce <MCAL_DIO_TogglePortValue+0x6>
    52ce:	00 d0       	rcall	.+0      	; 0x52d0 <MCAL_DIO_TogglePortValue+0x8>
    52d0:	0f 92       	push	r0
    52d2:	cd b7       	in	r28, 0x3d	; 61
    52d4:	de b7       	in	r29, 0x3e	; 62
    52d6:	9b 83       	std	Y+3, r25	; 0x03
    52d8:	8a 83       	std	Y+2, r24	; 0x02
    52da:	19 82       	std	Y+1, r1	; 0x01
    52dc:	ea 81       	ldd	r30, Y+2	; 0x02
    52de:	fb 81       	ldd	r31, Y+3	; 0x03
    52e0:	80 81       	ld	r24, Z
    52e2:	87 70       	andi	r24, 0x07	; 7
    52e4:	88 2f       	mov	r24, r24
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	85 30       	cpi	r24, 0x05	; 5
    52ea:	91 05       	cpc	r25, r1
    52ec:	14 f0       	brlt	.+4      	; 0x52f2 <MCAL_DIO_TogglePortValue+0x2a>
    52ee:	19 82       	std	Y+1, r1	; 0x01
    52f0:	67 c0       	rjmp	.+206    	; 0x53c0 <MCAL_DIO_TogglePortValue+0xf8>
    52f2:	ea 81       	ldd	r30, Y+2	; 0x02
    52f4:	fb 81       	ldd	r31, Y+3	; 0x03
    52f6:	80 81       	ld	r24, Z
    52f8:	87 70       	andi	r24, 0x07	; 7
    52fa:	28 2f       	mov	r18, r24
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	3d 83       	std	Y+5, r19	; 0x05
    5300:	2c 83       	std	Y+4, r18	; 0x04
    5302:	8c 81       	ldd	r24, Y+4	; 0x04
    5304:	9d 81       	ldd	r25, Y+5	; 0x05
    5306:	81 30       	cpi	r24, 0x01	; 1
    5308:	91 05       	cpc	r25, r1
    530a:	31 f1       	breq	.+76     	; 0x5358 <MCAL_DIO_TogglePortValue+0x90>
    530c:	2c 81       	ldd	r18, Y+4	; 0x04
    530e:	3d 81       	ldd	r19, Y+5	; 0x05
    5310:	22 30       	cpi	r18, 0x02	; 2
    5312:	31 05       	cpc	r19, r1
    5314:	2c f4       	brge	.+10     	; 0x5320 <MCAL_DIO_TogglePortValue+0x58>
    5316:	8c 81       	ldd	r24, Y+4	; 0x04
    5318:	9d 81       	ldd	r25, Y+5	; 0x05
    531a:	00 97       	sbiw	r24, 0x00	; 0
    531c:	61 f0       	breq	.+24     	; 0x5336 <MCAL_DIO_TogglePortValue+0x6e>
    531e:	4f c0       	rjmp	.+158    	; 0x53be <MCAL_DIO_TogglePortValue+0xf6>
    5320:	2c 81       	ldd	r18, Y+4	; 0x04
    5322:	3d 81       	ldd	r19, Y+5	; 0x05
    5324:	22 30       	cpi	r18, 0x02	; 2
    5326:	31 05       	cpc	r19, r1
    5328:	41 f1       	breq	.+80     	; 0x537a <MCAL_DIO_TogglePortValue+0xb2>
    532a:	8c 81       	ldd	r24, Y+4	; 0x04
    532c:	9d 81       	ldd	r25, Y+5	; 0x05
    532e:	83 30       	cpi	r24, 0x03	; 3
    5330:	91 05       	cpc	r25, r1
    5332:	a1 f1       	breq	.+104    	; 0x539c <MCAL_DIO_TogglePortValue+0xd4>
    5334:	44 c0       	rjmp	.+136    	; 0x53be <MCAL_DIO_TogglePortValue+0xf6>
    5336:	ab e3       	ldi	r26, 0x3B	; 59
    5338:	b0 e0       	ldi	r27, 0x00	; 0
    533a:	ea 81       	ldd	r30, Y+2	; 0x02
    533c:	fb 81       	ldd	r31, Y+3	; 0x03
    533e:	81 81       	ldd	r24, Z+1	; 0x01
    5340:	80 95       	com	r24
    5342:	8c 93       	st	X, r24
    5344:	ea 81       	ldd	r30, Y+2	; 0x02
    5346:	fb 81       	ldd	r31, Y+3	; 0x03
    5348:	81 81       	ldd	r24, Z+1	; 0x01
    534a:	80 95       	com	r24
    534c:	ea 81       	ldd	r30, Y+2	; 0x02
    534e:	fb 81       	ldd	r31, Y+3	; 0x03
    5350:	81 83       	std	Z+1, r24	; 0x01
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	89 83       	std	Y+1, r24	; 0x01
    5356:	34 c0       	rjmp	.+104    	; 0x53c0 <MCAL_DIO_TogglePortValue+0xf8>
    5358:	a8 e3       	ldi	r26, 0x38	; 56
    535a:	b0 e0       	ldi	r27, 0x00	; 0
    535c:	ea 81       	ldd	r30, Y+2	; 0x02
    535e:	fb 81       	ldd	r31, Y+3	; 0x03
    5360:	81 81       	ldd	r24, Z+1	; 0x01
    5362:	80 95       	com	r24
    5364:	8c 93       	st	X, r24
    5366:	ea 81       	ldd	r30, Y+2	; 0x02
    5368:	fb 81       	ldd	r31, Y+3	; 0x03
    536a:	81 81       	ldd	r24, Z+1	; 0x01
    536c:	80 95       	com	r24
    536e:	ea 81       	ldd	r30, Y+2	; 0x02
    5370:	fb 81       	ldd	r31, Y+3	; 0x03
    5372:	81 83       	std	Z+1, r24	; 0x01
    5374:	81 e0       	ldi	r24, 0x01	; 1
    5376:	89 83       	std	Y+1, r24	; 0x01
    5378:	23 c0       	rjmp	.+70     	; 0x53c0 <MCAL_DIO_TogglePortValue+0xf8>
    537a:	a5 e3       	ldi	r26, 0x35	; 53
    537c:	b0 e0       	ldi	r27, 0x00	; 0
    537e:	ea 81       	ldd	r30, Y+2	; 0x02
    5380:	fb 81       	ldd	r31, Y+3	; 0x03
    5382:	81 81       	ldd	r24, Z+1	; 0x01
    5384:	80 95       	com	r24
    5386:	8c 93       	st	X, r24
    5388:	ea 81       	ldd	r30, Y+2	; 0x02
    538a:	fb 81       	ldd	r31, Y+3	; 0x03
    538c:	81 81       	ldd	r24, Z+1	; 0x01
    538e:	80 95       	com	r24
    5390:	ea 81       	ldd	r30, Y+2	; 0x02
    5392:	fb 81       	ldd	r31, Y+3	; 0x03
    5394:	81 83       	std	Z+1, r24	; 0x01
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	89 83       	std	Y+1, r24	; 0x01
    539a:	12 c0       	rjmp	.+36     	; 0x53c0 <MCAL_DIO_TogglePortValue+0xf8>
    539c:	a2 e3       	ldi	r26, 0x32	; 50
    539e:	b0 e0       	ldi	r27, 0x00	; 0
    53a0:	ea 81       	ldd	r30, Y+2	; 0x02
    53a2:	fb 81       	ldd	r31, Y+3	; 0x03
    53a4:	81 81       	ldd	r24, Z+1	; 0x01
    53a6:	80 95       	com	r24
    53a8:	8c 93       	st	X, r24
    53aa:	ea 81       	ldd	r30, Y+2	; 0x02
    53ac:	fb 81       	ldd	r31, Y+3	; 0x03
    53ae:	81 81       	ldd	r24, Z+1	; 0x01
    53b0:	80 95       	com	r24
    53b2:	ea 81       	ldd	r30, Y+2	; 0x02
    53b4:	fb 81       	ldd	r31, Y+3	; 0x03
    53b6:	81 83       	std	Z+1, r24	; 0x01
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	89 83       	std	Y+1, r24	; 0x01
    53bc:	01 c0       	rjmp	.+2      	; 0x53c0 <MCAL_DIO_TogglePortValue+0xf8>
    53be:	19 82       	std	Y+1, r1	; 0x01
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	0f 90       	pop	r0
    53c4:	0f 90       	pop	r0
    53c6:	0f 90       	pop	r0
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    53cc:	cf 91       	pop	r28
    53ce:	df 91       	pop	r29
    53d0:	08 95       	ret

000053d2 <MCAL_ADC_ADCInitStatus>:
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;


/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
    53d2:	df 93       	push	r29
    53d4:	cf 93       	push	r28
    53d6:	00 d0       	rcall	.+0      	; 0x53d8 <MCAL_ADC_ADCInitStatus+0x6>
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
    53dc:	8a 83       	std	Y+2, r24	; 0x02
{
    53de:	19 82       	std	Y+1, r1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    53e0:	8a 81       	ldd	r24, Y+2	; 0x02
    53e2:	81 30       	cpi	r24, 0x01	; 1
    53e4:	29 f0       	breq	.+10     	; 0x53f0 <MCAL_ADC_ADCInitStatus+0x1e>
    53e6:	8a 81       	ldd	r24, Y+2	; 0x02
    53e8:	88 23       	and	r24, r24
    53ea:	11 f0       	breq	.+4      	; 0x53f0 <MCAL_ADC_ADCInitStatus+0x1e>
	if(Copy_EXTIntStatus == INT_DISABLE)
    {
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    53ec:	19 82       	std	Y+1, r1	; 0x01
    53ee:	22 c0       	rjmp	.+68     	; 0x5434 <MCAL_ADC_ADCInitStatus+0x62>
		Local_ErrorStatus = E_OK;
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
	{
    53f0:	e6 e2       	ldi	r30, 0x26	; 38
    53f2:	f0 e0       	ldi	r31, 0x00	; 0
    53f4:	8a 81       	ldd	r24, Y+2	; 0x02
    53f6:	81 70       	andi	r24, 0x01	; 1
    53f8:	98 2f       	mov	r25, r24
    53fa:	97 95       	ror	r25
    53fc:	99 27       	eor	r25, r25
    53fe:	97 95       	ror	r25
    5400:	80 81       	ld	r24, Z
    5402:	8f 77       	andi	r24, 0x7F	; 127
    5404:	89 2b       	or	r24, r25
    5406:	80 83       	st	Z, r24
		switch(Copy_EXTInt.INTNum)
    5408:	8a 81       	ldd	r24, Y+2	; 0x02
    540a:	81 70       	andi	r24, 0x01	; 1
    540c:	98 2f       	mov	r25, r24
    540e:	91 70       	andi	r25, 0x01	; 1
    5410:	80 91 fd 01 	lds	r24, 0x01FD
    5414:	8e 7f       	andi	r24, 0xFE	; 254
    5416:	89 2b       	or	r24, r25
    5418:	80 93 fd 01 	sts	0x01FD, r24
	    {
    541c:	8a 81       	ldd	r24, Y+2	; 0x02
    541e:	81 70       	andi	r24, 0x01	; 1
    5420:	98 2f       	mov	r25, r24
    5422:	91 70       	andi	r25, 0x01	; 1
    5424:	80 91 ee 01 	lds	r24, 0x01EE
    5428:	8e 7f       	andi	r24, 0xFE	; 254
    542a:	89 2b       	or	r24, r25
    542c:	80 93 ee 01 	sts	0x01EE, r24
	    case EXTINT0:
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	89 83       	std	Y+1, r24	; 0x01
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    5434:	89 81       	ldd	r24, Y+1	; 0x01
	    	SET_BIT(GICR_REG, EXTINT0);
    5436:	0f 90       	pop	r0
    5438:	0f 90       	pop	r0
    543a:	cf 91       	pop	r28
    543c:	df 91       	pop	r29
    543e:	08 95       	ret

00005440 <MCAL_ADC_ADCChannelSelect>:
            Local_ErrorStatus = E_OK;
	    	break;
	    case EXTINT1:
    5440:	df 93       	push	r29
    5442:	cf 93       	push	r28
    5444:	00 d0       	rcall	.+0      	; 0x5446 <MCAL_ADC_ADCChannelSelect+0x6>
    5446:	cd b7       	in	r28, 0x3d	; 61
    5448:	de b7       	in	r29, 0x3e	; 62
    544a:	8a 83       	std	Y+2, r24	; 0x02
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
    544c:	19 82       	std	Y+1, r1	; 0x01
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    544e:	8a 81       	ldd	r24, Y+2	; 0x02
    5450:	80 32       	cpi	r24, 0x20	; 32
    5452:	90 f4       	brcc	.+36     	; 0x5478 <MCAL_ADC_ADCChannelSelect+0x38>
    5454:	8a 81       	ldd	r24, Y+2	; 0x02
    5456:	88 30       	cpi	r24, 0x08	; 8
    5458:	79 f0       	breq	.+30     	; 0x5478 <MCAL_ADC_ADCChannelSelect+0x38>
    545a:	8a 81       	ldd	r24, Y+2	; 0x02
    545c:	8a 30       	cpi	r24, 0x0A	; 10
    545e:	61 f0       	breq	.+24     	; 0x5478 <MCAL_ADC_ADCChannelSelect+0x38>
    5460:	8a 81       	ldd	r24, Y+2	; 0x02
    5462:	8c 30       	cpi	r24, 0x0C	; 12
    5464:	49 f0       	breq	.+18     	; 0x5478 <MCAL_ADC_ADCChannelSelect+0x38>
    5466:	8a 81       	ldd	r24, Y+2	; 0x02
    5468:	8e 30       	cpi	r24, 0x0E	; 14
    546a:	31 f0       	breq	.+12     	; 0x5478 <MCAL_ADC_ADCChannelSelect+0x38>
    546c:	8a 81       	ldd	r24, Y+2	; 0x02
    546e:	81 31       	cpi	r24, 0x11	; 17
    5470:	19 f0       	breq	.+6      	; 0x5478 <MCAL_ADC_ADCChannelSelect+0x38>
    5472:	8a 81       	ldd	r24, Y+2	; 0x02
    5474:	8a 31       	cpi	r24, 0x1A	; 26
    5476:	11 f4       	brne	.+4      	; 0x547c <MCAL_ADC_ADCChannelSelect+0x3c>
	    	SET_BIT(GICR_REG, EXTINT1);
	    	Local_ErrorStatus = E_OK;
	    	break;
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    5478:	19 82       	std	Y+1, r1	; 0x01
    547a:	0c c0       	rjmp	.+24     	; 0x5494 <MCAL_ADC_ADCChannelSelect+0x54>
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    		SET_BIT(GICR_REG, EXTINT2);
    547c:	e7 e2       	ldi	r30, 0x27	; 39
    547e:	f0 e0       	ldi	r31, 0x00	; 0
    5480:	8a 81       	ldd	r24, Y+2	; 0x02
    5482:	8f 71       	andi	r24, 0x1F	; 31
    5484:	98 2f       	mov	r25, r24
    5486:	9f 71       	andi	r25, 0x1F	; 31
    5488:	80 81       	ld	r24, Z
    548a:	80 7e       	andi	r24, 0xE0	; 224
    548c:	89 2b       	or	r24, r25
    548e:	80 83       	st	Z, r24
	    	    Local_ErrorStatus = E_OK;
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	89 83       	std	Y+1, r24	; 0x01
	    	}
	    	else
    5494:	89 81       	ldd	r24, Y+1	; 0x01
	    	{
    5496:	0f 90       	pop	r0
    5498:	0f 90       	pop	r0
    549a:	cf 91       	pop	r28
    549c:	df 91       	pop	r29
    549e:	08 95       	ret

000054a0 <MCAL_ADC_ADCResultAdjust>:
	    		Local_ErrorStatus = E_NOT_OK;
	    	}
	    	break;
    54a0:	df 93       	push	r29
    54a2:	cf 93       	push	r28
    54a4:	00 d0       	rcall	.+0      	; 0x54a6 <MCAL_ADC_ADCResultAdjust+0x6>
    54a6:	cd b7       	in	r28, 0x3d	; 61
    54a8:	de b7       	in	r29, 0x3e	; 62
    54aa:	8a 83       	std	Y+2, r24	; 0x02
	    default:
    54ac:	19 82       	std	Y+1, r1	; 0x01
	    	Local_ErrorStatus = E_NOT_OK;
    54ae:	8a 81       	ldd	r24, Y+2	; 0x02
    54b0:	88 23       	and	r24, r24
    54b2:	29 f0       	breq	.+10     	; 0x54be <MCAL_ADC_ADCResultAdjust+0x1e>
    54b4:	8a 81       	ldd	r24, Y+2	; 0x02
    54b6:	81 30       	cpi	r24, 0x01	; 1
    54b8:	11 f0       	breq	.+4      	; 0x54be <MCAL_ADC_ADCResultAdjust+0x1e>
	}
	}
	return Local_ErrorStatus;
    54ba:	19 82       	std	Y+1, r1	; 0x01
    54bc:	0f c0       	rjmp	.+30     	; 0x54dc <MCAL_ADC_ADCResultAdjust+0x3c>
}
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    54be:	e7 e2       	ldi	r30, 0x27	; 39
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	8a 81       	ldd	r24, Y+2	; 0x02
    54c4:	81 70       	andi	r24, 0x01	; 1
    54c6:	81 70       	andi	r24, 0x01	; 1
    54c8:	98 2f       	mov	r25, r24
    54ca:	92 95       	swap	r25
    54cc:	99 0f       	add	r25, r25
    54ce:	90 7e       	andi	r25, 0xE0	; 224
    54d0:	80 81       	ld	r24, Z
    54d2:	8f 7d       	andi	r24, 0xDF	; 223
    54d4:	89 2b       	or	r24, r25
    54d6:	80 83       	st	Z, r24
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    54d8:	81 e0       	ldi	r24, 0x01	; 1
    54da:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    54de:	0f 90       	pop	r0
    54e0:	0f 90       	pop	r0
    54e2:	cf 91       	pop	r28
    54e4:	df 91       	pop	r29
    54e6:	08 95       	ret

000054e8 <MCAL_ADC_ADCReferenceSelect>:
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    54e8:	df 93       	push	r29
    54ea:	cf 93       	push	r28
    54ec:	00 d0       	rcall	.+0      	; 0x54ee <MCAL_ADC_ADCReferenceSelect+0x6>
    54ee:	cd b7       	in	r28, 0x3d	; 61
    54f0:	de b7       	in	r29, 0x3e	; 62
    54f2:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    54f4:	19 82       	std	Y+1, r1	; 0x01
	Local_ErrorStatus = E_OK;
    54f6:	8a 81       	ldd	r24, Y+2	; 0x02
    54f8:	82 30       	cpi	r24, 0x02	; 2
    54fa:	11 f4       	brne	.+4      	; 0x5500 <MCAL_ADC_ADCReferenceSelect+0x18>
	return Local_ErrorStatus;
}
    54fc:	19 82       	std	Y+1, r1	; 0x01
    54fe:	0f c0       	rjmp	.+30     	; 0x551e <MCAL_ADC_ADCReferenceSelect+0x36>
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    5500:	e7 e2       	ldi	r30, 0x27	; 39
    5502:	f0 e0       	ldi	r31, 0x00	; 0
    5504:	8a 81       	ldd	r24, Y+2	; 0x02
    5506:	83 70       	andi	r24, 0x03	; 3
    5508:	98 2f       	mov	r25, r24
    550a:	92 95       	swap	r25
    550c:	99 0f       	add	r25, r25
    550e:	99 0f       	add	r25, r25
    5510:	90 7c       	andi	r25, 0xC0	; 192
    5512:	80 81       	ld	r24, Z
    5514:	8f 73       	andi	r24, 0x3F	; 63
    5516:	89 2b       	or	r24, r25
    5518:	80 83       	st	Z, r24
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    551e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5520:	0f 90       	pop	r0
    5522:	0f 90       	pop	r0
    5524:	cf 91       	pop	r28
    5526:	df 91       	pop	r29
    5528:	08 95       	ret

0000552a <MCAL_ADC_ADCFirstConversionStart>:
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
    552a:	df 93       	push	r29
    552c:	cf 93       	push	r28
    552e:	0f 92       	push	r0
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
	Local_ErrorStatus = E_OK;
    5534:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErrorStatus;
    5536:	e6 e2       	ldi	r30, 0x26	; 38
    5538:	f0 e0       	ldi	r31, 0x00	; 0
    553a:	80 81       	ld	r24, Z
    553c:	80 64       	ori	r24, 0x40	; 64
    553e:	80 83       	st	Z, r24
}
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	89 83       	std	Y+1, r24	; 0x01
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
    5544:	89 81       	ldd	r24, Y+1	; 0x01
{
    5546:	0f 90       	pop	r0
    5548:	cf 91       	pop	r28
    554a:	df 91       	pop	r29
    554c:	08 95       	ret

0000554e <MCAL_ADC_ADCTriggerMode>:
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
    554e:	df 93       	push	r29
    5550:	cf 93       	push	r28
    5552:	00 d0       	rcall	.+0      	; 0x5554 <MCAL_ADC_ADCTriggerMode+0x6>
    5554:	cd b7       	in	r28, 0x3d	; 61
    5556:	de b7       	in	r29, 0x3e	; 62
    5558:	8a 83       	std	Y+2, r24	; 0x02
	return Local_ErrorStatus;
    555a:	19 82       	std	Y+1, r1	; 0x01
}
    555c:	8a 81       	ldd	r24, Y+2	; 0x02
    555e:	88 30       	cpi	r24, 0x08	; 8
    5560:	41 f4       	brne	.+16     	; 0x5572 <MCAL_ADC_ADCTriggerMode+0x24>

ISR(INT0_vect)
    5562:	e6 e2       	ldi	r30, 0x26	; 38
    5564:	f0 e0       	ldi	r31, 0x00	; 0
    5566:	80 81       	ld	r24, Z
    5568:	8f 7d       	andi	r24, 0xDF	; 223
    556a:	80 83       	st	Z, r24
{
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	89 83       	std	Y+1, r24	; 0x01
    5570:	19 c0       	rjmp	.+50     	; 0x55a4 <MCAL_ADC_ADCTriggerMode+0x56>
	EXT_Interrupt_EXTINT0_CallBack();
}

ISR(INT1_vect)
    5572:	e6 e2       	ldi	r30, 0x26	; 38
    5574:	f0 e0       	ldi	r31, 0x00	; 0
    5576:	80 81       	ld	r24, Z
    5578:	80 72       	andi	r24, 0x20	; 32
    557a:	88 23       	and	r24, r24
    557c:	29 f4       	brne	.+10     	; 0x5588 <MCAL_ADC_ADCTriggerMode+0x3a>
{
	EXT_Interrupt_EXTINT1_CallBack();
    557e:	e6 e2       	ldi	r30, 0x26	; 38
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	80 81       	ld	r24, Z
    5584:	80 62       	ori	r24, 0x20	; 32
    5586:	80 83       	st	Z, r24
}

    5588:	e0 e5       	ldi	r30, 0x50	; 80
    558a:	f0 e0       	ldi	r31, 0x00	; 0
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
    558e:	87 70       	andi	r24, 0x07	; 7
    5590:	98 2f       	mov	r25, r24
    5592:	92 95       	swap	r25
    5594:	99 0f       	add	r25, r25
    5596:	90 7e       	andi	r25, 0xE0	; 224
    5598:	80 81       	ld	r24, Z
    559a:	8f 71       	andi	r24, 0x1F	; 31
    559c:	89 2b       	or	r24, r25
    559e:	80 83       	st	Z, r24
ISR(INT2_vect)
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	89 83       	std	Y+1, r24	; 0x01
{
	EXT_Interrupt_EXTINT2_CallBack();
    55a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    55a6:	0f 90       	pop	r0
    55a8:	0f 90       	pop	r0
    55aa:	cf 91       	pop	r28
    55ac:	df 91       	pop	r29
    55ae:	08 95       	ret

000055b0 <MCAL_ADC_ADCPrescalarSelect>:
    55b0:	df 93       	push	r29
    55b2:	cf 93       	push	r28
    55b4:	00 d0       	rcall	.+0      	; 0x55b6 <MCAL_ADC_ADCPrescalarSelect+0x6>
    55b6:	cd b7       	in	r28, 0x3d	; 61
    55b8:	de b7       	in	r29, 0x3e	; 62
    55ba:	8a 83       	std	Y+2, r24	; 0x02
    55bc:	19 82       	std	Y+1, r1	; 0x01
    55be:	e6 e2       	ldi	r30, 0x26	; 38
    55c0:	f0 e0       	ldi	r31, 0x00	; 0
    55c2:	8a 81       	ldd	r24, Y+2	; 0x02
    55c4:	87 70       	andi	r24, 0x07	; 7
    55c6:	98 2f       	mov	r25, r24
    55c8:	97 70       	andi	r25, 0x07	; 7
    55ca:	80 81       	ld	r24, Z
    55cc:	88 7f       	andi	r24, 0xF8	; 248
    55ce:	89 2b       	or	r24, r25
    55d0:	80 83       	st	Z, r24
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	89 83       	std	Y+1, r24	; 0x01
    55d6:	89 81       	ldd	r24, Y+1	; 0x01
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	cf 91       	pop	r28
    55de:	df 91       	pop	r29
    55e0:	08 95       	ret

000055e2 <MCAL_ADC_ADCReadResult>:
    55e2:	df 93       	push	r29
    55e4:	cf 93       	push	r28
    55e6:	00 d0       	rcall	.+0      	; 0x55e8 <MCAL_ADC_ADCReadResult+0x6>
    55e8:	00 d0       	rcall	.+0      	; 0x55ea <MCAL_ADC_ADCReadResult+0x8>
    55ea:	00 d0       	rcall	.+0      	; 0x55ec <MCAL_ADC_ADCReadResult+0xa>
    55ec:	cd b7       	in	r28, 0x3d	; 61
    55ee:	de b7       	in	r29, 0x3e	; 62
    55f0:	8c 83       	std	Y+4, r24	; 0x04
    55f2:	7e 83       	std	Y+6, r23	; 0x06
    55f4:	6d 83       	std	Y+5, r22	; 0x05
    55f6:	1b 82       	std	Y+3, r1	; 0x03
    55f8:	1a 82       	std	Y+2, r1	; 0x02
    55fa:	19 82       	std	Y+1, r1	; 0x01
    55fc:	89 81       	ldd	r24, Y+1	; 0x01
    55fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5600:	01 96       	adiw	r24, 0x01	; 1
    5602:	9a 83       	std	Y+2, r25	; 0x02
    5604:	89 83       	std	Y+1, r24	; 0x01
    5606:	e6 e2       	ldi	r30, 0x26	; 38
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 81       	ld	r24, Z
    560c:	80 71       	andi	r24, 0x10	; 16
    560e:	88 23       	and	r24, r24
    5610:	a9 f3       	breq	.-22     	; 0x55fc <MCAL_ADC_ADCReadResult+0x1a>
    5612:	80 91 f0 01 	lds	r24, 0x01F0
    5616:	81 70       	andi	r24, 0x01	; 1
    5618:	88 23       	and	r24, r24
    561a:	e9 f4       	brne	.+58     	; 0x5656 <MCAL_ADC_ADCReadResult+0x74>
    561c:	e4 e2       	ldi	r30, 0x24	; 36
    561e:	f0 e0       	ldi	r31, 0x00	; 0
    5620:	80 81       	ld	r24, Z
    5622:	88 2f       	mov	r24, r24
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	ed 81       	ldd	r30, Y+5	; 0x05
    5628:	fe 81       	ldd	r31, Y+6	; 0x06
    562a:	91 83       	std	Z+1, r25	; 0x01
    562c:	80 83       	st	Z, r24
    562e:	ed 81       	ldd	r30, Y+5	; 0x05
    5630:	fe 81       	ldd	r31, Y+6	; 0x06
    5632:	20 81       	ld	r18, Z
    5634:	31 81       	ldd	r19, Z+1	; 0x01
    5636:	e5 e2       	ldi	r30, 0x25	; 37
    5638:	f0 e0       	ldi	r31, 0x00	; 0
    563a:	80 81       	ld	r24, Z
    563c:	88 2f       	mov	r24, r24
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	98 2f       	mov	r25, r24
    5642:	88 27       	eor	r24, r24
    5644:	82 2b       	or	r24, r18
    5646:	93 2b       	or	r25, r19
    5648:	ed 81       	ldd	r30, Y+5	; 0x05
    564a:	fe 81       	ldd	r31, Y+6	; 0x06
    564c:	91 83       	std	Z+1, r25	; 0x01
    564e:	80 83       	st	Z, r24
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	8b 83       	std	Y+3, r24	; 0x03
    5654:	27 c0       	rjmp	.+78     	; 0x56a4 <MCAL_ADC_ADCReadResult+0xc2>
    5656:	80 91 f0 01 	lds	r24, 0x01F0
    565a:	81 70       	andi	r24, 0x01	; 1
    565c:	88 23       	and	r24, r24
    565e:	11 f1       	breq	.+68     	; 0x56a4 <MCAL_ADC_ADCReadResult+0xc2>
    5660:	e4 e2       	ldi	r30, 0x24	; 36
    5662:	f0 e0       	ldi	r31, 0x00	; 0
    5664:	80 81       	ld	r24, Z
    5666:	82 95       	swap	r24
    5668:	86 95       	lsr	r24
    566a:	86 95       	lsr	r24
    566c:	83 70       	andi	r24, 0x03	; 3
    566e:	88 2f       	mov	r24, r24
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	ed 81       	ldd	r30, Y+5	; 0x05
    5674:	fe 81       	ldd	r31, Y+6	; 0x06
    5676:	91 83       	std	Z+1, r25	; 0x01
    5678:	80 83       	st	Z, r24
    567a:	ed 81       	ldd	r30, Y+5	; 0x05
    567c:	fe 81       	ldd	r31, Y+6	; 0x06
    567e:	20 81       	ld	r18, Z
    5680:	31 81       	ldd	r19, Z+1	; 0x01
    5682:	e5 e2       	ldi	r30, 0x25	; 37
    5684:	f0 e0       	ldi	r31, 0x00	; 0
    5686:	80 81       	ld	r24, Z
    5688:	88 2f       	mov	r24, r24
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	88 0f       	add	r24, r24
    568e:	99 1f       	adc	r25, r25
    5690:	88 0f       	add	r24, r24
    5692:	99 1f       	adc	r25, r25
    5694:	82 2b       	or	r24, r18
    5696:	93 2b       	or	r25, r19
    5698:	ed 81       	ldd	r30, Y+5	; 0x05
    569a:	fe 81       	ldd	r31, Y+6	; 0x06
    569c:	91 83       	std	Z+1, r25	; 0x01
    569e:	80 83       	st	Z, r24
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	8b 83       	std	Y+3, r24	; 0x03
    56a4:	8b 81       	ldd	r24, Y+3	; 0x03
    56a6:	26 96       	adiw	r28, 0x06	; 6
    56a8:	0f b6       	in	r0, 0x3f	; 63
    56aa:	f8 94       	cli
    56ac:	de bf       	out	0x3e, r29	; 62
    56ae:	0f be       	out	0x3f, r0	; 63
    56b0:	cd bf       	out	0x3d, r28	; 61
    56b2:	cf 91       	pop	r28
    56b4:	df 91       	pop	r29
    56b6:	08 95       	ret

000056b8 <MCAL_ADC_ADCInterruptStatus>:
    56b8:	df 93       	push	r29
    56ba:	cf 93       	push	r28
    56bc:	00 d0       	rcall	.+0      	; 0x56be <MCAL_ADC_ADCInterruptStatus+0x6>
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
    56c2:	8a 83       	std	Y+2, r24	; 0x02
    56c4:	19 82       	std	Y+1, r1	; 0x01
    56c6:	8a 81       	ldd	r24, Y+2	; 0x02
    56c8:	88 23       	and	r24, r24
    56ca:	29 f0       	breq	.+10     	; 0x56d6 <MCAL_ADC_ADCInterruptStatus+0x1e>
    56cc:	8a 81       	ldd	r24, Y+2	; 0x02
    56ce:	81 30       	cpi	r24, 0x01	; 1
    56d0:	11 f0       	breq	.+4      	; 0x56d6 <MCAL_ADC_ADCInterruptStatus+0x1e>
    56d2:	19 82       	std	Y+1, r1	; 0x01
    56d4:	0f c0       	rjmp	.+30     	; 0x56f4 <MCAL_ADC_ADCInterruptStatus+0x3c>
    56d6:	e6 e2       	ldi	r30, 0x26	; 38
    56d8:	f0 e0       	ldi	r31, 0x00	; 0
    56da:	8a 81       	ldd	r24, Y+2	; 0x02
    56dc:	81 70       	andi	r24, 0x01	; 1
    56de:	81 70       	andi	r24, 0x01	; 1
    56e0:	98 2f       	mov	r25, r24
    56e2:	99 0f       	add	r25, r25
    56e4:	99 0f       	add	r25, r25
    56e6:	99 0f       	add	r25, r25
    56e8:	80 81       	ld	r24, Z
    56ea:	87 7f       	andi	r24, 0xF7	; 247
    56ec:	89 2b       	or	r24, r25
    56ee:	80 83       	st	Z, r24
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	89 83       	std	Y+1, r24	; 0x01
    56f4:	89 81       	ldd	r24, Y+1	; 0x01
    56f6:	0f 90       	pop	r0
    56f8:	0f 90       	pop	r0
    56fa:	cf 91       	pop	r28
    56fc:	df 91       	pop	r29
    56fe:	08 95       	ret

00005700 <MCAL_ADC_ADCINTFlagRead>:
    5700:	df 93       	push	r29
    5702:	cf 93       	push	r28
    5704:	00 d0       	rcall	.+0      	; 0x5706 <MCAL_ADC_ADCINTFlagRead+0x6>
    5706:	0f 92       	push	r0
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
    570c:	9b 83       	std	Y+3, r25	; 0x03
    570e:	8a 83       	std	Y+2, r24	; 0x02
    5710:	19 82       	std	Y+1, r1	; 0x01
    5712:	e6 e2       	ldi	r30, 0x26	; 38
    5714:	f0 e0       	ldi	r31, 0x00	; 0
    5716:	80 81       	ld	r24, Z
    5718:	82 95       	swap	r24
    571a:	8f 70       	andi	r24, 0x0F	; 15
    571c:	81 70       	andi	r24, 0x01	; 1
    571e:	ea 81       	ldd	r30, Y+2	; 0x02
    5720:	fb 81       	ldd	r31, Y+3	; 0x03
    5722:	80 83       	st	Z, r24
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	89 83       	std	Y+1, r24	; 0x01
    5728:	89 81       	ldd	r24, Y+1	; 0x01
    572a:	0f 90       	pop	r0
    572c:	0f 90       	pop	r0
    572e:	0f 90       	pop	r0
    5730:	cf 91       	pop	r28
    5732:	df 91       	pop	r29
    5734:	08 95       	ret

00005736 <MCAL_ADC_ADCINTFlagClear>:
    5736:	df 93       	push	r29
    5738:	cf 93       	push	r28
    573a:	0f 92       	push	r0
    573c:	cd b7       	in	r28, 0x3d	; 61
    573e:	de b7       	in	r29, 0x3e	; 62
    5740:	19 82       	std	Y+1, r1	; 0x01
    5742:	e6 e2       	ldi	r30, 0x26	; 38
    5744:	f0 e0       	ldi	r31, 0x00	; 0
    5746:	80 81       	ld	r24, Z
    5748:	8f 7e       	andi	r24, 0xEF	; 239
    574a:	80 83       	st	Z, r24
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	89 83       	std	Y+1, r24	; 0x01
    5750:	89 81       	ldd	r24, Y+1	; 0x01
    5752:	0f 90       	pop	r0
    5754:	cf 91       	pop	r28
    5756:	df 91       	pop	r29
    5758:	08 95       	ret

0000575a <MCAL_ADC_ADCSetCallBack>:
    575a:	df 93       	push	r29
    575c:	cf 93       	push	r28
    575e:	00 d0       	rcall	.+0      	; 0x5760 <MCAL_ADC_ADCSetCallBack+0x6>
    5760:	0f 92       	push	r0
    5762:	cd b7       	in	r28, 0x3d	; 61
    5764:	de b7       	in	r29, 0x3e	; 62
    5766:	9b 83       	std	Y+3, r25	; 0x03
    5768:	8a 83       	std	Y+2, r24	; 0x02
    576a:	19 82       	std	Y+1, r1	; 0x01
    576c:	8a 81       	ldd	r24, Y+2	; 0x02
    576e:	9b 81       	ldd	r25, Y+3	; 0x03
    5770:	90 93 ed 01 	sts	0x01ED, r25
    5774:	80 93 ec 01 	sts	0x01EC, r24
    5778:	81 e0       	ldi	r24, 0x01	; 1
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	89 81       	ldd	r24, Y+1	; 0x01
    577e:	0f 90       	pop	r0
    5780:	0f 90       	pop	r0
    5782:	0f 90       	pop	r0
    5784:	cf 91       	pop	r28
    5786:	df 91       	pop	r29
    5788:	08 95       	ret

0000578a <MCAL_ADC_ADCOBJUpdate>:
    578a:	df 93       	push	r29
    578c:	cf 93       	push	r28
    578e:	0f 92       	push	r0
    5790:	cd b7       	in	r28, 0x3d	; 61
    5792:	de b7       	in	r29, 0x3e	; 62
    5794:	19 82       	std	Y+1, r1	; 0x01
    5796:	80 91 ee 01 	lds	r24, 0x01EE
    579a:	81 70       	andi	r24, 0x01	; 1
    579c:	98 2f       	mov	r25, r24
    579e:	91 70       	andi	r25, 0x01	; 1
    57a0:	80 91 fd 01 	lds	r24, 0x01FD
    57a4:	8e 7f       	andi	r24, 0xFE	; 254
    57a6:	89 2b       	or	r24, r25
    57a8:	80 93 fd 01 	sts	0x01FD, r24
    57ac:	80 91 ef 01 	lds	r24, 0x01EF
    57b0:	80 93 fe 01 	sts	0x01FE, r24
    57b4:	80 91 f3 01 	lds	r24, 0x01F3
    57b8:	81 70       	andi	r24, 0x01	; 1
    57ba:	98 2f       	mov	r25, r24
    57bc:	91 70       	andi	r25, 0x01	; 1
    57be:	80 91 02 02 	lds	r24, 0x0202
    57c2:	8e 7f       	andi	r24, 0xFE	; 254
    57c4:	89 2b       	or	r24, r25
    57c6:	80 93 02 02 	sts	0x0202, r24
    57ca:	80 91 f0 01 	lds	r24, 0x01F0
    57ce:	81 70       	andi	r24, 0x01	; 1
    57d0:	98 2f       	mov	r25, r24
    57d2:	91 70       	andi	r25, 0x01	; 1
    57d4:	80 91 ff 01 	lds	r24, 0x01FF
    57d8:	8e 7f       	andi	r24, 0xFE	; 254
    57da:	89 2b       	or	r24, r25
    57dc:	80 93 ff 01 	sts	0x01FF, r24
    57e0:	80 91 f2 01 	lds	r24, 0x01F2
    57e4:	80 93 01 02 	sts	0x0201, r24
    57e8:	80 91 f1 01 	lds	r24, 0x01F1
    57ec:	80 93 00 02 	sts	0x0200, r24
    57f0:	81 e0       	ldi	r24, 0x01	; 1
    57f2:	89 83       	std	Y+1, r24	; 0x01
    57f4:	89 81       	ldd	r24, Y+1	; 0x01
    57f6:	0f 90       	pop	r0
    57f8:	cf 91       	pop	r28
    57fa:	df 91       	pop	r29
    57fc:	08 95       	ret

000057fe <__vector_16>:
    57fe:	1f 92       	push	r1
    5800:	0f 92       	push	r0
    5802:	0f b6       	in	r0, 0x3f	; 63
    5804:	0f 92       	push	r0
    5806:	11 24       	eor	r1, r1
    5808:	2f 93       	push	r18
    580a:	3f 93       	push	r19
    580c:	4f 93       	push	r20
    580e:	5f 93       	push	r21
    5810:	6f 93       	push	r22
    5812:	7f 93       	push	r23
    5814:	8f 93       	push	r24
    5816:	9f 93       	push	r25
    5818:	af 93       	push	r26
    581a:	bf 93       	push	r27
    581c:	ef 93       	push	r30
    581e:	ff 93       	push	r31
    5820:	df 93       	push	r29
    5822:	cf 93       	push	r28
    5824:	cd b7       	in	r28, 0x3d	; 61
    5826:	de b7       	in	r29, 0x3e	; 62
    5828:	e0 91 ec 01 	lds	r30, 0x01EC
    582c:	f0 91 ed 01 	lds	r31, 0x01ED
    5830:	09 95       	icall
    5832:	cf 91       	pop	r28
    5834:	df 91       	pop	r29
    5836:	ff 91       	pop	r31
    5838:	ef 91       	pop	r30
    583a:	bf 91       	pop	r27
    583c:	af 91       	pop	r26
    583e:	9f 91       	pop	r25
    5840:	8f 91       	pop	r24
    5842:	7f 91       	pop	r23
    5844:	6f 91       	pop	r22
    5846:	5f 91       	pop	r21
    5848:	4f 91       	pop	r20
    584a:	3f 91       	pop	r19
    584c:	2f 91       	pop	r18
    584e:	0f 90       	pop	r0
    5850:	0f be       	out	0x3f, r0	; 63
    5852:	0f 90       	pop	r0
    5854:	1f 90       	pop	r1
    5856:	18 95       	reti

00005858 <HAL_SSD_SSDInit>:

#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
    5858:	df 93       	push	r29
    585a:	cf 93       	push	r28
    585c:	00 d0       	rcall	.+0      	; 0x585e <HAL_SSD_SSDInit+0x6>
    585e:	00 d0       	rcall	.+0      	; 0x5860 <HAL_SSD_SSDInit+0x8>
    5860:	cd b7       	in	r28, 0x3d	; 61
    5862:	de b7       	in	r29, 0x3e	; 62
    5864:	9b 83       	std	Y+3, r25	; 0x03
    5866:	8a 83       	std	Y+2, r24	; 0x02
    5868:	6c 83       	std	Y+4, r22	; 0x04
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
    586a:	19 82       	std	Y+1, r1	; 0x01
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;

    586c:	8c 81       	ldd	r24, Y+4	; 0x04
    586e:	81 30       	cpi	r24, 0x01	; 1
    5870:	29 f4       	brne	.+10     	; 0x587c <HAL_SSD_SSDInit+0x24>

/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    5872:	8a 81       	ldd	r24, Y+2	; 0x02
    5874:	9b 81       	ldd	r25, Y+3	; 0x03
    5876:	02 96       	adiw	r24, 0x02	; 2
    5878:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    587c:	8a 81       	ldd	r24, Y+2	; 0x02
    587e:	9b 81       	ldd	r25, Y+3	; 0x03
    5880:	03 96       	adiw	r24, 0x03	; 3
    5882:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	if(Copy_EXTIntStatus == INT_DISABLE)
    5886:	8a 81       	ldd	r24, Y+2	; 0x02
    5888:	9b 81       	ldd	r25, Y+3	; 0x03
    588a:	04 96       	adiw	r24, 0x04	; 4
    588c:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    {
    5890:	8a 81       	ldd	r24, Y+2	; 0x02
    5892:	9b 81       	ldd	r25, Y+3	; 0x03
    5894:	05 96       	adiw	r24, 0x05	; 5
    5896:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    589a:	8a 81       	ldd	r24, Y+2	; 0x02
    589c:	9b 81       	ldd	r25, Y+3	; 0x03
    589e:	06 96       	adiw	r24, 0x06	; 6
    58a0:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
		Local_ErrorStatus = E_OK;
    58a4:	ea 81       	ldd	r30, Y+2	; 0x02
    58a6:	fb 81       	ldd	r31, Y+3	; 0x03
    58a8:	81 81       	ldd	r24, Z+1	; 0x01
    58aa:	88 23       	and	r24, r24
    58ac:	79 f4       	brne	.+30     	; 0x58cc <HAL_SSD_SSDInit+0x74>
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
    58ae:	8a 81       	ldd	r24, Y+2	; 0x02
    58b0:	9b 81       	ldd	r25, Y+3	; 0x03
    58b2:	07 96       	adiw	r24, 0x07	; 7
    58b4:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	{
    58b8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ba:	9b 81       	ldd	r25, Y+3	; 0x03
    58bc:	08 96       	adiw	r24, 0x08	; 8
    58be:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
		switch(Copy_EXTInt.INTNum)
    58c2:	8a 81       	ldd	r24, Y+2	; 0x02
    58c4:	9b 81       	ldd	r25, Y+3	; 0x03
    58c6:	09 96       	adiw	r24, 0x09	; 9
    58c8:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	    {
	    case EXTINT0:
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	89 83       	std	Y+1, r24	; 0x01
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    58d0:	89 81       	ldd	r24, Y+1	; 0x01
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    58d2:	0f 90       	pop	r0
    58d4:	0f 90       	pop	r0
    58d6:	0f 90       	pop	r0
    58d8:	0f 90       	pop	r0
    58da:	cf 91       	pop	r28
    58dc:	df 91       	pop	r29
    58de:	08 95       	ret

000058e0 <HAL_SSD_SSDDisplay>:
	    	SET_BIT(GICR_REG, EXTINT0);
            Local_ErrorStatus = E_OK;
	    	break;
    58e0:	df 93       	push	r29
    58e2:	cf 93       	push	r28
    58e4:	00 d0       	rcall	.+0      	; 0x58e6 <HAL_SSD_SSDDisplay+0x6>
    58e6:	0f 92       	push	r0
    58e8:	cd b7       	in	r28, 0x3d	; 61
    58ea:	de b7       	in	r29, 0x3e	; 62
    58ec:	9b 83       	std	Y+3, r25	; 0x03
    58ee:	8a 83       	std	Y+2, r24	; 0x02
	    case EXTINT1:
    58f0:	19 82       	std	Y+1, r1	; 0x01
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    58f2:	ea 81       	ldd	r30, Y+2	; 0x02
    58f4:	fb 81       	ldd	r31, Y+3	; 0x03
    58f6:	81 81       	ldd	r24, Z+1	; 0x01
    58f8:	88 23       	and	r24, r24
    58fa:	09 f0       	breq	.+2      	; 0x58fe <HAL_SSD_SSDDisplay+0x1e>
    58fc:	95 c0       	rjmp	.+298    	; 0x5a28 <HAL_SSD_SSDDisplay+0x148>
	    	SET_BIT(GICR_REG, EXTINT1);
	    	Local_ErrorStatus = E_OK;
    58fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5900:	9b 81       	ldd	r25, Y+3	; 0x03
    5902:	ac 01       	movw	r20, r24
    5904:	4d 5f       	subi	r20, 0xFD	; 253
    5906:	5f 4f       	sbci	r21, 0xFF	; 255
    5908:	ea 81       	ldd	r30, Y+2	; 0x02
    590a:	fb 81       	ldd	r31, Y+3	; 0x03
    590c:	80 81       	ld	r24, Z
    590e:	98 2f       	mov	r25, r24
    5910:	ea 81       	ldd	r30, Y+2	; 0x02
    5912:	fb 81       	ldd	r31, Y+3	; 0x03
    5914:	82 85       	ldd	r24, Z+10	; 0x0a
    5916:	81 70       	andi	r24, 0x01	; 1
    5918:	89 27       	eor	r24, r25
    591a:	28 2f       	mov	r18, r24
    591c:	ca 01       	movw	r24, r20
    591e:	62 2f       	mov	r22, r18
    5920:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	break;
    5924:	8a 81       	ldd	r24, Y+2	; 0x02
    5926:	9b 81       	ldd	r25, Y+3	; 0x03
    5928:	ac 01       	movw	r20, r24
    592a:	4c 5f       	subi	r20, 0xFC	; 252
    592c:	5f 4f       	sbci	r21, 0xFF	; 255
    592e:	ea 81       	ldd	r30, Y+2	; 0x02
    5930:	fb 81       	ldd	r31, Y+3	; 0x03
    5932:	80 81       	ld	r24, Z
    5934:	98 2f       	mov	r25, r24
    5936:	ea 81       	ldd	r30, Y+2	; 0x02
    5938:	fb 81       	ldd	r31, Y+3	; 0x03
    593a:	82 85       	ldd	r24, Z+10	; 0x0a
    593c:	86 95       	lsr	r24
    593e:	81 70       	andi	r24, 0x01	; 1
    5940:	89 27       	eor	r24, r25
    5942:	28 2f       	mov	r18, r24
    5944:	ca 01       	movw	r24, r20
    5946:	62 2f       	mov	r22, r18
    5948:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    case EXTINT2:
    594c:	8a 81       	ldd	r24, Y+2	; 0x02
    594e:	9b 81       	ldd	r25, Y+3	; 0x03
    5950:	ac 01       	movw	r20, r24
    5952:	4b 5f       	subi	r20, 0xFB	; 251
    5954:	5f 4f       	sbci	r21, 0xFF	; 255
    5956:	ea 81       	ldd	r30, Y+2	; 0x02
    5958:	fb 81       	ldd	r31, Y+3	; 0x03
    595a:	80 81       	ld	r24, Z
    595c:	98 2f       	mov	r25, r24
    595e:	ea 81       	ldd	r30, Y+2	; 0x02
    5960:	fb 81       	ldd	r31, Y+3	; 0x03
    5962:	82 85       	ldd	r24, Z+10	; 0x0a
    5964:	86 95       	lsr	r24
    5966:	86 95       	lsr	r24
    5968:	81 70       	andi	r24, 0x01	; 1
    596a:	89 27       	eor	r24, r25
    596c:	28 2f       	mov	r18, r24
    596e:	ca 01       	movw	r24, r20
    5970:	62 2f       	mov	r22, r18
    5972:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    5976:	8a 81       	ldd	r24, Y+2	; 0x02
    5978:	9b 81       	ldd	r25, Y+3	; 0x03
    597a:	ac 01       	movw	r20, r24
    597c:	4a 5f       	subi	r20, 0xFA	; 250
    597e:	5f 4f       	sbci	r21, 0xFF	; 255
    5980:	ea 81       	ldd	r30, Y+2	; 0x02
    5982:	fb 81       	ldd	r31, Y+3	; 0x03
    5984:	80 81       	ld	r24, Z
    5986:	98 2f       	mov	r25, r24
    5988:	ea 81       	ldd	r30, Y+2	; 0x02
    598a:	fb 81       	ldd	r31, Y+3	; 0x03
    598c:	82 85       	ldd	r24, Z+10	; 0x0a
    598e:	86 95       	lsr	r24
    5990:	86 95       	lsr	r24
    5992:	86 95       	lsr	r24
    5994:	81 70       	andi	r24, 0x01	; 1
    5996:	89 27       	eor	r24, r25
    5998:	28 2f       	mov	r18, r24
    599a:	ca 01       	movw	r24, r20
    599c:	62 2f       	mov	r22, r18
    599e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	{
    59a2:	8a 81       	ldd	r24, Y+2	; 0x02
    59a4:	9b 81       	ldd	r25, Y+3	; 0x03
    59a6:	ac 01       	movw	r20, r24
    59a8:	49 5f       	subi	r20, 0xF9	; 249
    59aa:	5f 4f       	sbci	r21, 0xFF	; 255
    59ac:	ea 81       	ldd	r30, Y+2	; 0x02
    59ae:	fb 81       	ldd	r31, Y+3	; 0x03
    59b0:	80 81       	ld	r24, Z
    59b2:	98 2f       	mov	r25, r24
    59b4:	ea 81       	ldd	r30, Y+2	; 0x02
    59b6:	fb 81       	ldd	r31, Y+3	; 0x03
    59b8:	82 85       	ldd	r24, Z+10	; 0x0a
    59ba:	82 95       	swap	r24
    59bc:	8f 70       	andi	r24, 0x0F	; 15
    59be:	81 70       	andi	r24, 0x01	; 1
    59c0:	89 27       	eor	r24, r25
    59c2:	28 2f       	mov	r18, r24
    59c4:	ca 01       	movw	r24, r20
    59c6:	62 2f       	mov	r22, r18
    59c8:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
    59cc:	8a 81       	ldd	r24, Y+2	; 0x02
    59ce:	9b 81       	ldd	r25, Y+3	; 0x03
    59d0:	ac 01       	movw	r20, r24
    59d2:	48 5f       	subi	r20, 0xF8	; 248
    59d4:	5f 4f       	sbci	r21, 0xFF	; 255
    59d6:	ea 81       	ldd	r30, Y+2	; 0x02
    59d8:	fb 81       	ldd	r31, Y+3	; 0x03
    59da:	80 81       	ld	r24, Z
    59dc:	98 2f       	mov	r25, r24
    59de:	ea 81       	ldd	r30, Y+2	; 0x02
    59e0:	fb 81       	ldd	r31, Y+3	; 0x03
    59e2:	82 85       	ldd	r24, Z+10	; 0x0a
    59e4:	82 95       	swap	r24
    59e6:	86 95       	lsr	r24
    59e8:	87 70       	andi	r24, 0x07	; 7
    59ea:	81 70       	andi	r24, 0x01	; 1
    59ec:	89 27       	eor	r24, r25
    59ee:	28 2f       	mov	r18, r24
    59f0:	ca 01       	movw	r24, r20
    59f2:	62 2f       	mov	r22, r18
    59f4:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    59f8:	8a 81       	ldd	r24, Y+2	; 0x02
    59fa:	9b 81       	ldd	r25, Y+3	; 0x03
    59fc:	ac 01       	movw	r20, r24
    59fe:	47 5f       	subi	r20, 0xF7	; 247
    5a00:	5f 4f       	sbci	r21, 0xFF	; 255
    5a02:	ea 81       	ldd	r30, Y+2	; 0x02
    5a04:	fb 81       	ldd	r31, Y+3	; 0x03
    5a06:	80 81       	ld	r24, Z
    5a08:	98 2f       	mov	r25, r24
    5a0a:	ea 81       	ldd	r30, Y+2	; 0x02
    5a0c:	fb 81       	ldd	r31, Y+3	; 0x03
    5a0e:	82 85       	ldd	r24, Z+10	; 0x0a
    5a10:	82 95       	swap	r24
    5a12:	86 95       	lsr	r24
    5a14:	86 95       	lsr	r24
    5a16:	83 70       	andi	r24, 0x03	; 3
    5a18:	81 70       	andi	r24, 0x01	; 1
    5a1a:	89 27       	eor	r24, r25
    5a1c:	28 2f       	mov	r18, r24
    5a1e:	ca 01       	movw	r24, r20
    5a20:	62 2f       	mov	r22, r18
    5a22:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    5a26:	43 c0       	rjmp	.+134    	; 0x5aae <HAL_SSD_SSDDisplay+0x1ce>
	    		SET_BIT(GICR_REG, EXTINT2);
	    	    Local_ErrorStatus = E_OK;
    5a28:	ea 81       	ldd	r30, Y+2	; 0x02
    5a2a:	fb 81       	ldd	r31, Y+3	; 0x03
    5a2c:	81 81       	ldd	r24, Z+1	; 0x01
    5a2e:	81 30       	cpi	r24, 0x01	; 1
    5a30:	f1 f5       	brne	.+124    	; 0x5aae <HAL_SSD_SSDDisplay+0x1ce>
	    	}
	    	else
    5a32:	8a 81       	ldd	r24, Y+2	; 0x02
    5a34:	9b 81       	ldd	r25, Y+3	; 0x03
    5a36:	9c 01       	movw	r18, r24
    5a38:	2d 5f       	subi	r18, 0xFD	; 253
    5a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a3c:	ea 81       	ldd	r30, Y+2	; 0x02
    5a3e:	fb 81       	ldd	r31, Y+3	; 0x03
    5a40:	82 85       	ldd	r24, Z+10	; 0x0a
    5a42:	48 2f       	mov	r20, r24
    5a44:	41 70       	andi	r20, 0x01	; 1
    5a46:	c9 01       	movw	r24, r18
    5a48:	64 2f       	mov	r22, r20
    5a4a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	{
    5a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a50:	9b 81       	ldd	r25, Y+3	; 0x03
    5a52:	ac 01       	movw	r20, r24
    5a54:	4c 5f       	subi	r20, 0xFC	; 252
    5a56:	5f 4f       	sbci	r21, 0xFF	; 255
    5a58:	ea 81       	ldd	r30, Y+2	; 0x02
    5a5a:	fb 81       	ldd	r31, Y+3	; 0x03
    5a5c:	82 85       	ldd	r24, Z+10	; 0x0a
    5a5e:	86 95       	lsr	r24
    5a60:	28 2f       	mov	r18, r24
    5a62:	21 70       	andi	r18, 0x01	; 1
    5a64:	ca 01       	movw	r24, r20
    5a66:	62 2f       	mov	r22, r18
    5a68:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    		Local_ErrorStatus = E_NOT_OK;
    5a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a70:	ac 01       	movw	r20, r24
    5a72:	4b 5f       	subi	r20, 0xFB	; 251
    5a74:	5f 4f       	sbci	r21, 0xFF	; 255
    5a76:	ea 81       	ldd	r30, Y+2	; 0x02
    5a78:	fb 81       	ldd	r31, Y+3	; 0x03
    5a7a:	82 85       	ldd	r24, Z+10	; 0x0a
    5a7c:	86 95       	lsr	r24
    5a7e:	86 95       	lsr	r24
    5a80:	28 2f       	mov	r18, r24
    5a82:	21 70       	andi	r18, 0x01	; 1
    5a84:	ca 01       	movw	r24, r20
    5a86:	62 2f       	mov	r22, r18
    5a88:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	}
    5a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a90:	ac 01       	movw	r20, r24
    5a92:	4a 5f       	subi	r20, 0xFA	; 250
    5a94:	5f 4f       	sbci	r21, 0xFF	; 255
    5a96:	ea 81       	ldd	r30, Y+2	; 0x02
    5a98:	fb 81       	ldd	r31, Y+3	; 0x03
    5a9a:	82 85       	ldd	r24, Z+10	; 0x0a
    5a9c:	86 95       	lsr	r24
    5a9e:	86 95       	lsr	r24
    5aa0:	86 95       	lsr	r24
    5aa2:	28 2f       	mov	r18, r24
    5aa4:	21 70       	andi	r18, 0x01	; 1
    5aa6:	ca 01       	movw	r24, r20
    5aa8:	62 2f       	mov	r22, r18
    5aaa:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	break;
	    default:
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	89 83       	std	Y+1, r24	; 0x01
	    	Local_ErrorStatus = E_NOT_OK;
    5ab2:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5ab4:	0f 90       	pop	r0
    5ab6:	0f 90       	pop	r0
    5ab8:	0f 90       	pop	r0
    5aba:	cf 91       	pop	r28
    5abc:	df 91       	pop	r29
    5abe:	08 95       	ret

00005ac0 <HAL_SSD_SSDDisplayNumWithSoftwareDecoder>:
	}
	return Local_ErrorStatus;
}
    5ac0:	df 93       	push	r29
    5ac2:	cf 93       	push	r28
    5ac4:	cd b7       	in	r28, 0x3d	; 61
    5ac6:	de b7       	in	r29, 0x3e	; 62
    5ac8:	68 97       	sbiw	r28, 0x18	; 24
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	9b 8b       	std	Y+19, r25	; 0x13
    5ad6:	8a 8b       	std	Y+18, r24	; 0x12
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
    5ad8:	19 82       	std	Y+1, r1	; 0x01
{
    5ada:	ce 01       	movw	r24, r28
    5adc:	02 96       	adiw	r24, 0x02	; 2
    5ade:	9d 8b       	std	Y+21, r25	; 0x15
    5ae0:	8c 8b       	std	Y+20, r24	; 0x14
    5ae2:	ea e8       	ldi	r30, 0x8A	; 138
    5ae4:	f1 e0       	ldi	r31, 0x01	; 1
    5ae6:	ff 8b       	std	Y+23, r31	; 0x17
    5ae8:	ee 8b       	std	Y+22, r30	; 0x16
    5aea:	f0 e1       	ldi	r31, 0x10	; 16
    5aec:	f8 8f       	std	Y+24, r31	; 0x18
    5aee:	ee 89       	ldd	r30, Y+22	; 0x16
    5af0:	ff 89       	ldd	r31, Y+23	; 0x17
    5af2:	00 80       	ld	r0, Z
    5af4:	8e 89       	ldd	r24, Y+22	; 0x16
    5af6:	9f 89       	ldd	r25, Y+23	; 0x17
    5af8:	01 96       	adiw	r24, 0x01	; 1
    5afa:	9f 8b       	std	Y+23, r25	; 0x17
    5afc:	8e 8b       	std	Y+22, r24	; 0x16
    5afe:	ec 89       	ldd	r30, Y+20	; 0x14
    5b00:	fd 89       	ldd	r31, Y+21	; 0x15
    5b02:	00 82       	st	Z, r0
    5b04:	8c 89       	ldd	r24, Y+20	; 0x14
    5b06:	9d 89       	ldd	r25, Y+21	; 0x15
    5b08:	01 96       	adiw	r24, 0x01	; 1
    5b0a:	9d 8b       	std	Y+21, r25	; 0x15
    5b0c:	8c 8b       	std	Y+20, r24	; 0x14
    5b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    5b10:	91 50       	subi	r25, 0x01	; 1
    5b12:	98 8f       	std	Y+24, r25	; 0x18
    5b14:	e8 8d       	ldd	r30, Y+24	; 0x18
    5b16:	ee 23       	and	r30, r30
    5b18:	51 f7       	brne	.-44     	; 0x5aee <HAL_SSD_SSDDisplayNumWithSoftwareDecoder+0x2e>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    5b1a:	ea 89       	ldd	r30, Y+18	; 0x12
    5b1c:	fb 89       	ldd	r31, Y+19	; 0x13
    5b1e:	82 85       	ldd	r24, Z+10	; 0x0a
    5b20:	28 2f       	mov	r18, r24
    5b22:	30 e0       	ldi	r19, 0x00	; 0
    5b24:	ce 01       	movw	r24, r28
    5b26:	02 96       	adiw	r24, 0x02	; 2
    5b28:	fc 01       	movw	r30, r24
    5b2a:	e2 0f       	add	r30, r18
    5b2c:	f3 1f       	adc	r31, r19
    5b2e:	80 81       	ld	r24, Z
    5b30:	ea 89       	ldd	r30, Y+18	; 0x12
    5b32:	fb 89       	ldd	r31, Y+19	; 0x13
    5b34:	82 87       	std	Z+10, r24	; 0x0a
	Local_ErrorStatus = E_OK;
    5b36:	8a 89       	ldd	r24, Y+18	; 0x12
    5b38:	9b 89       	ldd	r25, Y+19	; 0x13
    5b3a:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <HAL_SSD_SSDDisplay>
	return Local_ErrorStatus;
}
    5b3e:	81 e0       	ldi	r24, 0x01	; 1
    5b40:	89 83       	std	Y+1, r24	; 0x01
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
    5b42:	89 81       	ldd	r24, Y+1	; 0x01
{
    5b44:	68 96       	adiw	r28, 0x18	; 24
    5b46:	0f b6       	in	r0, 0x3f	; 63
    5b48:	f8 94       	cli
    5b4a:	de bf       	out	0x3e, r29	; 62
    5b4c:	0f be       	out	0x3f, r0	; 63
    5b4e:	cd bf       	out	0x3d, r28	; 61
    5b50:	cf 91       	pop	r28
    5b52:	df 91       	pop	r29
    5b54:	08 95       	ret

00005b56 <HAL_SSD_SSDArrayDisplay>:
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
    5b56:	df 93       	push	r29
    5b58:	cf 93       	push	r28
    5b5a:	cd b7       	in	r28, 0x3d	; 61
    5b5c:	de b7       	in	r29, 0x3e	; 62
    5b5e:	65 97       	sbiw	r28, 0x15	; 21
    5b60:	0f b6       	in	r0, 0x3f	; 63
    5b62:	f8 94       	cli
    5b64:	de bf       	out	0x3e, r29	; 62
    5b66:	0f be       	out	0x3f, r0	; 63
    5b68:	cd bf       	out	0x3d, r28	; 61
    5b6a:	99 8b       	std	Y+17, r25	; 0x11
    5b6c:	88 8b       	std	Y+16, r24	; 0x10
    5b6e:	6a 8b       	std	Y+18, r22	; 0x12
	return Local_ErrorStatus;
    5b70:	1f 86       	std	Y+15, r1	; 0x0f
    5b72:	3c c1       	rjmp	.+632    	; 0x5dec <HAL_SSD_SSDArrayDisplay+0x296>
}
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    5b74:	8a 89       	ldd	r24, Y+18	; 0x12
    5b76:	28 2f       	mov	r18, r24
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	82 1b       	sub	r24, r18
    5b80:	93 0b       	sbc	r25, r19
    5b82:	88 0f       	add	r24, r24
    5b84:	99 1f       	adc	r25, r25
    5b86:	22 27       	eor	r18, r18
    5b88:	33 27       	eor	r19, r19
    5b8a:	28 1b       	sub	r18, r24
    5b8c:	39 0b       	sbc	r19, r25
    5b8e:	88 89       	ldd	r24, Y+16	; 0x10
    5b90:	99 89       	ldd	r25, Y+17	; 0x11
    5b92:	fc 01       	movw	r30, r24
    5b94:	e2 0f       	add	r30, r18
    5b96:	f3 1f       	adc	r31, r19
    5b98:	80 81       	ld	r24, Z
    5b9a:	91 81       	ldd	r25, Z+1	; 0x01
    5b9c:	ac 01       	movw	r20, r24
    5b9e:	4e 5f       	subi	r20, 0xFE	; 254
    5ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba2:	8a 89       	ldd	r24, Y+18	; 0x12
    5ba4:	28 2f       	mov	r18, r24
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	81 e0       	ldi	r24, 0x01	; 1
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	82 1b       	sub	r24, r18
    5bae:	93 0b       	sbc	r25, r19
    5bb0:	88 0f       	add	r24, r24
    5bb2:	99 1f       	adc	r25, r25
    5bb4:	22 27       	eor	r18, r18
    5bb6:	33 27       	eor	r19, r19
    5bb8:	28 1b       	sub	r18, r24
    5bba:	39 0b       	sbc	r19, r25
    5bbc:	88 89       	ldd	r24, Y+16	; 0x10
    5bbe:	99 89       	ldd	r25, Y+17	; 0x11
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	e2 0f       	add	r30, r18
    5bc4:	f3 1f       	adc	r31, r19
    5bc6:	01 90       	ld	r0, Z+
    5bc8:	f0 81       	ld	r31, Z
    5bca:	e0 2d       	mov	r30, r0
    5bcc:	20 81       	ld	r18, Z
    5bce:	ca 01       	movw	r24, r20
    5bd0:	62 2f       	mov	r22, r18
    5bd2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
{
    5bd6:	8a 89       	ldd	r24, Y+18	; 0x12
    5bd8:	28 2f       	mov	r18, r24
    5bda:	30 e0       	ldi	r19, 0x00	; 0
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	82 1b       	sub	r24, r18
    5be2:	93 0b       	sbc	r25, r19
    5be4:	88 0f       	add	r24, r24
    5be6:	99 1f       	adc	r25, r25
    5be8:	22 27       	eor	r18, r18
    5bea:	33 27       	eor	r19, r19
    5bec:	28 1b       	sub	r18, r24
    5bee:	39 0b       	sbc	r19, r25
    5bf0:	88 89       	ldd	r24, Y+16	; 0x10
    5bf2:	99 89       	ldd	r25, Y+17	; 0x11
    5bf4:	fc 01       	movw	r30, r24
    5bf6:	e2 0f       	add	r30, r18
    5bf8:	f3 1f       	adc	r31, r19
    5bfa:	01 90       	ld	r0, Z+
    5bfc:	f0 81       	ld	r31, Z
    5bfe:	e0 2d       	mov	r30, r0
    5c00:	81 81       	ldd	r24, Z+1	; 0x01
    5c02:	88 23       	and	r24, r24
    5c04:	b9 f4       	brne	.+46     	; 0x5c34 <HAL_SSD_SSDArrayDisplay+0xde>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    5c06:	8a 89       	ldd	r24, Y+18	; 0x12
    5c08:	28 2f       	mov	r18, r24
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	81 e0       	ldi	r24, 0x01	; 1
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	82 1b       	sub	r24, r18
    5c12:	93 0b       	sbc	r25, r19
    5c14:	88 0f       	add	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	22 27       	eor	r18, r18
    5c1a:	33 27       	eor	r19, r19
    5c1c:	28 1b       	sub	r18, r24
    5c1e:	39 0b       	sbc	r19, r25
    5c20:	88 89       	ldd	r24, Y+16	; 0x10
    5c22:	99 89       	ldd	r25, Y+17	; 0x11
    5c24:	fc 01       	movw	r30, r24
    5c26:	e2 0f       	add	r30, r18
    5c28:	f3 1f       	adc	r31, r19
    5c2a:	80 81       	ld	r24, Z
    5c2c:	91 81       	ldd	r25, Z+1	; 0x01
    5c2e:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <HAL_SSD_SSDDisplayNumWithSoftwareDecoder>
    5c32:	2e c0       	rjmp	.+92     	; 0x5c90 <HAL_SSD_SSDArrayDisplay+0x13a>
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    5c34:	8a 89       	ldd	r24, Y+18	; 0x12
    5c36:	28 2f       	mov	r18, r24
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	82 1b       	sub	r24, r18
    5c40:	93 0b       	sbc	r25, r19
    5c42:	88 0f       	add	r24, r24
    5c44:	99 1f       	adc	r25, r25
    5c46:	22 27       	eor	r18, r18
    5c48:	33 27       	eor	r19, r19
    5c4a:	28 1b       	sub	r18, r24
    5c4c:	39 0b       	sbc	r19, r25
    5c4e:	88 89       	ldd	r24, Y+16	; 0x10
    5c50:	99 89       	ldd	r25, Y+17	; 0x11
    5c52:	fc 01       	movw	r30, r24
    5c54:	e2 0f       	add	r30, r18
    5c56:	f3 1f       	adc	r31, r19
    5c58:	01 90       	ld	r0, Z+
    5c5a:	f0 81       	ld	r31, Z
    5c5c:	e0 2d       	mov	r30, r0
    5c5e:	81 81       	ldd	r24, Z+1	; 0x01
    5c60:	81 30       	cpi	r24, 0x01	; 1
    5c62:	b1 f4       	brne	.+44     	; 0x5c90 <HAL_SSD_SSDArrayDisplay+0x13a>
}
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
    5c64:	8a 89       	ldd	r24, Y+18	; 0x12
    5c66:	28 2f       	mov	r18, r24
    5c68:	30 e0       	ldi	r19, 0x00	; 0
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	82 1b       	sub	r24, r18
    5c70:	93 0b       	sbc	r25, r19
    5c72:	88 0f       	add	r24, r24
    5c74:	99 1f       	adc	r25, r25
    5c76:	22 27       	eor	r18, r18
    5c78:	33 27       	eor	r19, r19
    5c7a:	28 1b       	sub	r18, r24
    5c7c:	39 0b       	sbc	r19, r25
    5c7e:	88 89       	ldd	r24, Y+16	; 0x10
    5c80:	99 89       	ldd	r25, Y+17	; 0x11
    5c82:	fc 01       	movw	r30, r24
    5c84:	e2 0f       	add	r30, r18
    5c86:	f3 1f       	adc	r31, r19
    5c88:	80 81       	ld	r24, Z
    5c8a:	91 81       	ldd	r25, Z+1	; 0x01
    5c8c:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <HAL_SSD_SSDDisplay>
    5c90:	80 e0       	ldi	r24, 0x00	; 0
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	a8 e4       	ldi	r26, 0x48	; 72
    5c96:	b2 e4       	ldi	r27, 0x42	; 66
    5c98:	8b 87       	std	Y+11, r24	; 0x0b
    5c9a:	9c 87       	std	Y+12, r25	; 0x0c
    5c9c:	ad 87       	std	Y+13, r26	; 0x0d
    5c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ca8:	20 e0       	ldi	r18, 0x00	; 0
    5caa:	30 e0       	ldi	r19, 0x00	; 0
    5cac:	4a e7       	ldi	r20, 0x7A	; 122
    5cae:	55 e4       	ldi	r21, 0x45	; 69
    5cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cb4:	dc 01       	movw	r26, r24
    5cb6:	cb 01       	movw	r24, r22
    5cb8:	8f 83       	std	Y+7, r24	; 0x07
    5cba:	98 87       	std	Y+8, r25	; 0x08
    5cbc:	a9 87       	std	Y+9, r26	; 0x09
    5cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    5cc2:	78 85       	ldd	r23, Y+8	; 0x08
    5cc4:	89 85       	ldd	r24, Y+9	; 0x09
    5cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cc8:	20 e0       	ldi	r18, 0x00	; 0
    5cca:	30 e0       	ldi	r19, 0x00	; 0
    5ccc:	40 e8       	ldi	r20, 0x80	; 128
    5cce:	5f e3       	ldi	r21, 0x3F	; 63
    5cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cd4:	88 23       	and	r24, r24
    5cd6:	2c f4       	brge	.+10     	; 0x5ce2 <HAL_SSD_SSDArrayDisplay+0x18c>
		__ticks = 1;
    5cd8:	81 e0       	ldi	r24, 0x01	; 1
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	9e 83       	std	Y+6, r25	; 0x06
    5cde:	8d 83       	std	Y+5, r24	; 0x05
    5ce0:	3f c0       	rjmp	.+126    	; 0x5d60 <HAL_SSD_SSDArrayDisplay+0x20a>
	else if (__tmp > 65535)
    5ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    5ce4:	78 85       	ldd	r23, Y+8	; 0x08
    5ce6:	89 85       	ldd	r24, Y+9	; 0x09
    5ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cea:	20 e0       	ldi	r18, 0x00	; 0
    5cec:	3f ef       	ldi	r19, 0xFF	; 255
    5cee:	4f e7       	ldi	r20, 0x7F	; 127
    5cf0:	57 e4       	ldi	r21, 0x47	; 71
    5cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cf6:	18 16       	cp	r1, r24
    5cf8:	4c f5       	brge	.+82     	; 0x5d4c <HAL_SSD_SSDArrayDisplay+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d02:	20 e0       	ldi	r18, 0x00	; 0
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	40 e2       	ldi	r20, 0x20	; 32
    5d08:	51 e4       	ldi	r21, 0x41	; 65
    5d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d0e:	dc 01       	movw	r26, r24
    5d10:	cb 01       	movw	r24, r22
    5d12:	bc 01       	movw	r22, r24
    5d14:	cd 01       	movw	r24, r26
    5d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d1a:	dc 01       	movw	r26, r24
    5d1c:	cb 01       	movw	r24, r22
    5d1e:	9e 83       	std	Y+6, r25	; 0x06
    5d20:	8d 83       	std	Y+5, r24	; 0x05
    5d22:	0f c0       	rjmp	.+30     	; 0x5d42 <HAL_SSD_SSDArrayDisplay+0x1ec>
    5d24:	80 e9       	ldi	r24, 0x90	; 144
    5d26:	91 e0       	ldi	r25, 0x01	; 1
    5d28:	9c 83       	std	Y+4, r25	; 0x04
    5d2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d30:	01 97       	sbiw	r24, 0x01	; 1
    5d32:	f1 f7       	brne	.-4      	; 0x5d30 <HAL_SSD_SSDArrayDisplay+0x1da>
    5d34:	9c 83       	std	Y+4, r25	; 0x04
    5d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d38:	8d 81       	ldd	r24, Y+5	; 0x05
    5d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d3c:	01 97       	sbiw	r24, 0x01	; 1
    5d3e:	9e 83       	std	Y+6, r25	; 0x06
    5d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d42:	8d 81       	ldd	r24, Y+5	; 0x05
    5d44:	9e 81       	ldd	r25, Y+6	; 0x06
    5d46:	00 97       	sbiw	r24, 0x00	; 0
    5d48:	69 f7       	brne	.-38     	; 0x5d24 <HAL_SSD_SSDArrayDisplay+0x1ce>
    5d4a:	14 c0       	rjmp	.+40     	; 0x5d74 <HAL_SSD_SSDArrayDisplay+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    5d4e:	78 85       	ldd	r23, Y+8	; 0x08
    5d50:	89 85       	ldd	r24, Y+9	; 0x09
    5d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d58:	dc 01       	movw	r26, r24
    5d5a:	cb 01       	movw	r24, r22
    5d5c:	9e 83       	std	Y+6, r25	; 0x06
    5d5e:	8d 83       	std	Y+5, r24	; 0x05
    5d60:	8d 81       	ldd	r24, Y+5	; 0x05
    5d62:	9e 81       	ldd	r25, Y+6	; 0x06
    5d64:	9a 83       	std	Y+2, r25	; 0x02
    5d66:	89 83       	std	Y+1, r24	; 0x01
    5d68:	89 81       	ldd	r24, Y+1	; 0x01
    5d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d6c:	01 97       	sbiw	r24, 0x01	; 1
    5d6e:	f1 f7       	brne	.-4      	; 0x5d6c <HAL_SSD_SSDArrayDisplay+0x216>
    5d70:	9a 83       	std	Y+2, r25	; 0x02
    5d72:	89 83       	std	Y+1, r24	; 0x01
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
    5d74:	8a 89       	ldd	r24, Y+18	; 0x12
    5d76:	28 2f       	mov	r18, r24
    5d78:	30 e0       	ldi	r19, 0x00	; 0
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	82 1b       	sub	r24, r18
    5d80:	93 0b       	sbc	r25, r19
    5d82:	88 0f       	add	r24, r24
    5d84:	99 1f       	adc	r25, r25
    5d86:	22 27       	eor	r18, r18
    5d88:	33 27       	eor	r19, r19
    5d8a:	28 1b       	sub	r18, r24
    5d8c:	39 0b       	sbc	r19, r25
    5d8e:	88 89       	ldd	r24, Y+16	; 0x10
    5d90:	99 89       	ldd	r25, Y+17	; 0x11
    5d92:	fc 01       	movw	r30, r24
    5d94:	e2 0f       	add	r30, r18
    5d96:	f3 1f       	adc	r31, r19
    5d98:	80 81       	ld	r24, Z
    5d9a:	91 81       	ldd	r25, Z+1	; 0x01
    5d9c:	9c 01       	movw	r18, r24
    5d9e:	2e 5f       	subi	r18, 0xFE	; 254
    5da0:	3f 4f       	sbci	r19, 0xFF	; 255
    5da2:	3d 8b       	std	Y+21, r19	; 0x15
    5da4:	2c 8b       	std	Y+20, r18	; 0x14
    5da6:	8a 89       	ldd	r24, Y+18	; 0x12
    5da8:	28 2f       	mov	r18, r24
    5daa:	30 e0       	ldi	r19, 0x00	; 0
    5dac:	81 e0       	ldi	r24, 0x01	; 1
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	82 1b       	sub	r24, r18
    5db2:	93 0b       	sbc	r25, r19
    5db4:	88 0f       	add	r24, r24
    5db6:	99 1f       	adc	r25, r25
    5db8:	22 27       	eor	r18, r18
    5dba:	33 27       	eor	r19, r19
    5dbc:	28 1b       	sub	r18, r24
    5dbe:	39 0b       	sbc	r19, r25
    5dc0:	88 89       	ldd	r24, Y+16	; 0x10
    5dc2:	99 89       	ldd	r25, Y+17	; 0x11
    5dc4:	fc 01       	movw	r30, r24
    5dc6:	e2 0f       	add	r30, r18
    5dc8:	f3 1f       	adc	r31, r19
    5dca:	01 90       	ld	r0, Z+
    5dcc:	f0 81       	ld	r31, Z
    5dce:	e0 2d       	mov	r30, r0
    5dd0:	80 81       	ld	r24, Z
    5dd2:	1b 8a       	std	Y+19, r1	; 0x13
    5dd4:	88 23       	and	r24, r24
    5dd6:	11 f4       	brne	.+4      	; 0x5ddc <HAL_SSD_SSDArrayDisplay+0x286>
    5dd8:	31 e0       	ldi	r19, 0x01	; 1
    5dda:	3b 8b       	std	Y+19, r19	; 0x13
    5ddc:	8c 89       	ldd	r24, Y+20	; 0x14
    5dde:	9d 89       	ldd	r25, Y+21	; 0x15
    5de0:	6b 89       	ldd	r22, Y+19	; 0x13
    5de2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    5de6:	8a 89       	ldd	r24, Y+18	; 0x12
    5de8:	81 50       	subi	r24, 0x01	; 1
    5dea:	8a 8b       	std	Y+18, r24	; 0x12
    5dec:	8a 89       	ldd	r24, Y+18	; 0x12
    5dee:	88 23       	and	r24, r24
    5df0:	09 f0       	breq	.+2      	; 0x5df4 <HAL_SSD_SSDArrayDisplay+0x29e>
    5df2:	c0 ce       	rjmp	.-640    	; 0x5b74 <HAL_SSD_SSDArrayDisplay+0x1e>
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    5df4:	81 e0       	ldi	r24, 0x01	; 1
    5df6:	8f 87       	std	Y+15, r24	; 0x0f
}
    5df8:	8f 85       	ldd	r24, Y+15	; 0x0f
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
    5dfa:	65 96       	adiw	r28, 0x15	; 21
    5dfc:	0f b6       	in	r0, 0x3f	; 63
    5dfe:	f8 94       	cli
    5e00:	de bf       	out	0x3e, r29	; 62
    5e02:	0f be       	out	0x3f, r0	; 63
    5e04:	cd bf       	out	0x3d, r28	; 61
    5e06:	cf 91       	pop	r28
    5e08:	df 91       	pop	r29
    5e0a:	08 95       	ret

00005e0c <HAL_Push_Button_BtnConfig>:
#include "EXT_Interrupt_Private.h"

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;

    5e0c:	df 93       	push	r29
    5e0e:	cf 93       	push	r28
    5e10:	00 d0       	rcall	.+0      	; 0x5e12 <HAL_Push_Button_BtnConfig+0x6>
    5e12:	00 d0       	rcall	.+0      	; 0x5e14 <HAL_Push_Button_BtnConfig+0x8>
    5e14:	cd b7       	in	r28, 0x3d	; 61
    5e16:	de b7       	in	r29, 0x3e	; 62
    5e18:	9c 83       	std	Y+4, r25	; 0x04
    5e1a:	8b 83       	std	Y+3, r24	; 0x03

    5e1c:	19 82       	std	Y+1, r1	; 0x01
/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    5e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    5e20:	fc 81       	ldd	r31, Y+4	; 0x04
    5e22:	80 81       	ld	r24, Z
    5e24:	87 70       	andi	r24, 0x07	; 7
    5e26:	88 2f       	mov	r24, r24
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	85 30       	cpi	r24, 0x05	; 5
    5e2c:	91 05       	cpc	r25, r1
    5e2e:	64 f4       	brge	.+24     	; 0x5e48 <HAL_Push_Button_BtnConfig+0x3c>
    5e30:	eb 81       	ldd	r30, Y+3	; 0x03
    5e32:	fc 81       	ldd	r31, Y+4	; 0x04
    5e34:	80 81       	ld	r24, Z
    5e36:	86 95       	lsr	r24
    5e38:	86 95       	lsr	r24
    5e3a:	86 95       	lsr	r24
    5e3c:	87 70       	andi	r24, 0x07	; 7
    5e3e:	88 2f       	mov	r24, r24
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	88 30       	cpi	r24, 0x08	; 8
    5e44:	91 05       	cpc	r25, r1
    5e46:	14 f0       	brlt	.+4      	; 0x5e4c <HAL_Push_Button_BtnConfig+0x40>
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
    5e48:	19 82       	std	Y+1, r1	; 0x01
    5e4a:	39 c0       	rjmp	.+114    	; 0x5ebe <HAL_Push_Button_BtnConfig+0xb2>
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
		Local_ErrorStatus = E_OK;
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
	{
		switch(Copy_EXTInt.INTNum)
    5e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    5e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    5e50:	80 81       	ld	r24, Z
    5e52:	87 70       	andi	r24, 0x07	; 7
    5e54:	28 2f       	mov	r18, r24
    5e56:	23 70       	andi	r18, 0x03	; 3
    5e58:	eb 81       	ldd	r30, Y+3	; 0x03
    5e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e5c:	80 81       	ld	r24, Z
    5e5e:	98 2f       	mov	r25, r24
    5e60:	96 95       	lsr	r25
    5e62:	96 95       	lsr	r25
    5e64:	96 95       	lsr	r25
    5e66:	97 70       	andi	r25, 0x07	; 7
    5e68:	eb 81       	ldd	r30, Y+3	; 0x03
    5e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e6c:	80 81       	ld	r24, Z
    5e6e:	38 2f       	mov	r19, r24
    5e70:	33 1f       	adc	r19, r19
    5e72:	33 27       	eor	r19, r19
    5e74:	33 1f       	adc	r19, r19
    5e76:	23 70       	andi	r18, 0x03	; 3
    5e78:	8a 81       	ldd	r24, Y+2	; 0x02
    5e7a:	8c 7f       	andi	r24, 0xFC	; 252
    5e7c:	82 2b       	or	r24, r18
    5e7e:	8a 83       	std	Y+2, r24	; 0x02
    5e80:	89 2f       	mov	r24, r25
    5e82:	87 70       	andi	r24, 0x07	; 7
    5e84:	98 2f       	mov	r25, r24
    5e86:	99 0f       	add	r25, r25
    5e88:	99 0f       	add	r25, r25
    5e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e8c:	83 7e       	andi	r24, 0xE3	; 227
    5e8e:	89 2b       	or	r24, r25
    5e90:	8a 83       	std	Y+2, r24	; 0x02
    5e92:	8a 81       	ldd	r24, Y+2	; 0x02
    5e94:	8f 79       	andi	r24, 0x9F	; 159
    5e96:	80 62       	ori	r24, 0x20	; 32
    5e98:	8a 83       	std	Y+2, r24	; 0x02
    5e9a:	93 2f       	mov	r25, r19
    5e9c:	97 95       	ror	r25
    5e9e:	99 27       	eor	r25, r25
    5ea0:	97 95       	ror	r25
    5ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ea4:	8f 77       	andi	r24, 0x7F	; 127
    5ea6:	89 2b       	or	r24, r25
    5ea8:	8a 83       	std	Y+2, r24	; 0x02
	    {
    5eaa:	ce 01       	movw	r24, r28
    5eac:	02 96       	adiw	r24, 0x02	; 2
    5eae:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    5eb2:	88 23       	and	r24, r24
    5eb4:	11 f4       	brne	.+4      	; 0x5eba <HAL_Push_Button_BtnConfig+0xae>
	    case EXTINT0:
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    5eb6:	19 82       	std	Y+1, r1	; 0x01
    5eb8:	02 c0       	rjmp	.+4      	; 0x5ebe <HAL_Push_Button_BtnConfig+0xb2>
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
            Local_ErrorStatus = E_OK;
	    	break;
    5eba:	81 e0       	ldi	r24, 0x01	; 1
    5ebc:	89 83       	std	Y+1, r24	; 0x01
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    5ebe:	89 81       	ldd	r24, Y+1	; 0x01
	    	SET_BIT(GICR_REG, EXTINT1);
    5ec0:	0f 90       	pop	r0
    5ec2:	0f 90       	pop	r0
    5ec4:	0f 90       	pop	r0
    5ec6:	0f 90       	pop	r0
    5ec8:	cf 91       	pop	r28
    5eca:	df 91       	pop	r29
    5ecc:	08 95       	ret

00005ece <HAL_Push_Button_ReadBtn>:
	    	Local_ErrorStatus = E_OK;
	    	break;
    5ece:	df 93       	push	r29
    5ed0:	cf 93       	push	r28
    5ed2:	cd b7       	in	r28, 0x3d	; 61
    5ed4:	de b7       	in	r29, 0x3e	; 62
    5ed6:	a3 97       	sbiw	r28, 0x23	; 35
    5ed8:	0f b6       	in	r0, 0x3f	; 63
    5eda:	f8 94       	cli
    5edc:	de bf       	out	0x3e, r29	; 62
    5ede:	0f be       	out	0x3f, r0	; 63
    5ee0:	cd bf       	out	0x3d, r28	; 61
    5ee2:	99 a3       	std	Y+33, r25	; 0x21
    5ee4:	88 a3       	std	Y+32, r24	; 0x20
    5ee6:	7b a3       	std	Y+35, r23	; 0x23
    5ee8:	6a a3       	std	Y+34, r22	; 0x22
	    case EXTINT2:
    5eea:	1d 8e       	std	Y+29, r1	; 0x1d
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    5eec:	86 e0       	ldi	r24, 0x06	; 6
    5eee:	8e 8f       	std	Y+30, r24	; 0x1e
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    		SET_BIT(GICR_REG, EXTINT2);
	    	    Local_ErrorStatus = E_OK;
	    	}
    5ef0:	e8 a1       	ldd	r30, Y+32	; 0x20
    5ef2:	f9 a1       	ldd	r31, Y+33	; 0x21
    5ef4:	80 81       	ld	r24, Z
    5ef6:	87 70       	andi	r24, 0x07	; 7
    5ef8:	28 2f       	mov	r18, r24
    5efa:	23 70       	andi	r18, 0x03	; 3
    5efc:	e8 a1       	ldd	r30, Y+32	; 0x20
    5efe:	f9 a1       	ldd	r31, Y+33	; 0x21
    5f00:	80 81       	ld	r24, Z
    5f02:	98 2f       	mov	r25, r24
    5f04:	96 95       	lsr	r25
    5f06:	96 95       	lsr	r25
    5f08:	96 95       	lsr	r25
    5f0a:	97 70       	andi	r25, 0x07	; 7
    5f0c:	e8 a1       	ldd	r30, Y+32	; 0x20
    5f0e:	f9 a1       	ldd	r31, Y+33	; 0x21
    5f10:	80 81       	ld	r24, Z
    5f12:	38 2f       	mov	r19, r24
    5f14:	33 1f       	adc	r19, r19
    5f16:	33 27       	eor	r19, r19
    5f18:	33 1f       	adc	r19, r19
    5f1a:	23 70       	andi	r18, 0x03	; 3
    5f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f1e:	8c 7f       	andi	r24, 0xFC	; 252
    5f20:	82 2b       	or	r24, r18
    5f22:	8f 8f       	std	Y+31, r24	; 0x1f
    5f24:	89 2f       	mov	r24, r25
    5f26:	87 70       	andi	r24, 0x07	; 7
    5f28:	98 2f       	mov	r25, r24
    5f2a:	99 0f       	add	r25, r25
    5f2c:	99 0f       	add	r25, r25
    5f2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f30:	83 7e       	andi	r24, 0xE3	; 227
    5f32:	89 2b       	or	r24, r25
    5f34:	8f 8f       	std	Y+31, r24	; 0x1f
    5f36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f38:	8f 79       	andi	r24, 0x9F	; 159
    5f3a:	80 62       	ori	r24, 0x20	; 32
    5f3c:	8f 8f       	std	Y+31, r24	; 0x1f
    5f3e:	93 2f       	mov	r25, r19
    5f40:	97 95       	ror	r25
    5f42:	99 27       	eor	r25, r25
    5f44:	97 95       	ror	r25
    5f46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f48:	8f 77       	andi	r24, 0x7F	; 127
    5f4a:	89 2b       	or	r24, r25
    5f4c:	8f 8f       	std	Y+31, r24	; 0x1f
	    	else
    5f4e:	ce 01       	movw	r24, r28
    5f50:	4f 96       	adiw	r24, 0x1f	; 31
    5f52:	9e 01       	movw	r18, r28
    5f54:	22 5e       	subi	r18, 0xE2	; 226
    5f56:	3f 4f       	sbci	r19, 0xFF	; 255
    5f58:	b9 01       	movw	r22, r18
    5f5a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    5f5e:	88 23       	and	r24, r24
    5f60:	11 f4       	brne	.+4      	; 0x5f66 <HAL_Push_Button_ReadBtn+0x98>
	    	{
	    		Local_ErrorStatus = E_NOT_OK;
    5f62:	1d 8e       	std	Y+29, r1	; 0x1d
    5f64:	39 c1       	rjmp	.+626    	; 0x61d8 <HAL_Push_Button_ReadBtn+0x30a>
	    	}
	    	break;
	    default:
	    	Local_ErrorStatus = E_NOT_OK;
    5f66:	e8 a1       	ldd	r30, Y+32	; 0x20
    5f68:	f9 a1       	ldd	r31, Y+33	; 0x21
    5f6a:	80 81       	ld	r24, Z
    5f6c:	80 74       	andi	r24, 0x40	; 64
    5f6e:	88 23       	and	r24, r24
    5f70:	09 f0       	breq	.+2      	; 0x5f74 <HAL_Push_Button_ReadBtn+0xa6>
    5f72:	95 c0       	rjmp	.+298    	; 0x609e <HAL_Push_Button_ReadBtn+0x1d0>
	}
	}
    5f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5f76:	81 30       	cpi	r24, 0x01	; 1
    5f78:	09 f0       	breq	.+2      	; 0x5f7c <HAL_Push_Button_ReadBtn+0xae>
    5f7a:	88 c0       	rjmp	.+272    	; 0x608c <HAL_Push_Button_ReadBtn+0x1be>
    5f7c:	80 e0       	ldi	r24, 0x00	; 0
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	a0 ef       	ldi	r26, 0xF0	; 240
    5f82:	b2 e4       	ldi	r27, 0x42	; 66
    5f84:	89 8f       	std	Y+25, r24	; 0x19
    5f86:	9a 8f       	std	Y+26, r25	; 0x1a
    5f88:	ab 8f       	std	Y+27, r26	; 0x1b
    5f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    5f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f94:	20 e0       	ldi	r18, 0x00	; 0
    5f96:	30 e0       	ldi	r19, 0x00	; 0
    5f98:	4a e7       	ldi	r20, 0x7A	; 122
    5f9a:	55 e4       	ldi	r21, 0x45	; 69
    5f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa0:	dc 01       	movw	r26, r24
    5fa2:	cb 01       	movw	r24, r22
    5fa4:	8d 8b       	std	Y+21, r24	; 0x15
    5fa6:	9e 8b       	std	Y+22, r25	; 0x16
    5fa8:	af 8b       	std	Y+23, r26	; 0x17
    5faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5fac:	6d 89       	ldd	r22, Y+21	; 0x15
    5fae:	7e 89       	ldd	r23, Y+22	; 0x16
    5fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    5fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    5fb4:	20 e0       	ldi	r18, 0x00	; 0
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	40 e8       	ldi	r20, 0x80	; 128
    5fba:	5f e3       	ldi	r21, 0x3F	; 63
    5fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fc0:	88 23       	and	r24, r24
    5fc2:	2c f4       	brge	.+10     	; 0x5fce <HAL_Push_Button_ReadBtn+0x100>
		__ticks = 1;
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	9c 8b       	std	Y+20, r25	; 0x14
    5fca:	8b 8b       	std	Y+19, r24	; 0x13
    5fcc:	3f c0       	rjmp	.+126    	; 0x604c <HAL_Push_Button_ReadBtn+0x17e>
	else if (__tmp > 65535)
    5fce:	6d 89       	ldd	r22, Y+21	; 0x15
    5fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    5fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    5fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	3f ef       	ldi	r19, 0xFF	; 255
    5fda:	4f e7       	ldi	r20, 0x7F	; 127
    5fdc:	57 e4       	ldi	r21, 0x47	; 71
    5fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fe2:	18 16       	cp	r1, r24
    5fe4:	4c f5       	brge	.+82     	; 0x6038 <HAL_Push_Button_ReadBtn+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    5fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fee:	20 e0       	ldi	r18, 0x00	; 0
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	40 e2       	ldi	r20, 0x20	; 32
    5ff4:	51 e4       	ldi	r21, 0x41	; 65
    5ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffa:	dc 01       	movw	r26, r24
    5ffc:	cb 01       	movw	r24, r22
    5ffe:	bc 01       	movw	r22, r24
    6000:	cd 01       	movw	r24, r26
    6002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6006:	dc 01       	movw	r26, r24
    6008:	cb 01       	movw	r24, r22
    600a:	9c 8b       	std	Y+20, r25	; 0x14
    600c:	8b 8b       	std	Y+19, r24	; 0x13
    600e:	0f c0       	rjmp	.+30     	; 0x602e <HAL_Push_Button_ReadBtn+0x160>
    6010:	80 e9       	ldi	r24, 0x90	; 144
    6012:	91 e0       	ldi	r25, 0x01	; 1
    6014:	9a 8b       	std	Y+18, r25	; 0x12
    6016:	89 8b       	std	Y+17, r24	; 0x11
    6018:	89 89       	ldd	r24, Y+17	; 0x11
    601a:	9a 89       	ldd	r25, Y+18	; 0x12
    601c:	01 97       	sbiw	r24, 0x01	; 1
    601e:	f1 f7       	brne	.-4      	; 0x601c <HAL_Push_Button_ReadBtn+0x14e>
    6020:	9a 8b       	std	Y+18, r25	; 0x12
    6022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6024:	8b 89       	ldd	r24, Y+19	; 0x13
    6026:	9c 89       	ldd	r25, Y+20	; 0x14
    6028:	01 97       	sbiw	r24, 0x01	; 1
    602a:	9c 8b       	std	Y+20, r25	; 0x14
    602c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    602e:	8b 89       	ldd	r24, Y+19	; 0x13
    6030:	9c 89       	ldd	r25, Y+20	; 0x14
    6032:	00 97       	sbiw	r24, 0x00	; 0
    6034:	69 f7       	brne	.-38     	; 0x6010 <HAL_Push_Button_ReadBtn+0x142>
    6036:	1d c0       	rjmp	.+58     	; 0x6072 <HAL_Push_Button_ReadBtn+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6038:	6d 89       	ldd	r22, Y+21	; 0x15
    603a:	7e 89       	ldd	r23, Y+22	; 0x16
    603c:	8f 89       	ldd	r24, Y+23	; 0x17
    603e:	98 8d       	ldd	r25, Y+24	; 0x18
    6040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6044:	dc 01       	movw	r26, r24
    6046:	cb 01       	movw	r24, r22
    6048:	9c 8b       	std	Y+20, r25	; 0x14
    604a:	8b 8b       	std	Y+19, r24	; 0x13
    604c:	8b 89       	ldd	r24, Y+19	; 0x13
    604e:	9c 89       	ldd	r25, Y+20	; 0x14
    6050:	98 8b       	std	Y+16, r25	; 0x10
    6052:	8f 87       	std	Y+15, r24	; 0x0f
    6054:	8f 85       	ldd	r24, Y+15	; 0x0f
    6056:	98 89       	ldd	r25, Y+16	; 0x10
    6058:	01 97       	sbiw	r24, 0x01	; 1
    605a:	f1 f7       	brne	.-4      	; 0x6058 <HAL_Push_Button_ReadBtn+0x18a>
    605c:	98 8b       	std	Y+16, r25	; 0x10
    605e:	8f 87       	std	Y+15, r24	; 0x0f
    6060:	08 c0       	rjmp	.+16     	; 0x6072 <HAL_Push_Button_ReadBtn+0x1a4>
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    6062:	ce 01       	movw	r24, r28
    6064:	4f 96       	adiw	r24, 0x1f	; 31
    6066:	9e 01       	movw	r18, r28
    6068:	22 5e       	subi	r18, 0xE2	; 226
    606a:	3f 4f       	sbci	r19, 0xFF	; 255
    606c:	b9 01       	movw	r22, r18
    606e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
	    	Local_ErrorStatus = E_NOT_OK;
	}
	}
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
    6072:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6074:	88 23       	and	r24, r24
    6076:	a9 f7       	brne	.-22     	; 0x6062 <HAL_Push_Button_ReadBtn+0x194>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
    6078:	ea a1       	ldd	r30, Y+34	; 0x22
    607a:	fb a1       	ldd	r31, Y+35	; 0x23
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	80 83       	st	Z, r24
	return Local_ErrorStatus;
    6080:	e8 a1       	ldd	r30, Y+32	; 0x20
    6082:	f9 a1       	ldd	r31, Y+33	; 0x21
    6084:	80 81       	ld	r24, Z
    6086:	80 68       	ori	r24, 0x80	; 128
    6088:	80 83       	st	Z, r24
    608a:	a4 c0       	rjmp	.+328    	; 0x61d4 <HAL_Push_Button_ReadBtn+0x306>
}
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    608c:	ea a1       	ldd	r30, Y+34	; 0x22
    608e:	fb a1       	ldd	r31, Y+35	; 0x23
    6090:	10 82       	st	Z, r1
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    6092:	e8 a1       	ldd	r30, Y+32	; 0x20
    6094:	f9 a1       	ldd	r31, Y+33	; 0x21
    6096:	80 81       	ld	r24, Z
    6098:	8f 77       	andi	r24, 0x7F	; 127
    609a:	80 83       	st	Z, r24
    609c:	9b c0       	rjmp	.+310    	; 0x61d4 <HAL_Push_Button_ReadBtn+0x306>
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    609e:	e8 a1       	ldd	r30, Y+32	; 0x20
    60a0:	f9 a1       	ldd	r31, Y+33	; 0x21
    60a2:	80 81       	ld	r24, Z
    60a4:	80 74       	andi	r24, 0x40	; 64
    60a6:	88 23       	and	r24, r24
    60a8:	09 f4       	brne	.+2      	; 0x60ac <HAL_Push_Button_ReadBtn+0x1de>
    60aa:	94 c0       	rjmp	.+296    	; 0x61d4 <HAL_Push_Button_ReadBtn+0x306>
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    60ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    60ae:	88 23       	and	r24, r24
    60b0:	09 f0       	breq	.+2      	; 0x60b4 <HAL_Push_Button_ReadBtn+0x1e6>
    60b2:	87 c0       	rjmp	.+270    	; 0x61c2 <HAL_Push_Button_ReadBtn+0x2f4>
    60b4:	80 e0       	ldi	r24, 0x00	; 0
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	a0 ef       	ldi	r26, 0xF0	; 240
    60ba:	b2 e4       	ldi	r27, 0x42	; 66
    60bc:	8b 87       	std	Y+11, r24	; 0x0b
    60be:	9c 87       	std	Y+12, r25	; 0x0c
    60c0:	ad 87       	std	Y+13, r26	; 0x0d
    60c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    60c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    60c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    60ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    60cc:	20 e0       	ldi	r18, 0x00	; 0
    60ce:	30 e0       	ldi	r19, 0x00	; 0
    60d0:	4a e7       	ldi	r20, 0x7A	; 122
    60d2:	55 e4       	ldi	r21, 0x45	; 69
    60d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60d8:	dc 01       	movw	r26, r24
    60da:	cb 01       	movw	r24, r22
    60dc:	8f 83       	std	Y+7, r24	; 0x07
    60de:	98 87       	std	Y+8, r25	; 0x08
    60e0:	a9 87       	std	Y+9, r26	; 0x09
    60e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    60e4:	6f 81       	ldd	r22, Y+7	; 0x07
    60e6:	78 85       	ldd	r23, Y+8	; 0x08
    60e8:	89 85       	ldd	r24, Y+9	; 0x09
    60ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    60ec:	20 e0       	ldi	r18, 0x00	; 0
    60ee:	30 e0       	ldi	r19, 0x00	; 0
    60f0:	40 e8       	ldi	r20, 0x80	; 128
    60f2:	5f e3       	ldi	r21, 0x3F	; 63
    60f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60f8:	88 23       	and	r24, r24
    60fa:	2c f4       	brge	.+10     	; 0x6106 <HAL_Push_Button_ReadBtn+0x238>
		__ticks = 1;
    60fc:	81 e0       	ldi	r24, 0x01	; 1
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	9e 83       	std	Y+6, r25	; 0x06
    6102:	8d 83       	std	Y+5, r24	; 0x05
    6104:	3f c0       	rjmp	.+126    	; 0x6184 <HAL_Push_Button_ReadBtn+0x2b6>
	else if (__tmp > 65535)
    6106:	6f 81       	ldd	r22, Y+7	; 0x07
    6108:	78 85       	ldd	r23, Y+8	; 0x08
    610a:	89 85       	ldd	r24, Y+9	; 0x09
    610c:	9a 85       	ldd	r25, Y+10	; 0x0a
    610e:	20 e0       	ldi	r18, 0x00	; 0
    6110:	3f ef       	ldi	r19, 0xFF	; 255
    6112:	4f e7       	ldi	r20, 0x7F	; 127
    6114:	57 e4       	ldi	r21, 0x47	; 71
    6116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    611a:	18 16       	cp	r1, r24
    611c:	4c f5       	brge	.+82     	; 0x6170 <HAL_Push_Button_ReadBtn+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    611e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6120:	7c 85       	ldd	r23, Y+12	; 0x0c
    6122:	8d 85       	ldd	r24, Y+13	; 0x0d
    6124:	9e 85       	ldd	r25, Y+14	; 0x0e
    6126:	20 e0       	ldi	r18, 0x00	; 0
    6128:	30 e0       	ldi	r19, 0x00	; 0
    612a:	40 e2       	ldi	r20, 0x20	; 32
    612c:	51 e4       	ldi	r21, 0x41	; 65
    612e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6132:	dc 01       	movw	r26, r24
    6134:	cb 01       	movw	r24, r22
    6136:	bc 01       	movw	r22, r24
    6138:	cd 01       	movw	r24, r26
    613a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    613e:	dc 01       	movw	r26, r24
    6140:	cb 01       	movw	r24, r22
    6142:	9e 83       	std	Y+6, r25	; 0x06
    6144:	8d 83       	std	Y+5, r24	; 0x05
    6146:	0f c0       	rjmp	.+30     	; 0x6166 <HAL_Push_Button_ReadBtn+0x298>
    6148:	80 e9       	ldi	r24, 0x90	; 144
    614a:	91 e0       	ldi	r25, 0x01	; 1
    614c:	9c 83       	std	Y+4, r25	; 0x04
    614e:	8b 83       	std	Y+3, r24	; 0x03
    6150:	8b 81       	ldd	r24, Y+3	; 0x03
    6152:	9c 81       	ldd	r25, Y+4	; 0x04
    6154:	01 97       	sbiw	r24, 0x01	; 1
    6156:	f1 f7       	brne	.-4      	; 0x6154 <HAL_Push_Button_ReadBtn+0x286>
    6158:	9c 83       	std	Y+4, r25	; 0x04
    615a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    615c:	8d 81       	ldd	r24, Y+5	; 0x05
    615e:	9e 81       	ldd	r25, Y+6	; 0x06
    6160:	01 97       	sbiw	r24, 0x01	; 1
    6162:	9e 83       	std	Y+6, r25	; 0x06
    6164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6166:	8d 81       	ldd	r24, Y+5	; 0x05
    6168:	9e 81       	ldd	r25, Y+6	; 0x06
    616a:	00 97       	sbiw	r24, 0x00	; 0
    616c:	69 f7       	brne	.-38     	; 0x6148 <HAL_Push_Button_ReadBtn+0x27a>
    616e:	1d c0       	rjmp	.+58     	; 0x61aa <HAL_Push_Button_ReadBtn+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6170:	6f 81       	ldd	r22, Y+7	; 0x07
    6172:	78 85       	ldd	r23, Y+8	; 0x08
    6174:	89 85       	ldd	r24, Y+9	; 0x09
    6176:	9a 85       	ldd	r25, Y+10	; 0x0a
    6178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    617c:	dc 01       	movw	r26, r24
    617e:	cb 01       	movw	r24, r22
    6180:	9e 83       	std	Y+6, r25	; 0x06
    6182:	8d 83       	std	Y+5, r24	; 0x05
    6184:	8d 81       	ldd	r24, Y+5	; 0x05
    6186:	9e 81       	ldd	r25, Y+6	; 0x06
    6188:	9a 83       	std	Y+2, r25	; 0x02
    618a:	89 83       	std	Y+1, r24	; 0x01
    618c:	89 81       	ldd	r24, Y+1	; 0x01
    618e:	9a 81       	ldd	r25, Y+2	; 0x02
    6190:	01 97       	sbiw	r24, 0x01	; 1
    6192:	f1 f7       	brne	.-4      	; 0x6190 <HAL_Push_Button_ReadBtn+0x2c2>
    6194:	9a 83       	std	Y+2, r25	; 0x02
    6196:	89 83       	std	Y+1, r24	; 0x01
    6198:	08 c0       	rjmp	.+16     	; 0x61aa <HAL_Push_Button_ReadBtn+0x2dc>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    619a:	ce 01       	movw	r24, r28
    619c:	4f 96       	adiw	r24, 0x1f	; 31
    619e:	9e 01       	movw	r18, r28
    61a0:	22 5e       	subi	r18, 0xE2	; 226
    61a2:	3f 4f       	sbci	r19, 0xFF	; 255
    61a4:	b9 01       	movw	r22, r18
    61a6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
}
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    61aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    61ac:	81 30       	cpi	r24, 0x01	; 1
    61ae:	a9 f7       	brne	.-22     	; 0x619a <HAL_Push_Button_ReadBtn+0x2cc>
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
    61b0:	ea a1       	ldd	r30, Y+34	; 0x22
    61b2:	fb a1       	ldd	r31, Y+35	; 0x23
    61b4:	10 82       	st	Z, r1
{
    61b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    61b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    61ba:	80 81       	ld	r24, Z
    61bc:	8f 77       	andi	r24, 0x7F	; 127
    61be:	80 83       	st	Z, r24
    61c0:	09 c0       	rjmp	.+18     	; 0x61d4 <HAL_Push_Button_ReadBtn+0x306>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    61c2:	ea a1       	ldd	r30, Y+34	; 0x22
    61c4:	fb a1       	ldd	r31, Y+35	; 0x23
    61c6:	81 e0       	ldi	r24, 0x01	; 1
    61c8:	80 83       	st	Z, r24
}
    61ca:	e8 a1       	ldd	r30, Y+32	; 0x20
    61cc:	f9 a1       	ldd	r31, Y+33	; 0x21
    61ce:	80 81       	ld	r24, Z
    61d0:	80 68       	ori	r24, 0x80	; 128
    61d2:	80 83       	st	Z, r24
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    61d4:	81 e0       	ldi	r24, 0x01	; 1
    61d6:	8d 8f       	std	Y+29, r24	; 0x1d
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
    61d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
	return Local_ErrorStatus;
    61da:	a3 96       	adiw	r28, 0x23	; 35
    61dc:	0f b6       	in	r0, 0x3f	; 63
    61de:	f8 94       	cli
    61e0:	de bf       	out	0x3e, r29	; 62
    61e2:	0f be       	out	0x3f, r0	; 63
    61e4:	cd bf       	out	0x3d, r28	; 61
    61e6:	cf 91       	pop	r28
    61e8:	df 91       	pop	r29
    61ea:	08 95       	ret

000061ec <HAL_POT_POTInit>:
#include <avr/interrupt.h>

#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

    61ec:	df 93       	push	r29
    61ee:	cf 93       	push	r28
    61f0:	00 d0       	rcall	.+0      	; 0x61f2 <HAL_POT_POTInit+0x6>
    61f2:	00 d0       	rcall	.+0      	; 0x61f4 <HAL_POT_POTInit+0x8>
    61f4:	cd b7       	in	r28, 0x3d	; 61
    61f6:	de b7       	in	r29, 0x3e	; 62
    61f8:	9c 83       	std	Y+4, r25	; 0x04
    61fa:	8b 83       	std	Y+3, r24	; 0x03
void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
    61fc:	19 82       	std	Y+1, r1	; 0x01
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
    61fe:	81 e0       	ldi	r24, 0x01	; 1
    6200:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <MCAL_ADC_ADCInitStatus>
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;
    6204:	eb 81       	ldd	r30, Y+3	; 0x03
    6206:	fc 81       	ldd	r31, Y+4	; 0x04
    6208:	80 81       	ld	r24, Z
    620a:	87 70       	andi	r24, 0x07	; 7
    620c:	1a 82       	std	Y+2, r1	; 0x02
    620e:	87 70       	andi	r24, 0x07	; 7
    6210:	98 2f       	mov	r25, r24
    6212:	99 0f       	add	r25, r25
    6214:	99 0f       	add	r25, r25
    6216:	8a 81       	ldd	r24, Y+2	; 0x02
    6218:	83 7e       	andi	r24, 0xE3	; 227
    621a:	89 2b       	or	r24, r25
    621c:	8a 83       	std	Y+2, r24	; 0x02
    621e:	8a 81       	ldd	r24, Y+2	; 0x02
    6220:	8f 79       	andi	r24, 0x9F	; 159
    6222:	80 62       	ori	r24, 0x20	; 32
    6224:	8a 83       	std	Y+2, r24	; 0x02

    6226:	ce 01       	movw	r24, r28
    6228:	02 96       	adiw	r24, 0x02	; 2
    622a:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>

    622e:	eb 81       	ldd	r30, Y+3	; 0x03
    6230:	fc 81       	ldd	r31, Y+4	; 0x04
    6232:	80 81       	ld	r24, Z
    6234:	0e 94 20 2a 	call	0x5440	; 0x5440 <MCAL_ADC_ADCChannelSelect>
/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    6238:	80 e0       	ldi	r24, 0x00	; 0
    623a:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <MCAL_ADC_ADCResultAdjust>
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
    623e:	eb 81       	ldd	r30, Y+3	; 0x03
    6240:	fc 81       	ldd	r31, Y+4	; 0x04
    6242:	81 81       	ldd	r24, Z+1	; 0x01
    6244:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <MCAL_ADC_ADCReferenceSelect>
{
    6248:	eb 81       	ldd	r30, Y+3	; 0x03
    624a:	fc 81       	ldd	r31, Y+4	; 0x04
    624c:	82 81       	ldd	r24, Z+2	; 0x02
    624e:	0e 94 a7 2a 	call	0x554e	; 0x554e <MCAL_ADC_ADCTriggerMode>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    6252:	eb 81       	ldd	r30, Y+3	; 0x03
    6254:	fc 81       	ldd	r31, Y+4	; 0x04
    6256:	83 81       	ldd	r24, Z+3	; 0x03
    6258:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <MCAL_ADC_ADCPrescalarSelect>
	if(Copy_EXTIntStatus == INT_DISABLE)
    625c:	81 e0       	ldi	r24, 0x01	; 1
    625e:	89 83       	std	Y+1, r24	; 0x01
    {
    6260:	89 81       	ldd	r24, Y+1	; 0x01
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    6262:	0f 90       	pop	r0
    6264:	0f 90       	pop	r0
    6266:	0f 90       	pop	r0
    6268:	0f 90       	pop	r0
    626a:	cf 91       	pop	r28
    626c:	df 91       	pop	r29
    626e:	08 95       	ret

00006270 <HAL_POT_POTRead>:
		Local_ErrorStatus = E_OK;
    }
    6270:	df 93       	push	r29
    6272:	cf 93       	push	r28
    6274:	00 d0       	rcall	.+0      	; 0x6276 <HAL_POT_POTRead+0x6>
    6276:	00 d0       	rcall	.+0      	; 0x6278 <HAL_POT_POTRead+0x8>
    6278:	0f 92       	push	r0
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	9b 83       	std	Y+3, r25	; 0x03
    6280:	8a 83       	std	Y+2, r24	; 0x02
    6282:	7d 83       	std	Y+5, r23	; 0x05
    6284:	6c 83       	std	Y+4, r22	; 0x04
	else if(Copy_EXTIntStatus == INT_ENABLE)
    6286:	19 82       	std	Y+1, r1	; 0x01
	{
    6288:	ea 81       	ldd	r30, Y+2	; 0x02
    628a:	fb 81       	ldd	r31, Y+3	; 0x03
    628c:	80 81       	ld	r24, Z
    628e:	2c 81       	ldd	r18, Y+4	; 0x04
    6290:	3d 81       	ldd	r19, Y+5	; 0x05
    6292:	b9 01       	movw	r22, r18
    6294:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <MCAL_ADC_ADCReadResult>
		switch(Copy_EXTInt.INTNum)
    6298:	ec 81       	ldd	r30, Y+4	; 0x04
    629a:	fd 81       	ldd	r31, Y+5	; 0x05
    629c:	80 81       	ld	r24, Z
    629e:	91 81       	ldd	r25, Z+1	; 0x01
    62a0:	ea 81       	ldd	r30, Y+2	; 0x02
    62a2:	fb 81       	ldd	r31, Y+3	; 0x03
    62a4:	95 83       	std	Z+5, r25	; 0x05
    62a6:	84 83       	std	Z+4, r24	; 0x04
	    {
    62a8:	81 e0       	ldi	r24, 0x01	; 1
    62aa:	89 83       	std	Y+1, r24	; 0x01
	    case EXTINT0:
    62ac:	89 81       	ldd	r24, Y+1	; 0x01
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    62ae:	0f 90       	pop	r0
    62b0:	0f 90       	pop	r0
    62b2:	0f 90       	pop	r0
    62b4:	0f 90       	pop	r0
    62b6:	0f 90       	pop	r0
    62b8:	cf 91       	pop	r28
    62ba:	df 91       	pop	r29
    62bc:	08 95       	ret

000062be <HAL_LED_LEDConfig>:
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;
    62be:	df 93       	push	r29
    62c0:	cf 93       	push	r28
    62c2:	00 d0       	rcall	.+0      	; 0x62c4 <HAL_LED_LEDConfig+0x6>
    62c4:	00 d0       	rcall	.+0      	; 0x62c6 <HAL_LED_LEDConfig+0x8>
    62c6:	cd b7       	in	r28, 0x3d	; 61
    62c8:	de b7       	in	r29, 0x3e	; 62
    62ca:	9c 83       	std	Y+4, r25	; 0x04
    62cc:	8b 83       	std	Y+3, r24	; 0x03

    62ce:	19 82       	std	Y+1, r1	; 0x01

    62d0:	eb 81       	ldd	r30, Y+3	; 0x03
    62d2:	fc 81       	ldd	r31, Y+4	; 0x04
    62d4:	80 81       	ld	r24, Z
    62d6:	8f 77       	andi	r24, 0x7F	; 127
    62d8:	80 83       	st	Z, r24
/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    62da:	eb 81       	ldd	r30, Y+3	; 0x03
    62dc:	fc 81       	ldd	r31, Y+4	; 0x04
    62de:	80 81       	ld	r24, Z
    62e0:	87 70       	andi	r24, 0x07	; 7
    62e2:	88 2f       	mov	r24, r24
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	85 30       	cpi	r24, 0x05	; 5
    62e8:	91 05       	cpc	r25, r1
    62ea:	64 f4       	brge	.+24     	; 0x6304 <HAL_LED_LEDConfig+0x46>
    62ec:	eb 81       	ldd	r30, Y+3	; 0x03
    62ee:	fc 81       	ldd	r31, Y+4	; 0x04
    62f0:	80 81       	ld	r24, Z
    62f2:	86 95       	lsr	r24
    62f4:	86 95       	lsr	r24
    62f6:	86 95       	lsr	r24
    62f8:	87 70       	andi	r24, 0x07	; 7
    62fa:	88 2f       	mov	r24, r24
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	88 30       	cpi	r24, 0x08	; 8
    6300:	91 05       	cpc	r25, r1
    6302:	14 f0       	brlt	.+4      	; 0x6308 <HAL_LED_LEDConfig+0x4a>
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
    6304:	19 82       	std	Y+1, r1	; 0x01
    6306:	38 c0       	rjmp	.+112    	; 0x6378 <HAL_LED_LEDConfig+0xba>
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
		Local_ErrorStatus = E_OK;
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
	{
		switch(Copy_EXTInt.INTNum)
    6308:	eb 81       	ldd	r30, Y+3	; 0x03
    630a:	fc 81       	ldd	r31, Y+4	; 0x04
    630c:	80 81       	ld	r24, Z
    630e:	87 70       	andi	r24, 0x07	; 7
    6310:	28 2f       	mov	r18, r24
    6312:	23 70       	andi	r18, 0x03	; 3
    6314:	eb 81       	ldd	r30, Y+3	; 0x03
    6316:	fc 81       	ldd	r31, Y+4	; 0x04
    6318:	80 81       	ld	r24, Z
    631a:	98 2f       	mov	r25, r24
    631c:	96 95       	lsr	r25
    631e:	96 95       	lsr	r25
    6320:	96 95       	lsr	r25
    6322:	97 70       	andi	r25, 0x07	; 7
    6324:	eb 81       	ldd	r30, Y+3	; 0x03
    6326:	fc 81       	ldd	r31, Y+4	; 0x04
    6328:	80 81       	ld	r24, Z
    632a:	38 2f       	mov	r19, r24
    632c:	33 1f       	adc	r19, r19
    632e:	33 27       	eor	r19, r19
    6330:	33 1f       	adc	r19, r19
    6332:	23 70       	andi	r18, 0x03	; 3
    6334:	8a 81       	ldd	r24, Y+2	; 0x02
    6336:	8c 7f       	andi	r24, 0xFC	; 252
    6338:	82 2b       	or	r24, r18
    633a:	8a 83       	std	Y+2, r24	; 0x02
    633c:	89 2f       	mov	r24, r25
    633e:	87 70       	andi	r24, 0x07	; 7
    6340:	98 2f       	mov	r25, r24
    6342:	99 0f       	add	r25, r25
    6344:	99 0f       	add	r25, r25
    6346:	8a 81       	ldd	r24, Y+2	; 0x02
    6348:	83 7e       	andi	r24, 0xE3	; 227
    634a:	89 2b       	or	r24, r25
    634c:	8a 83       	std	Y+2, r24	; 0x02
    634e:	8a 81       	ldd	r24, Y+2	; 0x02
    6350:	8f 79       	andi	r24, 0x9F	; 159
    6352:	8a 83       	std	Y+2, r24	; 0x02
    6354:	93 2f       	mov	r25, r19
    6356:	97 95       	ror	r25
    6358:	99 27       	eor	r25, r25
    635a:	97 95       	ror	r25
    635c:	8a 81       	ldd	r24, Y+2	; 0x02
    635e:	8f 77       	andi	r24, 0x7F	; 127
    6360:	89 2b       	or	r24, r25
    6362:	8a 83       	std	Y+2, r24	; 0x02
	    {
    6364:	ce 01       	movw	r24, r28
    6366:	02 96       	adiw	r24, 0x02	; 2
    6368:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    636c:	88 23       	and	r24, r24
    636e:	11 f4       	brne	.+4      	; 0x6374 <HAL_LED_LEDConfig+0xb6>
	    case EXTINT0:
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    6370:	19 82       	std	Y+1, r1	; 0x01
    6372:	02 c0       	rjmp	.+4      	; 0x6378 <HAL_LED_LEDConfig+0xba>
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
            Local_ErrorStatus = E_OK;
	    	break;
    6374:	81 e0       	ldi	r24, 0x01	; 1
    6376:	89 83       	std	Y+1, r24	; 0x01
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    6378:	89 81       	ldd	r24, Y+1	; 0x01
	    	SET_BIT(GICR_REG, EXTINT1);
    637a:	0f 90       	pop	r0
    637c:	0f 90       	pop	r0
    637e:	0f 90       	pop	r0
    6380:	0f 90       	pop	r0
    6382:	cf 91       	pop	r28
    6384:	df 91       	pop	r29
    6386:	08 95       	ret

00006388 <HAL_LED_LEDOn>:
	    	Local_ErrorStatus = E_OK;
	    	break;
    6388:	df 93       	push	r29
    638a:	cf 93       	push	r28
    638c:	00 d0       	rcall	.+0      	; 0x638e <HAL_LED_LEDOn+0x6>
    638e:	00 d0       	rcall	.+0      	; 0x6390 <HAL_LED_LEDOn+0x8>
    6390:	0f 92       	push	r0
    6392:	cd b7       	in	r28, 0x3d	; 61
    6394:	de b7       	in	r29, 0x3e	; 62
    6396:	9c 83       	std	Y+4, r25	; 0x04
    6398:	8b 83       	std	Y+3, r24	; 0x03
	    case EXTINT2:
    639a:	19 82       	std	Y+1, r1	; 0x01
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    639c:	eb 81       	ldd	r30, Y+3	; 0x03
    639e:	fc 81       	ldd	r31, Y+4	; 0x04
    63a0:	80 81       	ld	r24, Z
    63a2:	80 74       	andi	r24, 0x40	; 64
    63a4:	8d 83       	std	Y+5, r24	; 0x05
    63a6:	8d 81       	ldd	r24, Y+5	; 0x05
    63a8:	88 23       	and	r24, r24
    63aa:	11 f0       	breq	.+4      	; 0x63b0 <HAL_LED_LEDOn+0x28>
    63ac:	81 e0       	ldi	r24, 0x01	; 1
    63ae:	8d 83       	std	Y+5, r24	; 0x05
    63b0:	8d 81       	ldd	r24, Y+5	; 0x05
    63b2:	eb 81       	ldd	r30, Y+3	; 0x03
    63b4:	fc 81       	ldd	r31, Y+4	; 0x04
    63b6:	98 2f       	mov	r25, r24
    63b8:	97 95       	ror	r25
    63ba:	99 27       	eor	r25, r25
    63bc:	97 95       	ror	r25
    63be:	80 81       	ld	r24, Z
    63c0:	8f 77       	andi	r24, 0x7F	; 127
    63c2:	89 2b       	or	r24, r25
    63c4:	80 83       	st	Z, r24
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    		SET_BIT(GICR_REG, EXTINT2);
	    	    Local_ErrorStatus = E_OK;
	    	}
    63c6:	eb 81       	ldd	r30, Y+3	; 0x03
    63c8:	fc 81       	ldd	r31, Y+4	; 0x04
    63ca:	80 81       	ld	r24, Z
    63cc:	87 70       	andi	r24, 0x07	; 7
    63ce:	28 2f       	mov	r18, r24
    63d0:	23 70       	andi	r18, 0x03	; 3
    63d2:	eb 81       	ldd	r30, Y+3	; 0x03
    63d4:	fc 81       	ldd	r31, Y+4	; 0x04
    63d6:	80 81       	ld	r24, Z
    63d8:	98 2f       	mov	r25, r24
    63da:	96 95       	lsr	r25
    63dc:	96 95       	lsr	r25
    63de:	96 95       	lsr	r25
    63e0:	97 70       	andi	r25, 0x07	; 7
    63e2:	eb 81       	ldd	r30, Y+3	; 0x03
    63e4:	fc 81       	ldd	r31, Y+4	; 0x04
    63e6:	80 81       	ld	r24, Z
    63e8:	38 2f       	mov	r19, r24
    63ea:	33 1f       	adc	r19, r19
    63ec:	33 27       	eor	r19, r19
    63ee:	33 1f       	adc	r19, r19
    63f0:	23 70       	andi	r18, 0x03	; 3
    63f2:	8a 81       	ldd	r24, Y+2	; 0x02
    63f4:	8c 7f       	andi	r24, 0xFC	; 252
    63f6:	82 2b       	or	r24, r18
    63f8:	8a 83       	std	Y+2, r24	; 0x02
    63fa:	89 2f       	mov	r24, r25
    63fc:	87 70       	andi	r24, 0x07	; 7
    63fe:	98 2f       	mov	r25, r24
    6400:	99 0f       	add	r25, r25
    6402:	99 0f       	add	r25, r25
    6404:	8a 81       	ldd	r24, Y+2	; 0x02
    6406:	83 7e       	andi	r24, 0xE3	; 227
    6408:	89 2b       	or	r24, r25
    640a:	8a 83       	std	Y+2, r24	; 0x02
    640c:	8a 81       	ldd	r24, Y+2	; 0x02
    640e:	8f 79       	andi	r24, 0x9F	; 159
    6410:	8a 83       	std	Y+2, r24	; 0x02
    6412:	93 2f       	mov	r25, r19
    6414:	97 95       	ror	r25
    6416:	99 27       	eor	r25, r25
    6418:	97 95       	ror	r25
    641a:	8a 81       	ldd	r24, Y+2	; 0x02
    641c:	8f 77       	andi	r24, 0x7F	; 127
    641e:	89 2b       	or	r24, r25
    6420:	8a 83       	std	Y+2, r24	; 0x02
	    	else
    6422:	eb 81       	ldd	r30, Y+3	; 0x03
    6424:	fc 81       	ldd	r31, Y+4	; 0x04
    6426:	80 81       	ld	r24, Z
    6428:	88 1f       	adc	r24, r24
    642a:	88 27       	eor	r24, r24
    642c:	88 1f       	adc	r24, r24
    642e:	28 2f       	mov	r18, r24
    6430:	ce 01       	movw	r24, r28
    6432:	02 96       	adiw	r24, 0x02	; 2
    6434:	62 2f       	mov	r22, r18
    6436:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    643a:	88 23       	and	r24, r24
    643c:	11 f4       	brne	.+4      	; 0x6442 <HAL_LED_LEDOn+0xba>
	    	{
	    		Local_ErrorStatus = E_NOT_OK;
    643e:	19 82       	std	Y+1, r1	; 0x01
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <HAL_LED_LEDOn+0xbe>
	    	}
	    	break;
	    default:
	    	Local_ErrorStatus = E_NOT_OK;
    6442:	81 e0       	ldi	r24, 0x01	; 1
    6444:	89 83       	std	Y+1, r24	; 0x01
	}
	}
    6446:	89 81       	ldd	r24, Y+1	; 0x01
	return Local_ErrorStatus;
    6448:	0f 90       	pop	r0
    644a:	0f 90       	pop	r0
    644c:	0f 90       	pop	r0
    644e:	0f 90       	pop	r0
    6450:	0f 90       	pop	r0
    6452:	cf 91       	pop	r28
    6454:	df 91       	pop	r29
    6456:	08 95       	ret

00006458 <HAL_LED_LEDOff>:
}
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
    6458:	df 93       	push	r29
    645a:	cf 93       	push	r28
    645c:	00 d0       	rcall	.+0      	; 0x645e <HAL_LED_LEDOff+0x6>
    645e:	00 d0       	rcall	.+0      	; 0x6460 <HAL_LED_LEDOff+0x8>
    6460:	0f 92       	push	r0
    6462:	cd b7       	in	r28, 0x3d	; 61
    6464:	de b7       	in	r29, 0x3e	; 62
    6466:	9c 83       	std	Y+4, r25	; 0x04
    6468:	8b 83       	std	Y+3, r24	; 0x03
{
    646a:	19 82       	std	Y+1, r1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    646c:	eb 81       	ldd	r30, Y+3	; 0x03
    646e:	fc 81       	ldd	r31, Y+4	; 0x04
    6470:	80 81       	ld	r24, Z
    6472:	80 74       	andi	r24, 0x40	; 64
    6474:	1d 82       	std	Y+5, r1	; 0x05
    6476:	88 23       	and	r24, r24
    6478:	11 f4       	brne	.+4      	; 0x647e <HAL_LED_LEDOff+0x26>
    647a:	81 e0       	ldi	r24, 0x01	; 1
    647c:	8d 83       	std	Y+5, r24	; 0x05
    647e:	eb 81       	ldd	r30, Y+3	; 0x03
    6480:	fc 81       	ldd	r31, Y+4	; 0x04
    6482:	9d 81       	ldd	r25, Y+5	; 0x05
    6484:	97 95       	ror	r25
    6486:	99 27       	eor	r25, r25
    6488:	97 95       	ror	r25
    648a:	80 81       	ld	r24, Z
    648c:	8f 77       	andi	r24, 0x7F	; 127
    648e:	89 2b       	or	r24, r25
    6490:	80 83       	st	Z, r24
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
    6492:	eb 81       	ldd	r30, Y+3	; 0x03
    6494:	fc 81       	ldd	r31, Y+4	; 0x04
    6496:	80 81       	ld	r24, Z
    6498:	87 70       	andi	r24, 0x07	; 7
    649a:	28 2f       	mov	r18, r24
    649c:	23 70       	andi	r18, 0x03	; 3
    649e:	eb 81       	ldd	r30, Y+3	; 0x03
    64a0:	fc 81       	ldd	r31, Y+4	; 0x04
    64a2:	80 81       	ld	r24, Z
    64a4:	98 2f       	mov	r25, r24
    64a6:	96 95       	lsr	r25
    64a8:	96 95       	lsr	r25
    64aa:	96 95       	lsr	r25
    64ac:	97 70       	andi	r25, 0x07	; 7
    64ae:	eb 81       	ldd	r30, Y+3	; 0x03
    64b0:	fc 81       	ldd	r31, Y+4	; 0x04
    64b2:	80 81       	ld	r24, Z
    64b4:	38 2f       	mov	r19, r24
    64b6:	33 1f       	adc	r19, r19
    64b8:	33 27       	eor	r19, r19
    64ba:	33 1f       	adc	r19, r19
    64bc:	23 70       	andi	r18, 0x03	; 3
    64be:	8a 81       	ldd	r24, Y+2	; 0x02
    64c0:	8c 7f       	andi	r24, 0xFC	; 252
    64c2:	82 2b       	or	r24, r18
    64c4:	8a 83       	std	Y+2, r24	; 0x02
    64c6:	89 2f       	mov	r24, r25
    64c8:	87 70       	andi	r24, 0x07	; 7
    64ca:	98 2f       	mov	r25, r24
    64cc:	99 0f       	add	r25, r25
    64ce:	99 0f       	add	r25, r25
    64d0:	8a 81       	ldd	r24, Y+2	; 0x02
    64d2:	83 7e       	andi	r24, 0xE3	; 227
    64d4:	89 2b       	or	r24, r25
    64d6:	8a 83       	std	Y+2, r24	; 0x02
    64d8:	8a 81       	ldd	r24, Y+2	; 0x02
    64da:	8f 79       	andi	r24, 0x9F	; 159
    64dc:	8a 83       	std	Y+2, r24	; 0x02
    64de:	93 2f       	mov	r25, r19
    64e0:	97 95       	ror	r25
    64e2:	99 27       	eor	r25, r25
    64e4:	97 95       	ror	r25
    64e6:	8a 81       	ldd	r24, Y+2	; 0x02
    64e8:	8f 77       	andi	r24, 0x7F	; 127
    64ea:	89 2b       	or	r24, r25
    64ec:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    64ee:	eb 81       	ldd	r30, Y+3	; 0x03
    64f0:	fc 81       	ldd	r31, Y+4	; 0x04
    64f2:	80 81       	ld	r24, Z
    64f4:	88 1f       	adc	r24, r24
    64f6:	88 27       	eor	r24, r24
    64f8:	88 1f       	adc	r24, r24
    64fa:	28 2f       	mov	r18, r24
    64fc:	ce 01       	movw	r24, r28
    64fe:	02 96       	adiw	r24, 0x02	; 2
    6500:	62 2f       	mov	r22, r18
    6502:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    6506:	88 23       	and	r24, r24
    6508:	11 f4       	brne	.+4      	; 0x650e <HAL_LED_LEDOff+0xb6>
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
    650a:	19 82       	std	Y+1, r1	; 0x01
    650c:	02 c0       	rjmp	.+4      	; 0x6512 <HAL_LED_LEDOff+0xba>
	return Local_ErrorStatus;
}
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	89 83       	std	Y+1, r24	; 0x01
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    6512:	89 81       	ldd	r24, Y+1	; 0x01
	Local_ErrorStatus = E_OK;
    6514:	0f 90       	pop	r0
    6516:	0f 90       	pop	r0
    6518:	0f 90       	pop	r0
    651a:	0f 90       	pop	r0
    651c:	0f 90       	pop	r0
    651e:	cf 91       	pop	r28
    6520:	df 91       	pop	r29
    6522:	08 95       	ret

00006524 <HAL_LED_LEDToggle>:
	return Local_ErrorStatus;
}
    6524:	df 93       	push	r29
    6526:	cf 93       	push	r28
    6528:	00 d0       	rcall	.+0      	; 0x652a <HAL_LED_LEDToggle+0x6>
    652a:	00 d0       	rcall	.+0      	; 0x652c <HAL_LED_LEDToggle+0x8>
    652c:	cd b7       	in	r28, 0x3d	; 61
    652e:	de b7       	in	r29, 0x3e	; 62
    6530:	9c 83       	std	Y+4, r25	; 0x04
    6532:	8b 83       	std	Y+3, r24	; 0x03
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
    6534:	19 82       	std	Y+1, r1	; 0x01
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    6536:	eb 81       	ldd	r30, Y+3	; 0x03
    6538:	fc 81       	ldd	r31, Y+4	; 0x04
    653a:	80 81       	ld	r24, Z
    653c:	87 70       	andi	r24, 0x07	; 7
    653e:	28 2f       	mov	r18, r24
    6540:	23 70       	andi	r18, 0x03	; 3
    6542:	eb 81       	ldd	r30, Y+3	; 0x03
    6544:	fc 81       	ldd	r31, Y+4	; 0x04
    6546:	80 81       	ld	r24, Z
    6548:	98 2f       	mov	r25, r24
    654a:	96 95       	lsr	r25
    654c:	96 95       	lsr	r25
    654e:	96 95       	lsr	r25
    6550:	97 70       	andi	r25, 0x07	; 7
    6552:	eb 81       	ldd	r30, Y+3	; 0x03
    6554:	fc 81       	ldd	r31, Y+4	; 0x04
    6556:	80 81       	ld	r24, Z
    6558:	38 2f       	mov	r19, r24
    655a:	33 1f       	adc	r19, r19
    655c:	33 27       	eor	r19, r19
    655e:	33 1f       	adc	r19, r19
    6560:	23 70       	andi	r18, 0x03	; 3
    6562:	8a 81       	ldd	r24, Y+2	; 0x02
    6564:	8c 7f       	andi	r24, 0xFC	; 252
    6566:	82 2b       	or	r24, r18
    6568:	8a 83       	std	Y+2, r24	; 0x02
    656a:	89 2f       	mov	r24, r25
    656c:	87 70       	andi	r24, 0x07	; 7
    656e:	98 2f       	mov	r25, r24
    6570:	99 0f       	add	r25, r25
    6572:	99 0f       	add	r25, r25
    6574:	8a 81       	ldd	r24, Y+2	; 0x02
    6576:	83 7e       	andi	r24, 0xE3	; 227
    6578:	89 2b       	or	r24, r25
    657a:	8a 83       	std	Y+2, r24	; 0x02
    657c:	8a 81       	ldd	r24, Y+2	; 0x02
    657e:	8f 79       	andi	r24, 0x9F	; 159
    6580:	8a 83       	std	Y+2, r24	; 0x02
    6582:	93 2f       	mov	r25, r19
    6584:	97 95       	ror	r25
    6586:	99 27       	eor	r25, r25
    6588:	97 95       	ror	r25
    658a:	8a 81       	ldd	r24, Y+2	; 0x02
    658c:	8f 77       	andi	r24, 0x7F	; 127
    658e:	89 2b       	or	r24, r25
    6590:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
    6592:	ce 01       	movw	r24, r28
    6594:	02 96       	adiw	r24, 0x02	; 2
    6596:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
    659a:	88 23       	and	r24, r24
    659c:	11 f4       	brne	.+4      	; 0x65a2 <HAL_LED_LEDToggle+0x7e>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    659e:	19 82       	std	Y+1, r1	; 0x01
    65a0:	10 c0       	rjmp	.+32     	; 0x65c2 <HAL_LED_LEDToggle+0x9e>
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    65a2:	8a 81       	ldd	r24, Y+2	; 0x02
    65a4:	88 1f       	adc	r24, r24
    65a6:	88 27       	eor	r24, r24
    65a8:	88 1f       	adc	r24, r24
    65aa:	eb 81       	ldd	r30, Y+3	; 0x03
    65ac:	fc 81       	ldd	r31, Y+4	; 0x04
    65ae:	98 2f       	mov	r25, r24
    65b0:	97 95       	ror	r25
    65b2:	99 27       	eor	r25, r25
    65b4:	97 95       	ror	r25
    65b6:	80 81       	ld	r24, Z
    65b8:	8f 77       	andi	r24, 0x7F	; 127
    65ba:	89 2b       	or	r24, r25
    65bc:	80 83       	st	Z, r24

    65be:	81 e0       	ldi	r24, 0x01	; 1
    65c0:	89 83       	std	Y+1, r24	; 0x01
ISR(INT0_vect)
{
    65c2:	89 81       	ldd	r24, Y+1	; 0x01
	EXT_Interrupt_EXTINT0_CallBack();
    65c4:	0f 90       	pop	r0
    65c6:	0f 90       	pop	r0
    65c8:	0f 90       	pop	r0
    65ca:	0f 90       	pop	r0
    65cc:	cf 91       	pop	r28
    65ce:	df 91       	pop	r29
    65d0:	08 95       	ret

000065d2 <HAL_LED_LEDBlink>:
}

    65d2:	df 93       	push	r29
    65d4:	cf 93       	push	r28
    65d6:	cd b7       	in	r28, 0x3d	; 61
    65d8:	de b7       	in	r29, 0x3e	; 62
    65da:	a1 97       	sbiw	r28, 0x21	; 33
    65dc:	0f b6       	in	r0, 0x3f	; 63
    65de:	f8 94       	cli
    65e0:	de bf       	out	0x3e, r29	; 62
    65e2:	0f be       	out	0x3f, r0	; 63
    65e4:	cd bf       	out	0x3d, r28	; 61
    65e6:	98 a3       	std	Y+32, r25	; 0x20
    65e8:	8f 8f       	std	Y+31, r24	; 0x1f
    65ea:	69 a3       	std	Y+33, r22	; 0x21
ISR(INT1_vect)
    65ec:	1d 8e       	std	Y+29, r1	; 0x1d
{
	EXT_Interrupt_EXTINT1_CallBack();
}

ISR(INT2_vect)
{
    65ee:	ef 8d       	ldd	r30, Y+31	; 0x1f
    65f0:	f8 a1       	ldd	r31, Y+32	; 0x20
    65f2:	80 81       	ld	r24, Z
    65f4:	87 70       	andi	r24, 0x07	; 7
    65f6:	28 2f       	mov	r18, r24
    65f8:	23 70       	andi	r18, 0x03	; 3
    65fa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    65fc:	f8 a1       	ldd	r31, Y+32	; 0x20
    65fe:	80 81       	ld	r24, Z
    6600:	98 2f       	mov	r25, r24
    6602:	96 95       	lsr	r25
    6604:	96 95       	lsr	r25
    6606:	96 95       	lsr	r25
    6608:	97 70       	andi	r25, 0x07	; 7
    660a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    660c:	f8 a1       	ldd	r31, Y+32	; 0x20
    660e:	80 81       	ld	r24, Z
    6610:	38 2f       	mov	r19, r24
    6612:	33 1f       	adc	r19, r19
    6614:	33 27       	eor	r19, r19
    6616:	33 1f       	adc	r19, r19
    6618:	23 70       	andi	r18, 0x03	; 3
    661a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    661c:	8c 7f       	andi	r24, 0xFC	; 252
    661e:	82 2b       	or	r24, r18
    6620:	8e 8f       	std	Y+30, r24	; 0x1e
    6622:	89 2f       	mov	r24, r25
    6624:	87 70       	andi	r24, 0x07	; 7
    6626:	98 2f       	mov	r25, r24
    6628:	99 0f       	add	r25, r25
    662a:	99 0f       	add	r25, r25
    662c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    662e:	83 7e       	andi	r24, 0xE3	; 227
    6630:	89 2b       	or	r24, r25
    6632:	8e 8f       	std	Y+30, r24	; 0x1e
    6634:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6636:	8f 79       	andi	r24, 0x9F	; 159
    6638:	8e 8f       	std	Y+30, r24	; 0x1e
    663a:	93 2f       	mov	r25, r19
    663c:	97 95       	ror	r25
    663e:	99 27       	eor	r25, r25
    6640:	97 95       	ror	r25
    6642:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6644:	8f 77       	andi	r24, 0x7F	; 127
    6646:	89 2b       	or	r24, r25
    6648:	8e 8f       	std	Y+30, r24	; 0x1e
    664a:	f5 c0       	rjmp	.+490    	; 0x6836 <HAL_LED_LEDBlink+0x264>
	EXT_Interrupt_EXTINT2_CallBack();
}
    664c:	ce 01       	movw	r24, r28
    664e:	4e 96       	adiw	r24, 0x1e	; 30
    6650:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
    6654:	88 23       	and	r24, r24
    6656:	11 f4       	brne	.+4      	; 0x665c <HAL_LED_LEDBlink+0x8a>
    6658:	1d 8e       	std	Y+29, r1	; 0x1d
    665a:	02 c0       	rjmp	.+4      	; 0x6660 <HAL_LED_LEDBlink+0x8e>
    665c:	81 e0       	ldi	r24, 0x01	; 1
    665e:	8d 8f       	std	Y+29, r24	; 0x1d
    6660:	80 e0       	ldi	r24, 0x00	; 0
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	aa ef       	ldi	r26, 0xFA	; 250
    6666:	b3 e4       	ldi	r27, 0x43	; 67
    6668:	89 8f       	std	Y+25, r24	; 0x19
    666a:	9a 8f       	std	Y+26, r25	; 0x1a
    666c:	ab 8f       	std	Y+27, r26	; 0x1b
    666e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6670:	69 8d       	ldd	r22, Y+25	; 0x19
    6672:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6674:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6676:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6678:	20 e0       	ldi	r18, 0x00	; 0
    667a:	30 e0       	ldi	r19, 0x00	; 0
    667c:	4a e7       	ldi	r20, 0x7A	; 122
    667e:	55 e4       	ldi	r21, 0x45	; 69
    6680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6684:	dc 01       	movw	r26, r24
    6686:	cb 01       	movw	r24, r22
    6688:	8d 8b       	std	Y+21, r24	; 0x15
    668a:	9e 8b       	std	Y+22, r25	; 0x16
    668c:	af 8b       	std	Y+23, r26	; 0x17
    668e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6690:	6d 89       	ldd	r22, Y+21	; 0x15
    6692:	7e 89       	ldd	r23, Y+22	; 0x16
    6694:	8f 89       	ldd	r24, Y+23	; 0x17
    6696:	98 8d       	ldd	r25, Y+24	; 0x18
    6698:	20 e0       	ldi	r18, 0x00	; 0
    669a:	30 e0       	ldi	r19, 0x00	; 0
    669c:	40 e8       	ldi	r20, 0x80	; 128
    669e:	5f e3       	ldi	r21, 0x3F	; 63
    66a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66a4:	88 23       	and	r24, r24
    66a6:	2c f4       	brge	.+10     	; 0x66b2 <HAL_LED_LEDBlink+0xe0>
		__ticks = 1;
    66a8:	81 e0       	ldi	r24, 0x01	; 1
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	9c 8b       	std	Y+20, r25	; 0x14
    66ae:	8b 8b       	std	Y+19, r24	; 0x13
    66b0:	3f c0       	rjmp	.+126    	; 0x6730 <HAL_LED_LEDBlink+0x15e>
	else if (__tmp > 65535)
    66b2:	6d 89       	ldd	r22, Y+21	; 0x15
    66b4:	7e 89       	ldd	r23, Y+22	; 0x16
    66b6:	8f 89       	ldd	r24, Y+23	; 0x17
    66b8:	98 8d       	ldd	r25, Y+24	; 0x18
    66ba:	20 e0       	ldi	r18, 0x00	; 0
    66bc:	3f ef       	ldi	r19, 0xFF	; 255
    66be:	4f e7       	ldi	r20, 0x7F	; 127
    66c0:	57 e4       	ldi	r21, 0x47	; 71
    66c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66c6:	18 16       	cp	r1, r24
    66c8:	4c f5       	brge	.+82     	; 0x671c <HAL_LED_LEDBlink+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66ca:	69 8d       	ldd	r22, Y+25	; 0x19
    66cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66d2:	20 e0       	ldi	r18, 0x00	; 0
    66d4:	30 e0       	ldi	r19, 0x00	; 0
    66d6:	40 e2       	ldi	r20, 0x20	; 32
    66d8:	51 e4       	ldi	r21, 0x41	; 65
    66da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66de:	dc 01       	movw	r26, r24
    66e0:	cb 01       	movw	r24, r22
    66e2:	bc 01       	movw	r22, r24
    66e4:	cd 01       	movw	r24, r26
    66e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66ea:	dc 01       	movw	r26, r24
    66ec:	cb 01       	movw	r24, r22
    66ee:	9c 8b       	std	Y+20, r25	; 0x14
    66f0:	8b 8b       	std	Y+19, r24	; 0x13
    66f2:	0f c0       	rjmp	.+30     	; 0x6712 <HAL_LED_LEDBlink+0x140>
    66f4:	80 e9       	ldi	r24, 0x90	; 144
    66f6:	91 e0       	ldi	r25, 0x01	; 1
    66f8:	9a 8b       	std	Y+18, r25	; 0x12
    66fa:	89 8b       	std	Y+17, r24	; 0x11
    66fc:	89 89       	ldd	r24, Y+17	; 0x11
    66fe:	9a 89       	ldd	r25, Y+18	; 0x12
    6700:	01 97       	sbiw	r24, 0x01	; 1
    6702:	f1 f7       	brne	.-4      	; 0x6700 <HAL_LED_LEDBlink+0x12e>
    6704:	9a 8b       	std	Y+18, r25	; 0x12
    6706:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6708:	8b 89       	ldd	r24, Y+19	; 0x13
    670a:	9c 89       	ldd	r25, Y+20	; 0x14
    670c:	01 97       	sbiw	r24, 0x01	; 1
    670e:	9c 8b       	std	Y+20, r25	; 0x14
    6710:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6712:	8b 89       	ldd	r24, Y+19	; 0x13
    6714:	9c 89       	ldd	r25, Y+20	; 0x14
    6716:	00 97       	sbiw	r24, 0x00	; 0
    6718:	69 f7       	brne	.-38     	; 0x66f4 <HAL_LED_LEDBlink+0x122>
    671a:	14 c0       	rjmp	.+40     	; 0x6744 <HAL_LED_LEDBlink+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    671c:	6d 89       	ldd	r22, Y+21	; 0x15
    671e:	7e 89       	ldd	r23, Y+22	; 0x16
    6720:	8f 89       	ldd	r24, Y+23	; 0x17
    6722:	98 8d       	ldd	r25, Y+24	; 0x18
    6724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6728:	dc 01       	movw	r26, r24
    672a:	cb 01       	movw	r24, r22
    672c:	9c 8b       	std	Y+20, r25	; 0x14
    672e:	8b 8b       	std	Y+19, r24	; 0x13
    6730:	8b 89       	ldd	r24, Y+19	; 0x13
    6732:	9c 89       	ldd	r25, Y+20	; 0x14
    6734:	98 8b       	std	Y+16, r25	; 0x10
    6736:	8f 87       	std	Y+15, r24	; 0x0f
    6738:	8f 85       	ldd	r24, Y+15	; 0x0f
    673a:	98 89       	ldd	r25, Y+16	; 0x10
    673c:	01 97       	sbiw	r24, 0x01	; 1
    673e:	f1 f7       	brne	.-4      	; 0x673c <HAL_LED_LEDBlink+0x16a>
    6740:	98 8b       	std	Y+16, r25	; 0x10
    6742:	8f 87       	std	Y+15, r24	; 0x0f
    6744:	ce 01       	movw	r24, r28
    6746:	4e 96       	adiw	r24, 0x1e	; 30
    6748:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
    674c:	80 e0       	ldi	r24, 0x00	; 0
    674e:	90 e0       	ldi	r25, 0x00	; 0
    6750:	aa ef       	ldi	r26, 0xFA	; 250
    6752:	b3 e4       	ldi	r27, 0x43	; 67
    6754:	8b 87       	std	Y+11, r24	; 0x0b
    6756:	9c 87       	std	Y+12, r25	; 0x0c
    6758:	ad 87       	std	Y+13, r26	; 0x0d
    675a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    675c:	6b 85       	ldd	r22, Y+11	; 0x0b
    675e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6760:	8d 85       	ldd	r24, Y+13	; 0x0d
    6762:	9e 85       	ldd	r25, Y+14	; 0x0e
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	30 e0       	ldi	r19, 0x00	; 0
    6768:	4a e7       	ldi	r20, 0x7A	; 122
    676a:	55 e4       	ldi	r21, 0x45	; 69
    676c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6770:	dc 01       	movw	r26, r24
    6772:	cb 01       	movw	r24, r22
    6774:	8f 83       	std	Y+7, r24	; 0x07
    6776:	98 87       	std	Y+8, r25	; 0x08
    6778:	a9 87       	std	Y+9, r26	; 0x09
    677a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    677c:	6f 81       	ldd	r22, Y+7	; 0x07
    677e:	78 85       	ldd	r23, Y+8	; 0x08
    6780:	89 85       	ldd	r24, Y+9	; 0x09
    6782:	9a 85       	ldd	r25, Y+10	; 0x0a
    6784:	20 e0       	ldi	r18, 0x00	; 0
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	40 e8       	ldi	r20, 0x80	; 128
    678a:	5f e3       	ldi	r21, 0x3F	; 63
    678c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6790:	88 23       	and	r24, r24
    6792:	2c f4       	brge	.+10     	; 0x679e <HAL_LED_LEDBlink+0x1cc>
		__ticks = 1;
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	9e 83       	std	Y+6, r25	; 0x06
    679a:	8d 83       	std	Y+5, r24	; 0x05
    679c:	3f c0       	rjmp	.+126    	; 0x681c <HAL_LED_LEDBlink+0x24a>
	else if (__tmp > 65535)
    679e:	6f 81       	ldd	r22, Y+7	; 0x07
    67a0:	78 85       	ldd	r23, Y+8	; 0x08
    67a2:	89 85       	ldd	r24, Y+9	; 0x09
    67a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    67a6:	20 e0       	ldi	r18, 0x00	; 0
    67a8:	3f ef       	ldi	r19, 0xFF	; 255
    67aa:	4f e7       	ldi	r20, 0x7F	; 127
    67ac:	57 e4       	ldi	r21, 0x47	; 71
    67ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    67b2:	18 16       	cp	r1, r24
    67b4:	4c f5       	brge	.+82     	; 0x6808 <HAL_LED_LEDBlink+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    67b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    67ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    67bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    67be:	20 e0       	ldi	r18, 0x00	; 0
    67c0:	30 e0       	ldi	r19, 0x00	; 0
    67c2:	40 e2       	ldi	r20, 0x20	; 32
    67c4:	51 e4       	ldi	r21, 0x41	; 65
    67c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67ca:	dc 01       	movw	r26, r24
    67cc:	cb 01       	movw	r24, r22
    67ce:	bc 01       	movw	r22, r24
    67d0:	cd 01       	movw	r24, r26
    67d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67d6:	dc 01       	movw	r26, r24
    67d8:	cb 01       	movw	r24, r22
    67da:	9e 83       	std	Y+6, r25	; 0x06
    67dc:	8d 83       	std	Y+5, r24	; 0x05
    67de:	0f c0       	rjmp	.+30     	; 0x67fe <HAL_LED_LEDBlink+0x22c>
    67e0:	80 e9       	ldi	r24, 0x90	; 144
    67e2:	91 e0       	ldi	r25, 0x01	; 1
    67e4:	9c 83       	std	Y+4, r25	; 0x04
    67e6:	8b 83       	std	Y+3, r24	; 0x03
    67e8:	8b 81       	ldd	r24, Y+3	; 0x03
    67ea:	9c 81       	ldd	r25, Y+4	; 0x04
    67ec:	01 97       	sbiw	r24, 0x01	; 1
    67ee:	f1 f7       	brne	.-4      	; 0x67ec <HAL_LED_LEDBlink+0x21a>
    67f0:	9c 83       	std	Y+4, r25	; 0x04
    67f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67f4:	8d 81       	ldd	r24, Y+5	; 0x05
    67f6:	9e 81       	ldd	r25, Y+6	; 0x06
    67f8:	01 97       	sbiw	r24, 0x01	; 1
    67fa:	9e 83       	std	Y+6, r25	; 0x06
    67fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6800:	9e 81       	ldd	r25, Y+6	; 0x06
    6802:	00 97       	sbiw	r24, 0x00	; 0
    6804:	69 f7       	brne	.-38     	; 0x67e0 <HAL_LED_LEDBlink+0x20e>
    6806:	14 c0       	rjmp	.+40     	; 0x6830 <HAL_LED_LEDBlink+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6808:	6f 81       	ldd	r22, Y+7	; 0x07
    680a:	78 85       	ldd	r23, Y+8	; 0x08
    680c:	89 85       	ldd	r24, Y+9	; 0x09
    680e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6814:	dc 01       	movw	r26, r24
    6816:	cb 01       	movw	r24, r22
    6818:	9e 83       	std	Y+6, r25	; 0x06
    681a:	8d 83       	std	Y+5, r24	; 0x05
    681c:	8d 81       	ldd	r24, Y+5	; 0x05
    681e:	9e 81       	ldd	r25, Y+6	; 0x06
    6820:	9a 83       	std	Y+2, r25	; 0x02
    6822:	89 83       	std	Y+1, r24	; 0x01
    6824:	89 81       	ldd	r24, Y+1	; 0x01
    6826:	9a 81       	ldd	r25, Y+2	; 0x02
    6828:	01 97       	sbiw	r24, 0x01	; 1
    682a:	f1 f7       	brne	.-4      	; 0x6828 <HAL_LED_LEDBlink+0x256>
    682c:	9a 83       	std	Y+2, r25	; 0x02
    682e:	89 83       	std	Y+1, r24	; 0x01
	EXT_Interrupt_EXTINT1_CallBack();
}

ISR(INT2_vect)
{
	EXT_Interrupt_EXTINT2_CallBack();
    6830:	89 a1       	ldd	r24, Y+33	; 0x21
    6832:	81 50       	subi	r24, 0x01	; 1
    6834:	89 a3       	std	Y+33, r24	; 0x21
    6836:	89 a1       	ldd	r24, Y+33	; 0x21
    6838:	88 23       	and	r24, r24
    683a:	09 f0       	breq	.+2      	; 0x683e <HAL_LED_LEDBlink+0x26c>
    683c:	07 cf       	rjmp	.-498    	; 0x664c <HAL_LED_LEDBlink+0x7a>
    683e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6840:	a1 96       	adiw	r28, 0x21	; 33
    6842:	0f b6       	in	r0, 0x3f	; 63
    6844:	f8 94       	cli
    6846:	de bf       	out	0x3e, r29	; 62
    6848:	0f be       	out	0x3f, r0	; 63
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	cf 91       	pop	r28
    684e:	df 91       	pop	r29
    6850:	08 95       	ret

00006852 <HAL_LED_LEDArrayConfig>:
    6852:	df 93       	push	r29
    6854:	cf 93       	push	r28
    6856:	00 d0       	rcall	.+0      	; 0x6858 <HAL_LED_LEDArrayConfig+0x6>
    6858:	00 d0       	rcall	.+0      	; 0x685a <HAL_LED_LEDArrayConfig+0x8>
    685a:	0f 92       	push	r0
    685c:	cd b7       	in	r28, 0x3d	; 61
    685e:	de b7       	in	r29, 0x3e	; 62
    6860:	9d 83       	std	Y+5, r25	; 0x05
    6862:	8c 83       	std	Y+4, r24	; 0x04
    6864:	1a 82       	std	Y+2, r1	; 0x02
    6866:	ec 81       	ldd	r30, Y+4	; 0x04
    6868:	fd 81       	ldd	r31, Y+5	; 0x05
    686a:	80 81       	ld	r24, Z
    686c:	87 70       	andi	r24, 0x07	; 7
    686e:	88 2f       	mov	r24, r24
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	85 30       	cpi	r24, 0x05	; 5
    6874:	91 05       	cpc	r25, r1
    6876:	2c f4       	brge	.+10     	; 0x6882 <HAL_LED_LEDArrayConfig+0x30>
    6878:	ec 81       	ldd	r30, Y+4	; 0x04
    687a:	fd 81       	ldd	r31, Y+5	; 0x05
    687c:	82 81       	ldd	r24, Z+2	; 0x02
    687e:	88 30       	cpi	r24, 0x08	; 8
    6880:	10 f0       	brcs	.+4      	; 0x6886 <HAL_LED_LEDArrayConfig+0x34>
    6882:	1a 82       	std	Y+2, r1	; 0x02
    6884:	38 c0       	rjmp	.+112    	; 0x68f6 <HAL_LED_LEDArrayConfig+0xa4>
    6886:	ec 81       	ldd	r30, Y+4	; 0x04
    6888:	fd 81       	ldd	r31, Y+5	; 0x05
    688a:	82 81       	ldd	r24, Z+2	; 0x02
    688c:	89 83       	std	Y+1, r24	; 0x01
    688e:	26 c0       	rjmp	.+76     	; 0x68dc <HAL_LED_LEDArrayConfig+0x8a>
    6890:	ec 81       	ldd	r30, Y+4	; 0x04
    6892:	fd 81       	ldd	r31, Y+5	; 0x05
    6894:	80 81       	ld	r24, Z
    6896:	87 70       	andi	r24, 0x07	; 7
    6898:	98 2f       	mov	r25, r24
    689a:	93 70       	andi	r25, 0x03	; 3
    689c:	89 81       	ldd	r24, Y+1	; 0x01
    689e:	81 50       	subi	r24, 0x01	; 1
    68a0:	28 2f       	mov	r18, r24
    68a2:	27 70       	andi	r18, 0x07	; 7
    68a4:	1b 82       	std	Y+3, r1	; 0x03
    68a6:	93 70       	andi	r25, 0x03	; 3
    68a8:	8b 81       	ldd	r24, Y+3	; 0x03
    68aa:	8c 7f       	andi	r24, 0xFC	; 252
    68ac:	89 2b       	or	r24, r25
    68ae:	8b 83       	std	Y+3, r24	; 0x03
    68b0:	82 2f       	mov	r24, r18
    68b2:	87 70       	andi	r24, 0x07	; 7
    68b4:	98 2f       	mov	r25, r24
    68b6:	99 0f       	add	r25, r25
    68b8:	99 0f       	add	r25, r25
    68ba:	8b 81       	ldd	r24, Y+3	; 0x03
    68bc:	83 7e       	andi	r24, 0xE3	; 227
    68be:	89 2b       	or	r24, r25
    68c0:	8b 83       	std	Y+3, r24	; 0x03
    68c2:	ce 01       	movw	r24, r28
    68c4:	03 96       	adiw	r24, 0x03	; 3
    68c6:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    68ca:	88 23       	and	r24, r24
    68cc:	11 f4       	brne	.+4      	; 0x68d2 <HAL_LED_LEDArrayConfig+0x80>
    68ce:	1a 82       	std	Y+2, r1	; 0x02
    68d0:	02 c0       	rjmp	.+4      	; 0x68d6 <HAL_LED_LEDArrayConfig+0x84>
    68d2:	81 e0       	ldi	r24, 0x01	; 1
    68d4:	8a 83       	std	Y+2, r24	; 0x02
    68d6:	89 81       	ldd	r24, Y+1	; 0x01
    68d8:	81 50       	subi	r24, 0x01	; 1
    68da:	89 83       	std	Y+1, r24	; 0x01
    68dc:	89 81       	ldd	r24, Y+1	; 0x01
    68de:	28 2f       	mov	r18, r24
    68e0:	33 27       	eor	r19, r19
    68e2:	27 fd       	sbrc	r18, 7
    68e4:	30 95       	com	r19
    68e6:	ec 81       	ldd	r30, Y+4	; 0x04
    68e8:	fd 81       	ldd	r31, Y+5	; 0x05
    68ea:	81 81       	ldd	r24, Z+1	; 0x01
    68ec:	88 2f       	mov	r24, r24
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	28 17       	cp	r18, r24
    68f2:	39 07       	cpc	r19, r25
    68f4:	6c f6       	brge	.-102    	; 0x6890 <HAL_LED_LEDArrayConfig+0x3e>
    68f6:	8a 81       	ldd	r24, Y+2	; 0x02
    68f8:	0f 90       	pop	r0
    68fa:	0f 90       	pop	r0
    68fc:	0f 90       	pop	r0
    68fe:	0f 90       	pop	r0
    6900:	0f 90       	pop	r0
    6902:	cf 91       	pop	r28
    6904:	df 91       	pop	r29
    6906:	08 95       	ret

00006908 <HAL_LED_LEDArrayPatternOn>:
    6908:	df 93       	push	r29
    690a:	cf 93       	push	r28
    690c:	cd b7       	in	r28, 0x3d	; 61
    690e:	de b7       	in	r29, 0x3e	; 62
    6910:	28 97       	sbiw	r28, 0x08	; 8
    6912:	0f b6       	in	r0, 0x3f	; 63
    6914:	f8 94       	cli
    6916:	de bf       	out	0x3e, r29	; 62
    6918:	0f be       	out	0x3f, r0	; 63
    691a:	cd bf       	out	0x3d, r28	; 61
    691c:	9f 83       	std	Y+7, r25	; 0x07
    691e:	8e 83       	std	Y+6, r24	; 0x06
    6920:	1c 82       	std	Y+4, r1	; 0x04
    6922:	1b 82       	std	Y+3, r1	; 0x03
    6924:	1a 82       	std	Y+2, r1	; 0x02
    6926:	ee 81       	ldd	r30, Y+6	; 0x06
    6928:	ff 81       	ldd	r31, Y+7	; 0x07
    692a:	82 81       	ldd	r24, Z+2	; 0x02
    692c:	89 83       	std	Y+1, r24	; 0x01
    692e:	5b c0       	rjmp	.+182    	; 0x69e6 <HAL_LED_LEDArrayPatternOn+0xde>
    6930:	ee 81       	ldd	r30, Y+6	; 0x06
    6932:	ff 81       	ldd	r31, Y+7	; 0x07
    6934:	83 81       	ldd	r24, Z+3	; 0x03
    6936:	28 2f       	mov	r18, r24
    6938:	30 e0       	ldi	r19, 0x00	; 0
    693a:	89 81       	ldd	r24, Y+1	; 0x01
    693c:	99 27       	eor	r25, r25
    693e:	87 fd       	sbrc	r24, 7
    6940:	90 95       	com	r25
    6942:	a9 01       	movw	r20, r18
    6944:	02 c0       	rjmp	.+4      	; 0x694a <HAL_LED_LEDArrayPatternOn+0x42>
    6946:	55 95       	asr	r21
    6948:	47 95       	ror	r20
    694a:	8a 95       	dec	r24
    694c:	e2 f7       	brpl	.-8      	; 0x6946 <HAL_LED_LEDArrayPatternOn+0x3e>
    694e:	ca 01       	movw	r24, r20
    6950:	81 70       	andi	r24, 0x01	; 1
    6952:	8a 83       	std	Y+2, r24	; 0x02
    6954:	ee 81       	ldd	r30, Y+6	; 0x06
    6956:	ff 81       	ldd	r31, Y+7	; 0x07
    6958:	80 81       	ld	r24, Z
    695a:	88 70       	andi	r24, 0x08	; 8
    695c:	88 23       	and	r24, r24
    695e:	39 f4       	brne	.+14     	; 0x696e <HAL_LED_LEDArrayPatternOn+0x66>
    6960:	18 86       	std	Y+8, r1	; 0x08
    6962:	8a 81       	ldd	r24, Y+2	; 0x02
    6964:	88 23       	and	r24, r24
    6966:	29 f4       	brne	.+10     	; 0x6972 <HAL_LED_LEDArrayPatternOn+0x6a>
    6968:	51 e0       	ldi	r21, 0x01	; 1
    696a:	58 87       	std	Y+8, r21	; 0x08
    696c:	02 c0       	rjmp	.+4      	; 0x6972 <HAL_LED_LEDArrayPatternOn+0x6a>
    696e:	8a 81       	ldd	r24, Y+2	; 0x02
    6970:	88 87       	std	Y+8, r24	; 0x08
    6972:	48 85       	ldd	r20, Y+8	; 0x08
    6974:	4b 83       	std	Y+3, r20	; 0x03
    6976:	ee 81       	ldd	r30, Y+6	; 0x06
    6978:	ff 81       	ldd	r31, Y+7	; 0x07
    697a:	80 81       	ld	r24, Z
    697c:	87 70       	andi	r24, 0x07	; 7
    697e:	98 2f       	mov	r25, r24
    6980:	93 70       	andi	r25, 0x03	; 3
    6982:	89 81       	ldd	r24, Y+1	; 0x01
    6984:	28 2f       	mov	r18, r24
    6986:	27 70       	andi	r18, 0x07	; 7
    6988:	8b 81       	ldd	r24, Y+3	; 0x03
    698a:	38 2f       	mov	r19, r24
    698c:	31 70       	andi	r19, 0x01	; 1
    698e:	93 70       	andi	r25, 0x03	; 3
    6990:	8d 81       	ldd	r24, Y+5	; 0x05
    6992:	8c 7f       	andi	r24, 0xFC	; 252
    6994:	89 2b       	or	r24, r25
    6996:	8d 83       	std	Y+5, r24	; 0x05
    6998:	82 2f       	mov	r24, r18
    699a:	87 70       	andi	r24, 0x07	; 7
    699c:	98 2f       	mov	r25, r24
    699e:	99 0f       	add	r25, r25
    69a0:	99 0f       	add	r25, r25
    69a2:	8d 81       	ldd	r24, Y+5	; 0x05
    69a4:	83 7e       	andi	r24, 0xE3	; 227
    69a6:	89 2b       	or	r24, r25
    69a8:	8d 83       	std	Y+5, r24	; 0x05
    69aa:	8d 81       	ldd	r24, Y+5	; 0x05
    69ac:	8f 79       	andi	r24, 0x9F	; 159
    69ae:	8d 83       	std	Y+5, r24	; 0x05
    69b0:	93 2f       	mov	r25, r19
    69b2:	97 95       	ror	r25
    69b4:	99 27       	eor	r25, r25
    69b6:	97 95       	ror	r25
    69b8:	8d 81       	ldd	r24, Y+5	; 0x05
    69ba:	8f 77       	andi	r24, 0x7F	; 127
    69bc:	89 2b       	or	r24, r25
    69be:	8d 83       	std	Y+5, r24	; 0x05
    69c0:	8d 81       	ldd	r24, Y+5	; 0x05
    69c2:	88 1f       	adc	r24, r24
    69c4:	88 27       	eor	r24, r24
    69c6:	88 1f       	adc	r24, r24
    69c8:	28 2f       	mov	r18, r24
    69ca:	ce 01       	movw	r24, r28
    69cc:	05 96       	adiw	r24, 0x05	; 5
    69ce:	62 2f       	mov	r22, r18
    69d0:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    69d4:	88 23       	and	r24, r24
    69d6:	11 f4       	brne	.+4      	; 0x69dc <HAL_LED_LEDArrayPatternOn+0xd4>
    69d8:	1c 82       	std	Y+4, r1	; 0x04
    69da:	02 c0       	rjmp	.+4      	; 0x69e0 <HAL_LED_LEDArrayPatternOn+0xd8>
    69dc:	81 e0       	ldi	r24, 0x01	; 1
    69de:	8c 83       	std	Y+4, r24	; 0x04
    69e0:	89 81       	ldd	r24, Y+1	; 0x01
    69e2:	81 50       	subi	r24, 0x01	; 1
    69e4:	89 83       	std	Y+1, r24	; 0x01
    69e6:	89 81       	ldd	r24, Y+1	; 0x01
    69e8:	28 2f       	mov	r18, r24
    69ea:	33 27       	eor	r19, r19
    69ec:	27 fd       	sbrc	r18, 7
    69ee:	30 95       	com	r19
    69f0:	ee 81       	ldd	r30, Y+6	; 0x06
    69f2:	ff 81       	ldd	r31, Y+7	; 0x07
    69f4:	81 81       	ldd	r24, Z+1	; 0x01
    69f6:	88 2f       	mov	r24, r24
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	28 17       	cp	r18, r24
    69fc:	39 07       	cpc	r19, r25
    69fe:	0c f0       	brlt	.+2      	; 0x6a02 <HAL_LED_LEDArrayPatternOn+0xfa>
    6a00:	97 cf       	rjmp	.-210    	; 0x6930 <HAL_LED_LEDArrayPatternOn+0x28>
    6a02:	8c 81       	ldd	r24, Y+4	; 0x04
    6a04:	28 96       	adiw	r28, 0x08	; 8
    6a06:	0f b6       	in	r0, 0x3f	; 63
    6a08:	f8 94       	cli
    6a0a:	de bf       	out	0x3e, r29	; 62
    6a0c:	0f be       	out	0x3f, r0	; 63
    6a0e:	cd bf       	out	0x3d, r28	; 61
    6a10:	cf 91       	pop	r28
    6a12:	df 91       	pop	r29
    6a14:	08 95       	ret

00006a16 <HAL_LED_LEDArrayPatternOff>:
    6a16:	df 93       	push	r29
    6a18:	cf 93       	push	r28
    6a1a:	00 d0       	rcall	.+0      	; 0x6a1c <HAL_LED_LEDArrayPatternOff+0x6>
    6a1c:	00 d0       	rcall	.+0      	; 0x6a1e <HAL_LED_LEDArrayPatternOff+0x8>
    6a1e:	00 d0       	rcall	.+0      	; 0x6a20 <HAL_LED_LEDArrayPatternOff+0xa>
    6a20:	cd b7       	in	r28, 0x3d	; 61
    6a22:	de b7       	in	r29, 0x3e	; 62
    6a24:	9e 83       	std	Y+6, r25	; 0x06
    6a26:	8d 83       	std	Y+5, r24	; 0x05
    6a28:	1b 82       	std	Y+3, r1	; 0x03
    6a2a:	1a 82       	std	Y+2, r1	; 0x02
    6a2c:	ed 81       	ldd	r30, Y+5	; 0x05
    6a2e:	fe 81       	ldd	r31, Y+6	; 0x06
    6a30:	82 81       	ldd	r24, Z+2	; 0x02
    6a32:	89 83       	std	Y+1, r24	; 0x01
    6a34:	41 c0       	rjmp	.+130    	; 0x6ab8 <HAL_LED_LEDArrayPatternOff+0xa2>
    6a36:	ed 81       	ldd	r30, Y+5	; 0x05
    6a38:	fe 81       	ldd	r31, Y+6	; 0x06
    6a3a:	80 81       	ld	r24, Z
    6a3c:	88 70       	andi	r24, 0x08	; 8
    6a3e:	1a 82       	std	Y+2, r1	; 0x02
    6a40:	88 23       	and	r24, r24
    6a42:	11 f4       	brne	.+4      	; 0x6a48 <HAL_LED_LEDArrayPatternOff+0x32>
    6a44:	81 e0       	ldi	r24, 0x01	; 1
    6a46:	8a 83       	std	Y+2, r24	; 0x02
    6a48:	ed 81       	ldd	r30, Y+5	; 0x05
    6a4a:	fe 81       	ldd	r31, Y+6	; 0x06
    6a4c:	80 81       	ld	r24, Z
    6a4e:	87 70       	andi	r24, 0x07	; 7
    6a50:	98 2f       	mov	r25, r24
    6a52:	93 70       	andi	r25, 0x03	; 3
    6a54:	89 81       	ldd	r24, Y+1	; 0x01
    6a56:	28 2f       	mov	r18, r24
    6a58:	27 70       	andi	r18, 0x07	; 7
    6a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a5c:	38 2f       	mov	r19, r24
    6a5e:	31 70       	andi	r19, 0x01	; 1
    6a60:	93 70       	andi	r25, 0x03	; 3
    6a62:	8c 81       	ldd	r24, Y+4	; 0x04
    6a64:	8c 7f       	andi	r24, 0xFC	; 252
    6a66:	89 2b       	or	r24, r25
    6a68:	8c 83       	std	Y+4, r24	; 0x04
    6a6a:	82 2f       	mov	r24, r18
    6a6c:	87 70       	andi	r24, 0x07	; 7
    6a6e:	98 2f       	mov	r25, r24
    6a70:	99 0f       	add	r25, r25
    6a72:	99 0f       	add	r25, r25
    6a74:	8c 81       	ldd	r24, Y+4	; 0x04
    6a76:	83 7e       	andi	r24, 0xE3	; 227
    6a78:	89 2b       	or	r24, r25
    6a7a:	8c 83       	std	Y+4, r24	; 0x04
    6a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    6a7e:	8f 79       	andi	r24, 0x9F	; 159
    6a80:	8c 83       	std	Y+4, r24	; 0x04
    6a82:	93 2f       	mov	r25, r19
    6a84:	97 95       	ror	r25
    6a86:	99 27       	eor	r25, r25
    6a88:	97 95       	ror	r25
    6a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a8c:	8f 77       	andi	r24, 0x7F	; 127
    6a8e:	89 2b       	or	r24, r25
    6a90:	8c 83       	std	Y+4, r24	; 0x04
    6a92:	8c 81       	ldd	r24, Y+4	; 0x04
    6a94:	88 1f       	adc	r24, r24
    6a96:	88 27       	eor	r24, r24
    6a98:	88 1f       	adc	r24, r24
    6a9a:	28 2f       	mov	r18, r24
    6a9c:	ce 01       	movw	r24, r28
    6a9e:	04 96       	adiw	r24, 0x04	; 4
    6aa0:	62 2f       	mov	r22, r18
    6aa2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    6aa6:	88 23       	and	r24, r24
    6aa8:	11 f4       	brne	.+4      	; 0x6aae <HAL_LED_LEDArrayPatternOff+0x98>
    6aaa:	1b 82       	std	Y+3, r1	; 0x03
    6aac:	02 c0       	rjmp	.+4      	; 0x6ab2 <HAL_LED_LEDArrayPatternOff+0x9c>
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	8b 83       	std	Y+3, r24	; 0x03
    6ab2:	89 81       	ldd	r24, Y+1	; 0x01
    6ab4:	81 50       	subi	r24, 0x01	; 1
    6ab6:	89 83       	std	Y+1, r24	; 0x01
    6ab8:	89 81       	ldd	r24, Y+1	; 0x01
    6aba:	28 2f       	mov	r18, r24
    6abc:	33 27       	eor	r19, r19
    6abe:	27 fd       	sbrc	r18, 7
    6ac0:	30 95       	com	r19
    6ac2:	ed 81       	ldd	r30, Y+5	; 0x05
    6ac4:	fe 81       	ldd	r31, Y+6	; 0x06
    6ac6:	81 81       	ldd	r24, Z+1	; 0x01
    6ac8:	88 2f       	mov	r24, r24
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	28 17       	cp	r18, r24
    6ace:	39 07       	cpc	r19, r25
    6ad0:	0c f0       	brlt	.+2      	; 0x6ad4 <HAL_LED_LEDArrayPatternOff+0xbe>
    6ad2:	b1 cf       	rjmp	.-158    	; 0x6a36 <HAL_LED_LEDArrayPatternOff+0x20>
    6ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ad6:	26 96       	adiw	r28, 0x06	; 6
    6ad8:	0f b6       	in	r0, 0x3f	; 63
    6ada:	f8 94       	cli
    6adc:	de bf       	out	0x3e, r29	; 62
    6ade:	0f be       	out	0x3f, r0	; 63
    6ae0:	cd bf       	out	0x3d, r28	; 61
    6ae2:	cf 91       	pop	r28
    6ae4:	df 91       	pop	r29
    6ae6:	08 95       	ret

00006ae8 <HAL_LED_LEDArrayPatternBlink>:
    6ae8:	df 93       	push	r29
    6aea:	cf 93       	push	r28
    6aec:	cd b7       	in	r28, 0x3d	; 61
    6aee:	de b7       	in	r29, 0x3e	; 62
    6af0:	a0 97       	sbiw	r28, 0x20	; 32
    6af2:	0f b6       	in	r0, 0x3f	; 63
    6af4:	f8 94       	cli
    6af6:	de bf       	out	0x3e, r29	; 62
    6af8:	0f be       	out	0x3f, r0	; 63
    6afa:	cd bf       	out	0x3d, r28	; 61
    6afc:	9f 8f       	std	Y+31, r25	; 0x1f
    6afe:	8e 8f       	std	Y+30, r24	; 0x1e
    6b00:	68 a3       	std	Y+32, r22	; 0x20
    6b02:	1d 8e       	std	Y+29, r1	; 0x1d
    6b04:	f1 c0       	rjmp	.+482    	; 0x6ce8 <HAL_LED_LEDArrayPatternBlink+0x200>
    6b06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6b08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6b0a:	0e 94 84 34 	call	0x6908	; 0x6908 <HAL_LED_LEDArrayPatternOn>
    6b0e:	80 e0       	ldi	r24, 0x00	; 0
    6b10:	90 e0       	ldi	r25, 0x00	; 0
    6b12:	aa ef       	ldi	r26, 0xFA	; 250
    6b14:	b3 e4       	ldi	r27, 0x43	; 67
    6b16:	89 8f       	std	Y+25, r24	; 0x19
    6b18:	9a 8f       	std	Y+26, r25	; 0x1a
    6b1a:	ab 8f       	std	Y+27, r26	; 0x1b
    6b1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    6b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b26:	20 e0       	ldi	r18, 0x00	; 0
    6b28:	30 e0       	ldi	r19, 0x00	; 0
    6b2a:	4a e7       	ldi	r20, 0x7A	; 122
    6b2c:	55 e4       	ldi	r21, 0x45	; 69
    6b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b32:	dc 01       	movw	r26, r24
    6b34:	cb 01       	movw	r24, r22
    6b36:	8d 8b       	std	Y+21, r24	; 0x15
    6b38:	9e 8b       	std	Y+22, r25	; 0x16
    6b3a:	af 8b       	std	Y+23, r26	; 0x17
    6b3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    6b40:	7e 89       	ldd	r23, Y+22	; 0x16
    6b42:	8f 89       	ldd	r24, Y+23	; 0x17
    6b44:	98 8d       	ldd	r25, Y+24	; 0x18
    6b46:	20 e0       	ldi	r18, 0x00	; 0
    6b48:	30 e0       	ldi	r19, 0x00	; 0
    6b4a:	40 e8       	ldi	r20, 0x80	; 128
    6b4c:	5f e3       	ldi	r21, 0x3F	; 63
    6b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b52:	88 23       	and	r24, r24
    6b54:	2c f4       	brge	.+10     	; 0x6b60 <HAL_LED_LEDArrayPatternBlink+0x78>
		__ticks = 1;
    6b56:	81 e0       	ldi	r24, 0x01	; 1
    6b58:	90 e0       	ldi	r25, 0x00	; 0
    6b5a:	9c 8b       	std	Y+20, r25	; 0x14
    6b5c:	8b 8b       	std	Y+19, r24	; 0x13
    6b5e:	3f c0       	rjmp	.+126    	; 0x6bde <HAL_LED_LEDArrayPatternBlink+0xf6>
	else if (__tmp > 65535)
    6b60:	6d 89       	ldd	r22, Y+21	; 0x15
    6b62:	7e 89       	ldd	r23, Y+22	; 0x16
    6b64:	8f 89       	ldd	r24, Y+23	; 0x17
    6b66:	98 8d       	ldd	r25, Y+24	; 0x18
    6b68:	20 e0       	ldi	r18, 0x00	; 0
    6b6a:	3f ef       	ldi	r19, 0xFF	; 255
    6b6c:	4f e7       	ldi	r20, 0x7F	; 127
    6b6e:	57 e4       	ldi	r21, 0x47	; 71
    6b70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b74:	18 16       	cp	r1, r24
    6b76:	4c f5       	brge	.+82     	; 0x6bca <HAL_LED_LEDArrayPatternBlink+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b78:	69 8d       	ldd	r22, Y+25	; 0x19
    6b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b80:	20 e0       	ldi	r18, 0x00	; 0
    6b82:	30 e0       	ldi	r19, 0x00	; 0
    6b84:	40 e2       	ldi	r20, 0x20	; 32
    6b86:	51 e4       	ldi	r21, 0x41	; 65
    6b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b8c:	dc 01       	movw	r26, r24
    6b8e:	cb 01       	movw	r24, r22
    6b90:	bc 01       	movw	r22, r24
    6b92:	cd 01       	movw	r24, r26
    6b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b98:	dc 01       	movw	r26, r24
    6b9a:	cb 01       	movw	r24, r22
    6b9c:	9c 8b       	std	Y+20, r25	; 0x14
    6b9e:	8b 8b       	std	Y+19, r24	; 0x13
    6ba0:	0f c0       	rjmp	.+30     	; 0x6bc0 <HAL_LED_LEDArrayPatternBlink+0xd8>
    6ba2:	80 e9       	ldi	r24, 0x90	; 144
    6ba4:	91 e0       	ldi	r25, 0x01	; 1
    6ba6:	9a 8b       	std	Y+18, r25	; 0x12
    6ba8:	89 8b       	std	Y+17, r24	; 0x11
    6baa:	89 89       	ldd	r24, Y+17	; 0x11
    6bac:	9a 89       	ldd	r25, Y+18	; 0x12
    6bae:	01 97       	sbiw	r24, 0x01	; 1
    6bb0:	f1 f7       	brne	.-4      	; 0x6bae <HAL_LED_LEDArrayPatternBlink+0xc6>
    6bb2:	9a 8b       	std	Y+18, r25	; 0x12
    6bb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    6bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    6bba:	01 97       	sbiw	r24, 0x01	; 1
    6bbc:	9c 8b       	std	Y+20, r25	; 0x14
    6bbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    6bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    6bc4:	00 97       	sbiw	r24, 0x00	; 0
    6bc6:	69 f7       	brne	.-38     	; 0x6ba2 <HAL_LED_LEDArrayPatternBlink+0xba>
    6bc8:	14 c0       	rjmp	.+40     	; 0x6bf2 <HAL_LED_LEDArrayPatternBlink+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bca:	6d 89       	ldd	r22, Y+21	; 0x15
    6bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    6bce:	8f 89       	ldd	r24, Y+23	; 0x17
    6bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    6bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	cb 01       	movw	r24, r22
    6bda:	9c 8b       	std	Y+20, r25	; 0x14
    6bdc:	8b 8b       	std	Y+19, r24	; 0x13
    6bde:	8b 89       	ldd	r24, Y+19	; 0x13
    6be0:	9c 89       	ldd	r25, Y+20	; 0x14
    6be2:	98 8b       	std	Y+16, r25	; 0x10
    6be4:	8f 87       	std	Y+15, r24	; 0x0f
    6be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6be8:	98 89       	ldd	r25, Y+16	; 0x10
    6bea:	01 97       	sbiw	r24, 0x01	; 1
    6bec:	f1 f7       	brne	.-4      	; 0x6bea <HAL_LED_LEDArrayPatternBlink+0x102>
    6bee:	98 8b       	std	Y+16, r25	; 0x10
    6bf0:	8f 87       	std	Y+15, r24	; 0x0f
    6bf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6bf4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6bf6:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <HAL_LED_LEDArrayPatternOff>
    6bfa:	80 e0       	ldi	r24, 0x00	; 0
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	aa ef       	ldi	r26, 0xFA	; 250
    6c00:	b3 e4       	ldi	r27, 0x43	; 67
    6c02:	8b 87       	std	Y+11, r24	; 0x0b
    6c04:	9c 87       	std	Y+12, r25	; 0x0c
    6c06:	ad 87       	std	Y+13, r26	; 0x0d
    6c08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c12:	20 e0       	ldi	r18, 0x00	; 0
    6c14:	30 e0       	ldi	r19, 0x00	; 0
    6c16:	4a e7       	ldi	r20, 0x7A	; 122
    6c18:	55 e4       	ldi	r21, 0x45	; 69
    6c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c1e:	dc 01       	movw	r26, r24
    6c20:	cb 01       	movw	r24, r22
    6c22:	8f 83       	std	Y+7, r24	; 0x07
    6c24:	98 87       	std	Y+8, r25	; 0x08
    6c26:	a9 87       	std	Y+9, r26	; 0x09
    6c28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    6c2c:	78 85       	ldd	r23, Y+8	; 0x08
    6c2e:	89 85       	ldd	r24, Y+9	; 0x09
    6c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c32:	20 e0       	ldi	r18, 0x00	; 0
    6c34:	30 e0       	ldi	r19, 0x00	; 0
    6c36:	40 e8       	ldi	r20, 0x80	; 128
    6c38:	5f e3       	ldi	r21, 0x3F	; 63
    6c3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c3e:	88 23       	and	r24, r24
    6c40:	2c f4       	brge	.+10     	; 0x6c4c <HAL_LED_LEDArrayPatternBlink+0x164>
		__ticks = 1;
    6c42:	81 e0       	ldi	r24, 0x01	; 1
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	9e 83       	std	Y+6, r25	; 0x06
    6c48:	8d 83       	std	Y+5, r24	; 0x05
    6c4a:	3f c0       	rjmp	.+126    	; 0x6cca <HAL_LED_LEDArrayPatternBlink+0x1e2>
	else if (__tmp > 65535)
    6c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    6c4e:	78 85       	ldd	r23, Y+8	; 0x08
    6c50:	89 85       	ldd	r24, Y+9	; 0x09
    6c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c54:	20 e0       	ldi	r18, 0x00	; 0
    6c56:	3f ef       	ldi	r19, 0xFF	; 255
    6c58:	4f e7       	ldi	r20, 0x7F	; 127
    6c5a:	57 e4       	ldi	r21, 0x47	; 71
    6c5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c60:	18 16       	cp	r1, r24
    6c62:	4c f5       	brge	.+82     	; 0x6cb6 <HAL_LED_LEDArrayPatternBlink+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c6c:	20 e0       	ldi	r18, 0x00	; 0
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	40 e2       	ldi	r20, 0x20	; 32
    6c72:	51 e4       	ldi	r21, 0x41	; 65
    6c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c78:	dc 01       	movw	r26, r24
    6c7a:	cb 01       	movw	r24, r22
    6c7c:	bc 01       	movw	r22, r24
    6c7e:	cd 01       	movw	r24, r26
    6c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c84:	dc 01       	movw	r26, r24
    6c86:	cb 01       	movw	r24, r22
    6c88:	9e 83       	std	Y+6, r25	; 0x06
    6c8a:	8d 83       	std	Y+5, r24	; 0x05
    6c8c:	0f c0       	rjmp	.+30     	; 0x6cac <HAL_LED_LEDArrayPatternBlink+0x1c4>
    6c8e:	80 e9       	ldi	r24, 0x90	; 144
    6c90:	91 e0       	ldi	r25, 0x01	; 1
    6c92:	9c 83       	std	Y+4, r25	; 0x04
    6c94:	8b 83       	std	Y+3, r24	; 0x03
    6c96:	8b 81       	ldd	r24, Y+3	; 0x03
    6c98:	9c 81       	ldd	r25, Y+4	; 0x04
    6c9a:	01 97       	sbiw	r24, 0x01	; 1
    6c9c:	f1 f7       	brne	.-4      	; 0x6c9a <HAL_LED_LEDArrayPatternBlink+0x1b2>
    6c9e:	9c 83       	std	Y+4, r25	; 0x04
    6ca0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca6:	01 97       	sbiw	r24, 0x01	; 1
    6ca8:	9e 83       	std	Y+6, r25	; 0x06
    6caa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cac:	8d 81       	ldd	r24, Y+5	; 0x05
    6cae:	9e 81       	ldd	r25, Y+6	; 0x06
    6cb0:	00 97       	sbiw	r24, 0x00	; 0
    6cb2:	69 f7       	brne	.-38     	; 0x6c8e <HAL_LED_LEDArrayPatternBlink+0x1a6>
    6cb4:	14 c0       	rjmp	.+40     	; 0x6cde <HAL_LED_LEDArrayPatternBlink+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    6cb8:	78 85       	ldd	r23, Y+8	; 0x08
    6cba:	89 85       	ldd	r24, Y+9	; 0x09
    6cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cc2:	dc 01       	movw	r26, r24
    6cc4:	cb 01       	movw	r24, r22
    6cc6:	9e 83       	std	Y+6, r25	; 0x06
    6cc8:	8d 83       	std	Y+5, r24	; 0x05
    6cca:	8d 81       	ldd	r24, Y+5	; 0x05
    6ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    6cce:	9a 83       	std	Y+2, r25	; 0x02
    6cd0:	89 83       	std	Y+1, r24	; 0x01
    6cd2:	89 81       	ldd	r24, Y+1	; 0x01
    6cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    6cd6:	01 97       	sbiw	r24, 0x01	; 1
    6cd8:	f1 f7       	brne	.-4      	; 0x6cd6 <HAL_LED_LEDArrayPatternBlink+0x1ee>
    6cda:	9a 83       	std	Y+2, r25	; 0x02
    6cdc:	89 83       	std	Y+1, r24	; 0x01
    6cde:	81 e0       	ldi	r24, 0x01	; 1
    6ce0:	8d 8f       	std	Y+29, r24	; 0x1d
    6ce2:	88 a1       	ldd	r24, Y+32	; 0x20
    6ce4:	81 50       	subi	r24, 0x01	; 1
    6ce6:	88 a3       	std	Y+32, r24	; 0x20
    6ce8:	88 a1       	ldd	r24, Y+32	; 0x20
    6cea:	88 23       	and	r24, r24
    6cec:	09 f0       	breq	.+2      	; 0x6cf0 <HAL_LED_LEDArrayPatternBlink+0x208>
    6cee:	0b cf       	rjmp	.-490    	; 0x6b06 <HAL_LED_LEDArrayPatternBlink+0x1e>
    6cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6cf2:	a0 96       	adiw	r28, 0x20	; 32
    6cf4:	0f b6       	in	r0, 0x3f	; 63
    6cf6:	f8 94       	cli
    6cf8:	de bf       	out	0x3e, r29	; 62
    6cfa:	0f be       	out	0x3f, r0	; 63
    6cfc:	cd bf       	out	0x3d, r28	; 61
    6cfe:	cf 91       	pop	r28
    6d00:	df 91       	pop	r29
    6d02:	08 95       	ret

00006d04 <HAL_CLCD_Init>:
#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
    6d04:	df 93       	push	r29
    6d06:	cf 93       	push	r28
    6d08:	cd b7       	in	r28, 0x3d	; 61
    6d0a:	de b7       	in	r29, 0x3e	; 62
    6d0c:	6b 97       	sbiw	r28, 0x1b	; 27
    6d0e:	0f b6       	in	r0, 0x3f	; 63
    6d10:	f8 94       	cli
    6d12:	de bf       	out	0x3e, r29	; 62
    6d14:	0f be       	out	0x3f, r0	; 63
    6d16:	cd bf       	out	0x3d, r28	; 61
    6d18:	9b 8f       	std	Y+27, r25	; 0x1b
    6d1a:	8a 8f       	std	Y+26, r24	; 0x1a
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;
    6d1c:	1f 86       	std	Y+15, r1	; 0x0f


/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
    6d1e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6d20:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6d22:	80 81       	ld	r24, Z
    6d24:	81 70       	andi	r24, 0x01	; 1
    6d26:	81 70       	andi	r24, 0x01	; 1
    6d28:	98 2f       	mov	r25, r24
    6d2a:	99 0f       	add	r25, r25
    6d2c:	99 0f       	add	r25, r25
    6d2e:	89 89       	ldd	r24, Y+17	; 0x11
    6d30:	8b 7f       	andi	r24, 0xFB	; 251
    6d32:	89 2b       	or	r24, r25
    6d34:	89 8b       	std	Y+17, r24	; 0x11
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    6d36:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6d38:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6d3a:	80 81       	ld	r24, Z
    6d3c:	86 95       	lsr	r24
    6d3e:	81 70       	andi	r24, 0x01	; 1
    6d40:	81 70       	andi	r24, 0x01	; 1
    6d42:	98 2f       	mov	r25, r24
    6d44:	99 0f       	add	r25, r25
    6d46:	89 89       	ldd	r24, Y+17	; 0x11
    6d48:	8d 7f       	andi	r24, 0xFD	; 253
    6d4a:	89 2b       	or	r24, r25
    6d4c:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_EXTIntStatus == INT_DISABLE)
    6d4e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6d50:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6d52:	80 81       	ld	r24, Z
    6d54:	86 95       	lsr	r24
    6d56:	86 95       	lsr	r24
    6d58:	81 70       	andi	r24, 0x01	; 1
    6d5a:	98 2f       	mov	r25, r24
    6d5c:	91 70       	andi	r25, 0x01	; 1
    6d5e:	89 89       	ldd	r24, Y+17	; 0x11
    6d60:	8e 7f       	andi	r24, 0xFE	; 254
    6d62:	89 2b       	or	r24, r25
    6d64:	89 8b       	std	Y+17, r24	; 0x11
    {
    6d66:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6d68:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6d6a:	80 81       	ld	r24, Z
    6d6c:	86 95       	lsr	r24
    6d6e:	86 95       	lsr	r24
    6d70:	86 95       	lsr	r24
    6d72:	81 70       	andi	r24, 0x01	; 1
    6d74:	98 2f       	mov	r25, r24
    6d76:	91 70       	andi	r25, 0x01	; 1
    6d78:	88 89       	ldd	r24, Y+16	; 0x10
    6d7a:	8e 7f       	andi	r24, 0xFE	; 254
    6d7c:	89 2b       	or	r24, r25
    6d7e:	88 8b       	std	Y+16, r24	; 0x10
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    6d80:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6d82:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6d84:	80 81       	ld	r24, Z
    6d86:	82 95       	swap	r24
    6d88:	8f 70       	andi	r24, 0x0F	; 15
    6d8a:	81 70       	andi	r24, 0x01	; 1
    6d8c:	81 70       	andi	r24, 0x01	; 1
    6d8e:	98 2f       	mov	r25, r24
    6d90:	99 0f       	add	r25, r25
    6d92:	88 89       	ldd	r24, Y+16	; 0x10
    6d94:	8d 7f       	andi	r24, 0xFD	; 253
    6d96:	89 2b       	or	r24, r25
    6d98:	88 8b       	std	Y+16, r24	; 0x10
		Local_ErrorStatus = E_OK;
    }
    6d9a:	88 89       	ldd	r24, Y+16	; 0x10
    6d9c:	80 61       	ori	r24, 0x10	; 16
    6d9e:	88 8b       	std	Y+16, r24	; 0x10
	else if(Copy_EXTIntStatus == INT_ENABLE)
    6da0:	88 89       	ldd	r24, Y+16	; 0x10
    6da2:	88 60       	ori	r24, 0x08	; 8
    6da4:	88 8b       	std	Y+16, r24	; 0x10
	{
    6da6:	88 89       	ldd	r24, Y+16	; 0x10
    6da8:	84 60       	ori	r24, 0x04	; 4
    6daa:	88 8b       	std	Y+16, r24	; 0x10
		switch(Copy_EXTInt.INTNum)
	    {
    6dac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6dae:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6db0:	81 81       	ldd	r24, Z+1	; 0x01
    6db2:	8f 79       	andi	r24, 0x9F	; 159
    6db4:	81 83       	std	Z+1, r24	; 0x01
	    case EXTINT0:
    6db6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6db8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6dba:	82 81       	ldd	r24, Z+2	; 0x02
    6dbc:	8f 79       	andi	r24, 0x9F	; 159
    6dbe:	82 83       	std	Z+2, r24	; 0x02
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    6dc0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6dc2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6dc4:	83 81       	ldd	r24, Z+3	; 0x03
    6dc6:	8f 79       	andi	r24, 0x9F	; 159
    6dc8:	83 83       	std	Z+3, r24	; 0x03
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
    6dca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6dcc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6dce:	01 96       	adiw	r24, 0x01	; 1
    6dd0:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
            Local_ErrorStatus = E_OK;
    6dd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6dd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6dd8:	02 96       	adiw	r24, 0x02	; 2
    6dda:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
	    	break;
    6dde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6de0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6de2:	03 96       	adiw	r24, 0x03	; 3
    6de4:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    6de8:	80 e0       	ldi	r24, 0x00	; 0
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	a0 ea       	ldi	r26, 0xA0	; 160
    6dee:	b1 e4       	ldi	r27, 0x41	; 65
    6df0:	8b 87       	std	Y+11, r24	; 0x0b
    6df2:	9c 87       	std	Y+12, r25	; 0x0c
    6df4:	ad 87       	std	Y+13, r26	; 0x0d
    6df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e00:	20 e0       	ldi	r18, 0x00	; 0
    6e02:	30 e0       	ldi	r19, 0x00	; 0
    6e04:	4a e7       	ldi	r20, 0x7A	; 122
    6e06:	55 e4       	ldi	r21, 0x45	; 69
    6e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e0c:	dc 01       	movw	r26, r24
    6e0e:	cb 01       	movw	r24, r22
    6e10:	8f 83       	std	Y+7, r24	; 0x07
    6e12:	98 87       	std	Y+8, r25	; 0x08
    6e14:	a9 87       	std	Y+9, r26	; 0x09
    6e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e18:	6f 81       	ldd	r22, Y+7	; 0x07
    6e1a:	78 85       	ldd	r23, Y+8	; 0x08
    6e1c:	89 85       	ldd	r24, Y+9	; 0x09
    6e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e20:	20 e0       	ldi	r18, 0x00	; 0
    6e22:	30 e0       	ldi	r19, 0x00	; 0
    6e24:	40 e8       	ldi	r20, 0x80	; 128
    6e26:	5f e3       	ldi	r21, 0x3F	; 63
    6e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e2c:	88 23       	and	r24, r24
    6e2e:	2c f4       	brge	.+10     	; 0x6e3a <HAL_CLCD_Init+0x136>
		__ticks = 1;
    6e30:	81 e0       	ldi	r24, 0x01	; 1
    6e32:	90 e0       	ldi	r25, 0x00	; 0
    6e34:	9e 83       	std	Y+6, r25	; 0x06
    6e36:	8d 83       	std	Y+5, r24	; 0x05
    6e38:	3f c0       	rjmp	.+126    	; 0x6eb8 <HAL_CLCD_Init+0x1b4>
	else if (__tmp > 65535)
    6e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    6e3c:	78 85       	ldd	r23, Y+8	; 0x08
    6e3e:	89 85       	ldd	r24, Y+9	; 0x09
    6e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e42:	20 e0       	ldi	r18, 0x00	; 0
    6e44:	3f ef       	ldi	r19, 0xFF	; 255
    6e46:	4f e7       	ldi	r20, 0x7F	; 127
    6e48:	57 e4       	ldi	r21, 0x47	; 71
    6e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e4e:	18 16       	cp	r1, r24
    6e50:	4c f5       	brge	.+82     	; 0x6ea4 <HAL_CLCD_Init+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e5a:	20 e0       	ldi	r18, 0x00	; 0
    6e5c:	30 e0       	ldi	r19, 0x00	; 0
    6e5e:	40 e2       	ldi	r20, 0x20	; 32
    6e60:	51 e4       	ldi	r21, 0x41	; 65
    6e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e66:	dc 01       	movw	r26, r24
    6e68:	cb 01       	movw	r24, r22
    6e6a:	bc 01       	movw	r22, r24
    6e6c:	cd 01       	movw	r24, r26
    6e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e72:	dc 01       	movw	r26, r24
    6e74:	cb 01       	movw	r24, r22
    6e76:	9e 83       	std	Y+6, r25	; 0x06
    6e78:	8d 83       	std	Y+5, r24	; 0x05
    6e7a:	0f c0       	rjmp	.+30     	; 0x6e9a <HAL_CLCD_Init+0x196>
    6e7c:	80 e9       	ldi	r24, 0x90	; 144
    6e7e:	91 e0       	ldi	r25, 0x01	; 1
    6e80:	9c 83       	std	Y+4, r25	; 0x04
    6e82:	8b 83       	std	Y+3, r24	; 0x03
    6e84:	8b 81       	ldd	r24, Y+3	; 0x03
    6e86:	9c 81       	ldd	r25, Y+4	; 0x04
    6e88:	01 97       	sbiw	r24, 0x01	; 1
    6e8a:	f1 f7       	brne	.-4      	; 0x6e88 <HAL_CLCD_Init+0x184>
    6e8c:	9c 83       	std	Y+4, r25	; 0x04
    6e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e90:	8d 81       	ldd	r24, Y+5	; 0x05
    6e92:	9e 81       	ldd	r25, Y+6	; 0x06
    6e94:	01 97       	sbiw	r24, 0x01	; 1
    6e96:	9e 83       	std	Y+6, r25	; 0x06
    6e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e9e:	00 97       	sbiw	r24, 0x00	; 0
    6ea0:	69 f7       	brne	.-38     	; 0x6e7c <HAL_CLCD_Init+0x178>
    6ea2:	14 c0       	rjmp	.+40     	; 0x6ecc <HAL_CLCD_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    6ea6:	78 85       	ldd	r23, Y+8	; 0x08
    6ea8:	89 85       	ldd	r24, Y+9	; 0x09
    6eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6eb0:	dc 01       	movw	r26, r24
    6eb2:	cb 01       	movw	r24, r22
    6eb4:	9e 83       	std	Y+6, r25	; 0x06
    6eb6:	8d 83       	std	Y+5, r24	; 0x05
    6eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    6eba:	9e 81       	ldd	r25, Y+6	; 0x06
    6ebc:	9a 83       	std	Y+2, r25	; 0x02
    6ebe:	89 83       	std	Y+1, r24	; 0x01
    6ec0:	89 81       	ldd	r24, Y+1	; 0x01
    6ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ec4:	01 97       	sbiw	r24, 0x01	; 1
    6ec6:	f1 f7       	brne	.-4      	; 0x6ec4 <HAL_CLCD_Init+0x1c0>
    6ec8:	9a 83       	std	Y+2, r25	; 0x02
    6eca:	89 83       	std	Y+1, r24	; 0x01
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT1);
	    	Local_ErrorStatus = E_OK;
    6ecc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6ece:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6ed0:	80 81       	ld	r24, Z
    6ed2:	81 70       	andi	r24, 0x01	; 1
    6ed4:	88 23       	and	r24, r24
    6ed6:	a1 f4       	brne	.+40     	; 0x6f00 <HAL_CLCD_Init+0x1fc>
	    	break;
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    6ed8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6eda:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6edc:	9e 01       	movw	r18, r28
    6ede:	20 5f       	subi	r18, 0xF0	; 240
    6ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee2:	65 e0       	ldi	r22, 0x05	; 5
    6ee4:	a9 01       	movw	r20, r18
    6ee6:	23 e3       	ldi	r18, 0x33	; 51
    6ee8:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	    	{
    6eec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6eee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6ef0:	9e 01       	movw	r18, r28
    6ef2:	20 5f       	subi	r18, 0xF0	; 240
    6ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ef6:	65 e0       	ldi	r22, 0x05	; 5
    6ef8:	a9 01       	movw	r20, r18
    6efa:	22 e3       	ldi	r18, 0x32	; 50
    6efc:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    		SET_BIT(GICR_REG, EXTINT2);
	    	    Local_ErrorStatus = E_OK;
    6f00:	9e 01       	movw	r18, r28
    6f02:	20 5f       	subi	r18, 0xF0	; 240
    6f04:	3f 4f       	sbci	r19, 0xFF	; 255
    6f06:	ae 01       	movw	r20, r28
    6f08:	47 5e       	subi	r20, 0xE7	; 231
    6f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    6f0c:	85 e0       	ldi	r24, 0x05	; 5
    6f0e:	b9 01       	movw	r22, r18
    6f10:	0e 94 ed 38 	call	0x71da	; 0x71da <HAL_CLCD_CreateCommand>
	    	}
    6f14:	79 8d       	ldd	r23, Y+25	; 0x19
    6f16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6f18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6f1a:	9e 01       	movw	r18, r28
    6f1c:	20 5f       	subi	r18, 0xF0	; 240
    6f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f20:	65 e0       	ldi	r22, 0x05	; 5
    6f22:	a9 01       	movw	r20, r18
    6f24:	27 2f       	mov	r18, r23
    6f26:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	    	else
	    	{
    6f2a:	9e 01       	movw	r18, r28
    6f2c:	20 5f       	subi	r18, 0xF0	; 240
    6f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f30:	ae 01       	movw	r20, r28
    6f32:	47 5e       	subi	r20, 0xE7	; 231
    6f34:	5f 4f       	sbci	r21, 0xFF	; 255
    6f36:	83 e0       	ldi	r24, 0x03	; 3
    6f38:	b9 01       	movw	r22, r18
    6f3a:	0e 94 ed 38 	call	0x71da	; 0x71da <HAL_CLCD_CreateCommand>
	    		Local_ErrorStatus = E_NOT_OK;
    6f3e:	79 8d       	ldd	r23, Y+25	; 0x19
    6f40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6f42:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6f44:	9e 01       	movw	r18, r28
    6f46:	20 5f       	subi	r18, 0xF0	; 240
    6f48:	3f 4f       	sbci	r19, 0xFF	; 255
    6f4a:	63 e0       	ldi	r22, 0x03	; 3
    6f4c:	a9 01       	movw	r20, r18
    6f4e:	27 2f       	mov	r18, r23
    6f50:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	    	}
	    	break;
    6f54:	9e 01       	movw	r18, r28
    6f56:	20 5f       	subi	r18, 0xF0	; 240
    6f58:	3f 4f       	sbci	r19, 0xFF	; 255
    6f5a:	ae 01       	movw	r20, r28
    6f5c:	47 5e       	subi	r20, 0xE7	; 231
    6f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    6f60:	82 e0       	ldi	r24, 0x02	; 2
    6f62:	b9 01       	movw	r22, r18
    6f64:	0e 94 ed 38 	call	0x71da	; 0x71da <HAL_CLCD_CreateCommand>
	    default:
    6f68:	79 8d       	ldd	r23, Y+25	; 0x19
    6f6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6f6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6f6e:	9e 01       	movw	r18, r28
    6f70:	20 5f       	subi	r18, 0xF0	; 240
    6f72:	3f 4f       	sbci	r19, 0xFF	; 255
    6f74:	62 e0       	ldi	r22, 0x02	; 2
    6f76:	a9 01       	movw	r20, r18
    6f78:	27 2f       	mov	r18, r23
    6f7a:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	    	Local_ErrorStatus = E_NOT_OK;
	}
    6f7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6f80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6f82:	0e 94 f6 37 	call	0x6fec	; 0x6fec <HAL_CLCD_CursorHome>
	}
	return Local_ErrorStatus;
    6f86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6f88:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6f8a:	0e 94 d3 37 	call	0x6fa6	; 0x6fa6 <HAL_CLCD_Clear>
}
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
    6f8e:	81 e0       	ldi	r24, 0x01	; 1
    6f90:	8f 87       	std	Y+15, r24	; 0x0f
{
    6f92:	8f 85       	ldd	r24, Y+15	; 0x0f
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    6f94:	6b 96       	adiw	r28, 0x1b	; 27
    6f96:	0f b6       	in	r0, 0x3f	; 63
    6f98:	f8 94       	cli
    6f9a:	de bf       	out	0x3e, r29	; 62
    6f9c:	0f be       	out	0x3f, r0	; 63
    6f9e:	cd bf       	out	0x3d, r28	; 61
    6fa0:	cf 91       	pop	r28
    6fa2:	df 91       	pop	r29
    6fa4:	08 95       	ret

00006fa6 <HAL_CLCD_Clear>:
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    6fa6:	df 93       	push	r29
    6fa8:	cf 93       	push	r28
    6faa:	cd b7       	in	r28, 0x3d	; 61
    6fac:	de b7       	in	r29, 0x3e	; 62
    6fae:	2c 97       	sbiw	r28, 0x0c	; 12
    6fb0:	0f b6       	in	r0, 0x3f	; 63
    6fb2:	f8 94       	cli
    6fb4:	de bf       	out	0x3e, r29	; 62
    6fb6:	0f be       	out	0x3f, r0	; 63
    6fb8:	cd bf       	out	0x3d, r28	; 61
    6fba:	9c 87       	std	Y+12, r25	; 0x0c
    6fbc:	8b 87       	std	Y+11, r24	; 0x0b
}
    6fbe:	19 82       	std	Y+1, r1	; 0x01
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    6fc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6fc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6fc4:	9e 01       	movw	r18, r28
    6fc6:	2e 5f       	subi	r18, 0xFE	; 254
    6fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    6fca:	60 e0       	ldi	r22, 0x00	; 0
    6fcc:	a9 01       	movw	r20, r18
    6fce:	21 e0       	ldi	r18, 0x01	; 1
    6fd0:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    6fd4:	81 e0       	ldi	r24, 0x01	; 1
    6fd6:	89 83       	std	Y+1, r24	; 0x01
	Local_ErrorStatus = E_OK;
    6fd8:	89 81       	ldd	r24, Y+1	; 0x01
	return Local_ErrorStatus;
    6fda:	2c 96       	adiw	r28, 0x0c	; 12
    6fdc:	0f b6       	in	r0, 0x3f	; 63
    6fde:	f8 94       	cli
    6fe0:	de bf       	out	0x3e, r29	; 62
    6fe2:	0f be       	out	0x3f, r0	; 63
    6fe4:	cd bf       	out	0x3d, r28	; 61
    6fe6:	cf 91       	pop	r28
    6fe8:	df 91       	pop	r29
    6fea:	08 95       	ret

00006fec <HAL_CLCD_CursorHome>:
}
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    6fec:	df 93       	push	r29
    6fee:	cf 93       	push	r28
    6ff0:	cd b7       	in	r28, 0x3d	; 61
    6ff2:	de b7       	in	r29, 0x3e	; 62
    6ff4:	2c 97       	sbiw	r28, 0x0c	; 12
    6ff6:	0f b6       	in	r0, 0x3f	; 63
    6ff8:	f8 94       	cli
    6ffa:	de bf       	out	0x3e, r29	; 62
    6ffc:	0f be       	out	0x3f, r0	; 63
    6ffe:	cd bf       	out	0x3d, r28	; 61
    7000:	9c 87       	std	Y+12, r25	; 0x0c
    7002:	8b 87       	std	Y+11, r24	; 0x0b
{
    7004:	19 82       	std	Y+1, r1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
    7006:	8b 85       	ldd	r24, Y+11	; 0x0b
    7008:	9c 85       	ldd	r25, Y+12	; 0x0c
    700a:	9e 01       	movw	r18, r28
    700c:	2e 5f       	subi	r18, 0xFE	; 254
    700e:	3f 4f       	sbci	r19, 0xFF	; 255
    7010:	61 e0       	ldi	r22, 0x01	; 1
    7012:	a9 01       	movw	r20, r18
    7014:	22 e0       	ldi	r18, 0x02	; 2
    7016:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	return Local_ErrorStatus;
    701a:	81 e0       	ldi	r24, 0x01	; 1
    701c:	89 83       	std	Y+1, r24	; 0x01
}
    701e:	89 81       	ldd	r24, Y+1	; 0x01
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
    7020:	2c 96       	adiw	r28, 0x0c	; 12
    7022:	0f b6       	in	r0, 0x3f	; 63
    7024:	f8 94       	cli
    7026:	de bf       	out	0x3e, r29	; 62
    7028:	0f be       	out	0x3f, r0	; 63
    702a:	cd bf       	out	0x3d, r28	; 61
    702c:	cf 91       	pop	r28
    702e:	df 91       	pop	r29
    7030:	08 95       	ret

00007032 <HAL_CLCD_SetCursorPosition>:
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
    7032:	df 93       	push	r29
    7034:	cf 93       	push	r28
    7036:	cd b7       	in	r28, 0x3d	; 61
    7038:	de b7       	in	r29, 0x3e	; 62
    703a:	2f 97       	sbiw	r28, 0x0f	; 15
    703c:	0f b6       	in	r0, 0x3f	; 63
    703e:	f8 94       	cli
    7040:	de bf       	out	0x3e, r29	; 62
    7042:	0f be       	out	0x3f, r0	; 63
    7044:	cd bf       	out	0x3d, r28	; 61
    7046:	9d 87       	std	Y+13, r25	; 0x0d
    7048:	8c 87       	std	Y+12, r24	; 0x0c
    704a:	6e 87       	std	Y+14, r22	; 0x0e
    704c:	4f 87       	std	Y+15, r20	; 0x0f
	Local_ErrorStatus = E_OK;
    704e:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErrorStatus;
}
    7050:	1b 86       	std	Y+11, r1	; 0x0b
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
    7052:	8e 85       	ldd	r24, Y+14	; 0x0e
    7054:	8e 83       	std	Y+6, r24	; 0x06
{
    7056:	8f 85       	ldd	r24, Y+15	; 0x0f
    7058:	8f 83       	std	Y+7, r24	; 0x07
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    705a:	9e 01       	movw	r18, r28
    705c:	2e 5f       	subi	r18, 0xFE	; 254
    705e:	3f 4f       	sbci	r19, 0xFF	; 255
    7060:	ae 01       	movw	r20, r28
    7062:	45 5f       	subi	r20, 0xF5	; 245
    7064:	5f 4f       	sbci	r21, 0xFF	; 255
    7066:	87 e0       	ldi	r24, 0x07	; 7
    7068:	b9 01       	movw	r22, r18
    706a:	0e 94 ed 38 	call	0x71da	; 0x71da <HAL_CLCD_CreateCommand>
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
    706e:	7b 85       	ldd	r23, Y+11	; 0x0b
    7070:	8c 85       	ldd	r24, Y+12	; 0x0c
    7072:	9d 85       	ldd	r25, Y+13	; 0x0d
    7074:	9e 01       	movw	r18, r28
    7076:	2e 5f       	subi	r18, 0xFE	; 254
    7078:	3f 4f       	sbci	r19, 0xFF	; 255
    707a:	67 e0       	ldi	r22, 0x07	; 7
    707c:	a9 01       	movw	r20, r18
    707e:	27 2f       	mov	r18, r23
    7080:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
	Local_ErrorStatus = E_OK;
    7084:	81 e0       	ldi	r24, 0x01	; 1
    7086:	89 83       	std	Y+1, r24	; 0x01
	return Local_ErrorStatus;
    7088:	89 81       	ldd	r24, Y+1	; 0x01
}
    708a:	2f 96       	adiw	r28, 0x0f	; 15
    708c:	0f b6       	in	r0, 0x3f	; 63
    708e:	f8 94       	cli
    7090:	de bf       	out	0x3e, r29	; 62
    7092:	0f be       	out	0x3f, r0	; 63
    7094:	cd bf       	out	0x3d, r28	; 61
    7096:	cf 91       	pop	r28
    7098:	df 91       	pop	r29
    709a:	08 95       	ret

0000709c <HAL_CLCD_DisplayCharacter>:

ISR(INT0_vect)
{
    709c:	df 93       	push	r29
    709e:	cf 93       	push	r28
    70a0:	cd b7       	in	r28, 0x3d	; 61
    70a2:	de b7       	in	r29, 0x3e	; 62
    70a4:	2e 97       	sbiw	r28, 0x0e	; 14
    70a6:	0f b6       	in	r0, 0x3f	; 63
    70a8:	f8 94       	cli
    70aa:	de bf       	out	0x3e, r29	; 62
    70ac:	0f be       	out	0x3f, r0	; 63
    70ae:	cd bf       	out	0x3d, r28	; 61
    70b0:	9d 87       	std	Y+13, r25	; 0x0d
    70b2:	8c 87       	std	Y+12, r24	; 0x0c
    70b4:	6e 87       	std	Y+14, r22	; 0x0e
	EXT_Interrupt_EXTINT0_CallBack();
    70b6:	19 82       	std	Y+1, r1	; 0x01
}

    70b8:	1b 86       	std	Y+11, r1	; 0x0b
ISR(INT1_vect)
    70ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    70bc:	89 87       	std	Y+9, r24	; 0x09
{
    70be:	9e 01       	movw	r18, r28
    70c0:	2e 5f       	subi	r18, 0xFE	; 254
    70c2:	3f 4f       	sbci	r19, 0xFF	; 255
    70c4:	ae 01       	movw	r20, r28
    70c6:	45 5f       	subi	r20, 0xF5	; 245
    70c8:	5f 4f       	sbci	r21, 0xFF	; 255
    70ca:	89 e0       	ldi	r24, 0x09	; 9
    70cc:	b9 01       	movw	r22, r18
    70ce:	0e 94 ed 38 	call	0x71da	; 0x71da <HAL_CLCD_CreateCommand>
	EXT_Interrupt_EXTINT1_CallBack();
    70d2:	7b 85       	ldd	r23, Y+11	; 0x0b
    70d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    70d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    70d8:	9e 01       	movw	r18, r28
    70da:	2e 5f       	subi	r18, 0xFE	; 254
    70dc:	3f 4f       	sbci	r19, 0xFF	; 255
    70de:	69 e0       	ldi	r22, 0x09	; 9
    70e0:	a9 01       	movw	r20, r18
    70e2:	27 2f       	mov	r18, r23
    70e4:	0e 94 d7 39 	call	0x73ae	; 0x73ae <HAL_CLCD_SendCommand>
}
    70e8:	81 e0       	ldi	r24, 0x01	; 1
    70ea:	89 83       	std	Y+1, r24	; 0x01

    70ec:	89 81       	ldd	r24, Y+1	; 0x01
ISR(INT2_vect)
    70ee:	2e 96       	adiw	r28, 0x0e	; 14
    70f0:	0f b6       	in	r0, 0x3f	; 63
    70f2:	f8 94       	cli
    70f4:	de bf       	out	0x3e, r29	; 62
    70f6:	0f be       	out	0x3f, r0	; 63
    70f8:	cd bf       	out	0x3d, r28	; 61
    70fa:	cf 91       	pop	r28
    70fc:	df 91       	pop	r29
    70fe:	08 95       	ret

00007100 <HAL_CLCD_DisplayDecimalIntegerNumber>:
{
	EXT_Interrupt_EXTINT2_CallBack();
}
    7100:	df 93       	push	r29
    7102:	cf 93       	push	r28
    7104:	00 d0       	rcall	.+0      	; 0x7106 <HAL_CLCD_DisplayDecimalIntegerNumber+0x6>
    7106:	00 d0       	rcall	.+0      	; 0x7108 <HAL_CLCD_DisplayDecimalIntegerNumber+0x8>
    7108:	00 d0       	rcall	.+0      	; 0x710a <HAL_CLCD_DisplayDecimalIntegerNumber+0xa>
    710a:	cd b7       	in	r28, 0x3d	; 61
    710c:	de b7       	in	r29, 0x3e	; 62
    710e:	9c 83       	std	Y+4, r25	; 0x04
    7110:	8b 83       	std	Y+3, r24	; 0x03
    7112:	7e 83       	std	Y+6, r23	; 0x06
    7114:	6d 83       	std	Y+5, r22	; 0x05
    7116:	1a 82       	std	Y+2, r1	; 0x02
    7118:	19 82       	std	Y+1, r1	; 0x01
    711a:	8d 81       	ldd	r24, Y+5	; 0x05
    711c:	9e 81       	ldd	r25, Y+6	; 0x06
    711e:	99 23       	and	r25, r25
    7120:	64 f4       	brge	.+24     	; 0x713a <HAL_CLCD_DisplayDecimalIntegerNumber+0x3a>
    7122:	8b 81       	ldd	r24, Y+3	; 0x03
    7124:	9c 81       	ldd	r25, Y+4	; 0x04
    7126:	6d e2       	ldi	r22, 0x2D	; 45
    7128:	0e 94 4e 38 	call	0x709c	; 0x709c <HAL_CLCD_DisplayCharacter>
    712c:	8d 81       	ldd	r24, Y+5	; 0x05
    712e:	9e 81       	ldd	r25, Y+6	; 0x06
    7130:	90 95       	com	r25
    7132:	81 95       	neg	r24
    7134:	9f 4f       	sbci	r25, 0xFF	; 255
    7136:	9e 83       	std	Y+6, r25	; 0x06
    7138:	8d 83       	std	Y+5, r24	; 0x05
    713a:	8d 81       	ldd	r24, Y+5	; 0x05
    713c:	9e 81       	ldd	r25, Y+6	; 0x06
    713e:	2a e0       	ldi	r18, 0x0A	; 10
    7140:	30 e0       	ldi	r19, 0x00	; 0
    7142:	b9 01       	movw	r22, r18
    7144:	0e 94 f7 43 	call	0x87ee	; 0x87ee <__divmodhi4>
    7148:	89 83       	std	Y+1, r24	; 0x01
    714a:	8d 81       	ldd	r24, Y+5	; 0x05
    714c:	9e 81       	ldd	r25, Y+6	; 0x06
    714e:	2a e0       	ldi	r18, 0x0A	; 10
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	b9 01       	movw	r22, r18
    7154:	0e 94 f7 43 	call	0x87ee	; 0x87ee <__divmodhi4>
    7158:	cb 01       	movw	r24, r22
    715a:	9e 83       	std	Y+6, r25	; 0x06
    715c:	8d 83       	std	Y+5, r24	; 0x05
    715e:	89 81       	ldd	r24, Y+1	; 0x01
    7160:	28 2f       	mov	r18, r24
    7162:	20 5d       	subi	r18, 0xD0	; 208
    7164:	8b 81       	ldd	r24, Y+3	; 0x03
    7166:	9c 81       	ldd	r25, Y+4	; 0x04
    7168:	62 2f       	mov	r22, r18
    716a:	0e 94 4e 38 	call	0x709c	; 0x709c <HAL_CLCD_DisplayCharacter>
    716e:	8d 81       	ldd	r24, Y+5	; 0x05
    7170:	9e 81       	ldd	r25, Y+6	; 0x06
    7172:	00 97       	sbiw	r24, 0x00	; 0
    7174:	11 f7       	brne	.-60     	; 0x713a <HAL_CLCD_DisplayDecimalIntegerNumber+0x3a>
    7176:	8a 81       	ldd	r24, Y+2	; 0x02
    7178:	26 96       	adiw	r28, 0x06	; 6
    717a:	0f b6       	in	r0, 0x3f	; 63
    717c:	f8 94       	cli
    717e:	de bf       	out	0x3e, r29	; 62
    7180:	0f be       	out	0x3f, r0	; 63
    7182:	cd bf       	out	0x3d, r28	; 61
    7184:	cf 91       	pop	r28
    7186:	df 91       	pop	r29
    7188:	08 95       	ret

0000718a <HAL_CLCD_DisplayString>:
    718a:	df 93       	push	r29
    718c:	cf 93       	push	r28
    718e:	00 d0       	rcall	.+0      	; 0x7190 <HAL_CLCD_DisplayString+0x6>
    7190:	00 d0       	rcall	.+0      	; 0x7192 <HAL_CLCD_DisplayString+0x8>
    7192:	0f 92       	push	r0
    7194:	cd b7       	in	r28, 0x3d	; 61
    7196:	de b7       	in	r29, 0x3e	; 62
    7198:	9b 83       	std	Y+3, r25	; 0x03
    719a:	8a 83       	std	Y+2, r24	; 0x02
    719c:	7d 83       	std	Y+5, r23	; 0x05
    719e:	6c 83       	std	Y+4, r22	; 0x04
    71a0:	19 82       	std	Y+1, r1	; 0x01
    71a2:	0d c0       	rjmp	.+26     	; 0x71be <HAL_CLCD_DisplayString+0x34>
    71a4:	ec 81       	ldd	r30, Y+4	; 0x04
    71a6:	fd 81       	ldd	r31, Y+5	; 0x05
    71a8:	20 81       	ld	r18, Z
    71aa:	8a 81       	ldd	r24, Y+2	; 0x02
    71ac:	9b 81       	ldd	r25, Y+3	; 0x03
    71ae:	62 2f       	mov	r22, r18
    71b0:	0e 94 4e 38 	call	0x709c	; 0x709c <HAL_CLCD_DisplayCharacter>
    71b4:	8c 81       	ldd	r24, Y+4	; 0x04
    71b6:	9d 81       	ldd	r25, Y+5	; 0x05
    71b8:	01 96       	adiw	r24, 0x01	; 1
    71ba:	9d 83       	std	Y+5, r25	; 0x05
    71bc:	8c 83       	std	Y+4, r24	; 0x04
    71be:	ec 81       	ldd	r30, Y+4	; 0x04
    71c0:	fd 81       	ldd	r31, Y+5	; 0x05
    71c2:	80 81       	ld	r24, Z
    71c4:	88 23       	and	r24, r24
    71c6:	71 f7       	brne	.-36     	; 0x71a4 <HAL_CLCD_DisplayString+0x1a>
    71c8:	89 81       	ldd	r24, Y+1	; 0x01
    71ca:	0f 90       	pop	r0
    71cc:	0f 90       	pop	r0
    71ce:	0f 90       	pop	r0
    71d0:	0f 90       	pop	r0
    71d2:	0f 90       	pop	r0
    71d4:	cf 91       	pop	r28
    71d6:	df 91       	pop	r29
    71d8:	08 95       	ret

000071da <HAL_CLCD_CreateCommand>:
    71da:	df 93       	push	r29
    71dc:	cf 93       	push	r28
    71de:	cd b7       	in	r28, 0x3d	; 61
    71e0:	de b7       	in	r29, 0x3e	; 62
    71e2:	28 97       	sbiw	r28, 0x08	; 8
    71e4:	0f b6       	in	r0, 0x3f	; 63
    71e6:	f8 94       	cli
    71e8:	de bf       	out	0x3e, r29	; 62
    71ea:	0f be       	out	0x3f, r0	; 63
    71ec:	cd bf       	out	0x3d, r28	; 61
    71ee:	8a 83       	std	Y+2, r24	; 0x02
    71f0:	7c 83       	std	Y+4, r23	; 0x04
    71f2:	6b 83       	std	Y+3, r22	; 0x03
    71f4:	5e 83       	std	Y+6, r21	; 0x06
    71f6:	4d 83       	std	Y+5, r20	; 0x05
    71f8:	19 82       	std	Y+1, r1	; 0x01
    71fa:	8a 81       	ldd	r24, Y+2	; 0x02
    71fc:	28 2f       	mov	r18, r24
    71fe:	30 e0       	ldi	r19, 0x00	; 0
    7200:	38 87       	std	Y+8, r19	; 0x08
    7202:	2f 83       	std	Y+7, r18	; 0x07
    7204:	8f 81       	ldd	r24, Y+7	; 0x07
    7206:	98 85       	ldd	r25, Y+8	; 0x08
    7208:	85 30       	cpi	r24, 0x05	; 5
    720a:	91 05       	cpc	r25, r1
    720c:	09 f4       	brne	.+2      	; 0x7210 <HAL_CLCD_CreateCommand+0x36>
    720e:	6c c0       	rjmp	.+216    	; 0x72e8 <HAL_CLCD_CreateCommand+0x10e>
    7210:	2f 81       	ldd	r18, Y+7	; 0x07
    7212:	38 85       	ldd	r19, Y+8	; 0x08
    7214:	26 30       	cpi	r18, 0x06	; 6
    7216:	31 05       	cpc	r19, r1
    7218:	8c f4       	brge	.+34     	; 0x723c <HAL_CLCD_CreateCommand+0x62>
    721a:	8f 81       	ldd	r24, Y+7	; 0x07
    721c:	98 85       	ldd	r25, Y+8	; 0x08
    721e:	83 30       	cpi	r24, 0x03	; 3
    7220:	91 05       	cpc	r25, r1
    7222:	91 f1       	breq	.+100    	; 0x7288 <HAL_CLCD_CreateCommand+0xae>
    7224:	2f 81       	ldd	r18, Y+7	; 0x07
    7226:	38 85       	ldd	r19, Y+8	; 0x08
    7228:	24 30       	cpi	r18, 0x04	; 4
    722a:	31 05       	cpc	r19, r1
    722c:	0c f0       	brlt	.+2      	; 0x7230 <HAL_CLCD_CreateCommand+0x56>
    722e:	4c c0       	rjmp	.+152    	; 0x72c8 <HAL_CLCD_CreateCommand+0xee>
    7230:	8f 81       	ldd	r24, Y+7	; 0x07
    7232:	98 85       	ldd	r25, Y+8	; 0x08
    7234:	82 30       	cpi	r24, 0x02	; 2
    7236:	91 05       	cpc	r25, r1
    7238:	a1 f0       	breq	.+40     	; 0x7262 <HAL_CLCD_CreateCommand+0x88>
    723a:	ae c0       	rjmp	.+348    	; 0x7398 <HAL_CLCD_CreateCommand+0x1be>
    723c:	2f 81       	ldd	r18, Y+7	; 0x07
    723e:	38 85       	ldd	r19, Y+8	; 0x08
    7240:	27 30       	cpi	r18, 0x07	; 7
    7242:	31 05       	cpc	r19, r1
    7244:	09 f4       	brne	.+2      	; 0x7248 <HAL_CLCD_CreateCommand+0x6e>
    7246:	81 c0       	rjmp	.+258    	; 0x734a <HAL_CLCD_CreateCommand+0x170>
    7248:	8f 81       	ldd	r24, Y+7	; 0x07
    724a:	98 85       	ldd	r25, Y+8	; 0x08
    724c:	87 30       	cpi	r24, 0x07	; 7
    724e:	91 05       	cpc	r25, r1
    7250:	0c f4       	brge	.+2      	; 0x7254 <HAL_CLCD_CreateCommand+0x7a>
    7252:	6a c0       	rjmp	.+212    	; 0x7328 <HAL_CLCD_CreateCommand+0x14e>
    7254:	2f 81       	ldd	r18, Y+7	; 0x07
    7256:	38 85       	ldd	r19, Y+8	; 0x08
    7258:	29 30       	cpi	r18, 0x09	; 9
    725a:	31 05       	cpc	r19, r1
    725c:	09 f4       	brne	.+2      	; 0x7260 <HAL_CLCD_CreateCommand+0x86>
    725e:	93 c0       	rjmp	.+294    	; 0x7386 <HAL_CLCD_CreateCommand+0x1ac>
    7260:	9b c0       	rjmp	.+310    	; 0x7398 <HAL_CLCD_CreateCommand+0x1be>
    7262:	eb 81       	ldd	r30, Y+3	; 0x03
    7264:	fc 81       	ldd	r31, Y+4	; 0x04
    7266:	80 81       	ld	r24, Z
    7268:	81 70       	andi	r24, 0x01	; 1
    726a:	98 2f       	mov	r25, r24
    726c:	eb 81       	ldd	r30, Y+3	; 0x03
    726e:	fc 81       	ldd	r31, Y+4	; 0x04
    7270:	80 81       	ld	r24, Z
    7272:	86 95       	lsr	r24
    7274:	81 70       	andi	r24, 0x01	; 1
    7276:	88 0f       	add	r24, r24
    7278:	89 0f       	add	r24, r25
    727a:	8c 5f       	subi	r24, 0xFC	; 252
    727c:	ed 81       	ldd	r30, Y+5	; 0x05
    727e:	fe 81       	ldd	r31, Y+6	; 0x06
    7280:	80 83       	st	Z, r24
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	89 83       	std	Y+1, r24	; 0x01
    7286:	89 c0       	rjmp	.+274    	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7288:	eb 81       	ldd	r30, Y+3	; 0x03
    728a:	fc 81       	ldd	r31, Y+4	; 0x04
    728c:	80 81       	ld	r24, Z
    728e:	82 95       	swap	r24
    7290:	8f 70       	andi	r24, 0x0F	; 15
    7292:	81 70       	andi	r24, 0x01	; 1
    7294:	98 2f       	mov	r25, r24
    7296:	99 0f       	add	r25, r25
    7298:	99 0f       	add	r25, r25
    729a:	eb 81       	ldd	r30, Y+3	; 0x03
    729c:	fc 81       	ldd	r31, Y+4	; 0x04
    729e:	80 81       	ld	r24, Z
    72a0:	86 95       	lsr	r24
    72a2:	86 95       	lsr	r24
    72a4:	86 95       	lsr	r24
    72a6:	81 70       	andi	r24, 0x01	; 1
    72a8:	88 0f       	add	r24, r24
    72aa:	98 0f       	add	r25, r24
    72ac:	eb 81       	ldd	r30, Y+3	; 0x03
    72ae:	fc 81       	ldd	r31, Y+4	; 0x04
    72b0:	80 81       	ld	r24, Z
    72b2:	86 95       	lsr	r24
    72b4:	86 95       	lsr	r24
    72b6:	81 70       	andi	r24, 0x01	; 1
    72b8:	89 0f       	add	r24, r25
    72ba:	88 5f       	subi	r24, 0xF8	; 248
    72bc:	ed 81       	ldd	r30, Y+5	; 0x05
    72be:	fe 81       	ldd	r31, Y+6	; 0x06
    72c0:	80 83       	st	Z, r24
    72c2:	81 e0       	ldi	r24, 0x01	; 1
    72c4:	89 83       	std	Y+1, r24	; 0x01
    72c6:	69 c0       	rjmp	.+210    	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    72c8:	eb 81       	ldd	r30, Y+3	; 0x03
    72ca:	fc 81       	ldd	r31, Y+4	; 0x04
    72cc:	80 81       	ld	r24, Z
    72ce:	82 95       	swap	r24
    72d0:	86 95       	lsr	r24
    72d2:	87 70       	andi	r24, 0x07	; 7
    72d4:	83 70       	andi	r24, 0x03	; 3
    72d6:	88 0f       	add	r24, r24
    72d8:	88 0f       	add	r24, r24
    72da:	80 5f       	subi	r24, 0xF0	; 240
    72dc:	ed 81       	ldd	r30, Y+5	; 0x05
    72de:	fe 81       	ldd	r31, Y+6	; 0x06
    72e0:	80 83       	st	Z, r24
    72e2:	81 e0       	ldi	r24, 0x01	; 1
    72e4:	89 83       	std	Y+1, r24	; 0x01
    72e6:	59 c0       	rjmp	.+178    	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    72e8:	eb 81       	ldd	r30, Y+3	; 0x03
    72ea:	fc 81       	ldd	r31, Y+4	; 0x04
    72ec:	81 81       	ldd	r24, Z+1	; 0x01
    72ee:	86 95       	lsr	r24
    72f0:	86 95       	lsr	r24
    72f2:	81 70       	andi	r24, 0x01	; 1
    72f4:	98 2f       	mov	r25, r24
    72f6:	92 95       	swap	r25
    72f8:	90 7f       	andi	r25, 0xF0	; 240
    72fa:	eb 81       	ldd	r30, Y+3	; 0x03
    72fc:	fc 81       	ldd	r31, Y+4	; 0x04
    72fe:	81 81       	ldd	r24, Z+1	; 0x01
    7300:	86 95       	lsr	r24
    7302:	81 70       	andi	r24, 0x01	; 1
    7304:	88 0f       	add	r24, r24
    7306:	88 0f       	add	r24, r24
    7308:	88 0f       	add	r24, r24
    730a:	98 0f       	add	r25, r24
    730c:	eb 81       	ldd	r30, Y+3	; 0x03
    730e:	fc 81       	ldd	r31, Y+4	; 0x04
    7310:	81 81       	ldd	r24, Z+1	; 0x01
    7312:	81 70       	andi	r24, 0x01	; 1
    7314:	88 0f       	add	r24, r24
    7316:	88 0f       	add	r24, r24
    7318:	89 0f       	add	r24, r25
    731a:	80 5e       	subi	r24, 0xE0	; 224
    731c:	ed 81       	ldd	r30, Y+5	; 0x05
    731e:	fe 81       	ldd	r31, Y+6	; 0x06
    7320:	80 83       	st	Z, r24
    7322:	81 e0       	ldi	r24, 0x01	; 1
    7324:	89 83       	std	Y+1, r24	; 0x01
    7326:	39 c0       	rjmp	.+114    	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7328:	eb 81       	ldd	r30, Y+3	; 0x03
    732a:	fc 81       	ldd	r31, Y+4	; 0x04
    732c:	83 81       	ldd	r24, Z+3	; 0x03
    732e:	80 34       	cpi	r24, 0x40	; 64
    7330:	50 f4       	brcc	.+20     	; 0x7346 <HAL_CLCD_CreateCommand+0x16c>
    7332:	eb 81       	ldd	r30, Y+3	; 0x03
    7334:	fc 81       	ldd	r31, Y+4	; 0x04
    7336:	83 81       	ldd	r24, Z+3	; 0x03
    7338:	80 5c       	subi	r24, 0xC0	; 192
    733a:	ed 81       	ldd	r30, Y+5	; 0x05
    733c:	fe 81       	ldd	r31, Y+6	; 0x06
    733e:	80 83       	st	Z, r24
    7340:	81 e0       	ldi	r24, 0x01	; 1
    7342:	89 83       	std	Y+1, r24	; 0x01
    7344:	2a c0       	rjmp	.+84     	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7346:	19 82       	std	Y+1, r1	; 0x01
    7348:	28 c0       	rjmp	.+80     	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    734a:	eb 81       	ldd	r30, Y+3	; 0x03
    734c:	fc 81       	ldd	r31, Y+4	; 0x04
    734e:	84 81       	ldd	r24, Z+4	; 0x04
    7350:	81 30       	cpi	r24, 0x01	; 1
    7352:	51 f4       	brne	.+20     	; 0x7368 <HAL_CLCD_CreateCommand+0x18e>
    7354:	eb 81       	ldd	r30, Y+3	; 0x03
    7356:	fc 81       	ldd	r31, Y+4	; 0x04
    7358:	85 81       	ldd	r24, Z+5	; 0x05
    735a:	80 58       	subi	r24, 0x80	; 128
    735c:	ed 81       	ldd	r30, Y+5	; 0x05
    735e:	fe 81       	ldd	r31, Y+6	; 0x06
    7360:	80 83       	st	Z, r24
    7362:	81 e0       	ldi	r24, 0x01	; 1
    7364:	89 83       	std	Y+1, r24	; 0x01
    7366:	19 c0       	rjmp	.+50     	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7368:	eb 81       	ldd	r30, Y+3	; 0x03
    736a:	fc 81       	ldd	r31, Y+4	; 0x04
    736c:	84 81       	ldd	r24, Z+4	; 0x04
    736e:	82 30       	cpi	r24, 0x02	; 2
    7370:	a1 f4       	brne	.+40     	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7372:	eb 81       	ldd	r30, Y+3	; 0x03
    7374:	fc 81       	ldd	r31, Y+4	; 0x04
    7376:	85 81       	ldd	r24, Z+5	; 0x05
    7378:	80 54       	subi	r24, 0x40	; 64
    737a:	ed 81       	ldd	r30, Y+5	; 0x05
    737c:	fe 81       	ldd	r31, Y+6	; 0x06
    737e:	80 83       	st	Z, r24
    7380:	81 e0       	ldi	r24, 0x01	; 1
    7382:	89 83       	std	Y+1, r24	; 0x01
    7384:	0a c0       	rjmp	.+20     	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7386:	eb 81       	ldd	r30, Y+3	; 0x03
    7388:	fc 81       	ldd	r31, Y+4	; 0x04
    738a:	87 81       	ldd	r24, Z+7	; 0x07
    738c:	ed 81       	ldd	r30, Y+5	; 0x05
    738e:	fe 81       	ldd	r31, Y+6	; 0x06
    7390:	80 83       	st	Z, r24
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	89 83       	std	Y+1, r24	; 0x01
    7396:	01 c0       	rjmp	.+2      	; 0x739a <HAL_CLCD_CreateCommand+0x1c0>
    7398:	19 82       	std	Y+1, r1	; 0x01
    739a:	89 81       	ldd	r24, Y+1	; 0x01
    739c:	28 96       	adiw	r28, 0x08	; 8
    739e:	0f b6       	in	r0, 0x3f	; 63
    73a0:	f8 94       	cli
    73a2:	de bf       	out	0x3e, r29	; 62
    73a4:	0f be       	out	0x3f, r0	; 63
    73a6:	cd bf       	out	0x3d, r28	; 61
    73a8:	cf 91       	pop	r28
    73aa:	df 91       	pop	r29
    73ac:	08 95       	ret

000073ae <HAL_CLCD_SendCommand>:
    73ae:	df 93       	push	r29
    73b0:	cf 93       	push	r28
    73b2:	cd b7       	in	r28, 0x3d	; 61
    73b4:	de b7       	in	r29, 0x3e	; 62
    73b6:	a8 97       	sbiw	r28, 0x28	; 40
    73b8:	0f b6       	in	r0, 0x3f	; 63
    73ba:	f8 94       	cli
    73bc:	de bf       	out	0x3e, r29	; 62
    73be:	0f be       	out	0x3f, r0	; 63
    73c0:	cd bf       	out	0x3d, r28	; 61
    73c2:	99 a3       	std	Y+33, r25	; 0x21
    73c4:	88 a3       	std	Y+32, r24	; 0x20
    73c6:	6a a3       	std	Y+34, r22	; 0x22
    73c8:	5c a3       	std	Y+36, r21	; 0x24
    73ca:	4b a3       	std	Y+35, r20	; 0x23
    73cc:	2d a3       	std	Y+37, r18	; 0x25
    73ce:	1f 8e       	std	Y+31, r1	; 0x1f
    73d0:	1e 8e       	std	Y+30, r1	; 0x1e
    73d2:	82 e0       	ldi	r24, 0x02	; 2
    73d4:	8d 8f       	std	Y+29, r24	; 0x1d
    73d6:	8a a1       	ldd	r24, Y+34	; 0x22
    73d8:	28 2f       	mov	r18, r24
    73da:	30 e0       	ldi	r19, 0x00	; 0
    73dc:	38 a7       	std	Y+40, r19	; 0x28
    73de:	2f a3       	std	Y+39, r18	; 0x27
    73e0:	6f a1       	ldd	r22, Y+39	; 0x27
    73e2:	78 a5       	ldd	r23, Y+40	; 0x28
    73e4:	68 30       	cpi	r22, 0x08	; 8
    73e6:	71 05       	cpc	r23, r1
    73e8:	29 f1       	breq	.+74     	; 0x7434 <HAL_CLCD_SendCommand+0x86>
    73ea:	8f a1       	ldd	r24, Y+39	; 0x27
    73ec:	98 a5       	ldd	r25, Y+40	; 0x28
    73ee:	89 30       	cpi	r24, 0x09	; 9
    73f0:	91 05       	cpc	r25, r1
    73f2:	34 f4       	brge	.+12     	; 0x7400 <HAL_CLCD_SendCommand+0x52>
    73f4:	2f a1       	ldd	r18, Y+39	; 0x27
    73f6:	38 a5       	ldd	r19, Y+40	; 0x28
    73f8:	33 23       	and	r19, r19
    73fa:	0c f4       	brge	.+2      	; 0x73fe <HAL_CLCD_SendCommand+0x50>
    73fc:	5c c0       	rjmp	.+184    	; 0x74b6 <HAL_CLCD_SendCommand+0x108>
    73fe:	0b c0       	rjmp	.+22     	; 0x7416 <HAL_CLCD_SendCommand+0x68>
    7400:	6f a1       	ldd	r22, Y+39	; 0x27
    7402:	78 a5       	ldd	r23, Y+40	; 0x28
    7404:	69 30       	cpi	r22, 0x09	; 9
    7406:	71 05       	cpc	r23, r1
    7408:	71 f1       	breq	.+92     	; 0x7466 <HAL_CLCD_SendCommand+0xb8>
    740a:	8f a1       	ldd	r24, Y+39	; 0x27
    740c:	98 a5       	ldd	r25, Y+40	; 0x28
    740e:	8a 30       	cpi	r24, 0x0A	; 10
    7410:	91 05       	cpc	r25, r1
    7412:	c1 f1       	breq	.+112    	; 0x7484 <HAL_CLCD_SendCommand+0xd6>
    7414:	50 c0       	rjmp	.+160    	; 0x74b6 <HAL_CLCD_SendCommand+0x108>
    7416:	88 a1       	ldd	r24, Y+32	; 0x20
    7418:	99 a1       	ldd	r25, Y+33	; 0x21
    741a:	02 96       	adiw	r24, 0x02	; 2
    741c:	60 e0       	ldi	r22, 0x00	; 0
    741e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7422:	88 a1       	ldd	r24, Y+32	; 0x20
    7424:	99 a1       	ldd	r25, Y+33	; 0x21
    7426:	03 96       	adiw	r24, 0x03	; 3
    7428:	60 e0       	ldi	r22, 0x00	; 0
    742a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    742e:	81 e0       	ldi	r24, 0x01	; 1
    7430:	8f 8f       	std	Y+31, r24	; 0x1f
    7432:	45 c0       	rjmp	.+138    	; 0x74be <HAL_CLCD_SendCommand+0x110>
    7434:	88 a1       	ldd	r24, Y+32	; 0x20
    7436:	99 a1       	ldd	r25, Y+33	; 0x21
    7438:	02 96       	adiw	r24, 0x02	; 2
    743a:	60 e0       	ldi	r22, 0x00	; 0
    743c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7440:	88 a1       	ldd	r24, Y+32	; 0x20
    7442:	99 a1       	ldd	r25, Y+33	; 0x21
    7444:	03 96       	adiw	r24, 0x03	; 3
    7446:	61 e0       	ldi	r22, 0x01	; 1
    7448:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    744c:	88 a1       	ldd	r24, Y+32	; 0x20
    744e:	99 a1       	ldd	r25, Y+33	; 0x21
    7450:	2b a1       	ldd	r18, Y+35	; 0x23
    7452:	3c a1       	ldd	r19, Y+36	; 0x24
    7454:	6a a1       	ldd	r22, Y+34	; 0x22
    7456:	a9 01       	movw	r20, r18
    7458:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <HAL_CLCD_ReadDataBus>
    745c:	81 e0       	ldi	r24, 0x01	; 1
    745e:	8f 8f       	std	Y+31, r24	; 0x1f
    7460:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7462:	9e a3       	std	Y+38, r25	; 0x26
    7464:	fd c1       	rjmp	.+1018   	; 0x7860 <HAL_CLCD_SendCommand+0x4b2>
    7466:	88 a1       	ldd	r24, Y+32	; 0x20
    7468:	99 a1       	ldd	r25, Y+33	; 0x21
    746a:	02 96       	adiw	r24, 0x02	; 2
    746c:	61 e0       	ldi	r22, 0x01	; 1
    746e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7472:	88 a1       	ldd	r24, Y+32	; 0x20
    7474:	99 a1       	ldd	r25, Y+33	; 0x21
    7476:	03 96       	adiw	r24, 0x03	; 3
    7478:	60 e0       	ldi	r22, 0x00	; 0
    747a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    747e:	81 e0       	ldi	r24, 0x01	; 1
    7480:	8f 8f       	std	Y+31, r24	; 0x1f
    7482:	1d c0       	rjmp	.+58     	; 0x74be <HAL_CLCD_SendCommand+0x110>
    7484:	88 a1       	ldd	r24, Y+32	; 0x20
    7486:	99 a1       	ldd	r25, Y+33	; 0x21
    7488:	02 96       	adiw	r24, 0x02	; 2
    748a:	61 e0       	ldi	r22, 0x01	; 1
    748c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7490:	88 a1       	ldd	r24, Y+32	; 0x20
    7492:	99 a1       	ldd	r25, Y+33	; 0x21
    7494:	03 96       	adiw	r24, 0x03	; 3
    7496:	61 e0       	ldi	r22, 0x01	; 1
    7498:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    749c:	88 a1       	ldd	r24, Y+32	; 0x20
    749e:	99 a1       	ldd	r25, Y+33	; 0x21
    74a0:	2b a1       	ldd	r18, Y+35	; 0x23
    74a2:	3c a1       	ldd	r19, Y+36	; 0x24
    74a4:	6a a1       	ldd	r22, Y+34	; 0x22
    74a6:	a9 01       	movw	r20, r18
    74a8:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <HAL_CLCD_ReadDataBus>
    74ac:	81 e0       	ldi	r24, 0x01	; 1
    74ae:	8f 8f       	std	Y+31, r24	; 0x1f
    74b0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    74b2:	2e a3       	std	Y+38, r18	; 0x26
    74b4:	d5 c1       	rjmp	.+938    	; 0x7860 <HAL_CLCD_SendCommand+0x4b2>
    74b6:	1f 8e       	std	Y+31, r1	; 0x1f
    74b8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    74ba:	3e a3       	std	Y+38, r19	; 0x26
    74bc:	d1 c1       	rjmp	.+930    	; 0x7860 <HAL_CLCD_SendCommand+0x4b2>
    74be:	88 a1       	ldd	r24, Y+32	; 0x20
    74c0:	99 a1       	ldd	r25, Y+33	; 0x21
    74c2:	60 e0       	ldi	r22, 0x00	; 0
    74c4:	0e 94 3a 3c 	call	0x7874	; 0x7874 <HAL_CLCD_ConfigureDataBusDirection>
    74c8:	e8 a1       	ldd	r30, Y+32	; 0x20
    74ca:	f9 a1       	ldd	r31, Y+33	; 0x21
    74cc:	80 81       	ld	r24, Z
    74ce:	81 70       	andi	r24, 0x01	; 1
    74d0:	88 23       	and	r24, r24
    74d2:	09 f4       	brne	.+2      	; 0x74d6 <HAL_CLCD_SendCommand+0x128>
    74d4:	66 c0       	rjmp	.+204    	; 0x75a2 <HAL_CLCD_SendCommand+0x1f4>
    74d6:	88 a1       	ldd	r24, Y+32	; 0x20
    74d8:	99 a1       	ldd	r25, Y+33	; 0x21
    74da:	ac 01       	movw	r20, r24
    74dc:	4c 5f       	subi	r20, 0xFC	; 252
    74de:	5f 4f       	sbci	r21, 0xFF	; 255
    74e0:	8d a1       	ldd	r24, Y+37	; 0x25
    74e2:	28 2f       	mov	r18, r24
    74e4:	30 e0       	ldi	r19, 0x00	; 0
    74e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    74e8:	88 2f       	mov	r24, r24
    74ea:	90 e0       	ldi	r25, 0x00	; 0
    74ec:	b9 01       	movw	r22, r18
    74ee:	02 c0       	rjmp	.+4      	; 0x74f4 <HAL_CLCD_SendCommand+0x146>
    74f0:	75 95       	asr	r23
    74f2:	67 95       	ror	r22
    74f4:	8a 95       	dec	r24
    74f6:	e2 f7       	brpl	.-8      	; 0x74f0 <HAL_CLCD_SendCommand+0x142>
    74f8:	cb 01       	movw	r24, r22
    74fa:	28 2f       	mov	r18, r24
    74fc:	21 70       	andi	r18, 0x01	; 1
    74fe:	ca 01       	movw	r24, r20
    7500:	62 2f       	mov	r22, r18
    7502:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7506:	88 a1       	ldd	r24, Y+32	; 0x20
    7508:	99 a1       	ldd	r25, Y+33	; 0x21
    750a:	ac 01       	movw	r20, r24
    750c:	4b 5f       	subi	r20, 0xFB	; 251
    750e:	5f 4f       	sbci	r21, 0xFF	; 255
    7510:	8d a1       	ldd	r24, Y+37	; 0x25
    7512:	28 2f       	mov	r18, r24
    7514:	30 e0       	ldi	r19, 0x00	; 0
    7516:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7518:	88 2f       	mov	r24, r24
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	01 96       	adiw	r24, 0x01	; 1
    751e:	b9 01       	movw	r22, r18
    7520:	02 c0       	rjmp	.+4      	; 0x7526 <HAL_CLCD_SendCommand+0x178>
    7522:	75 95       	asr	r23
    7524:	67 95       	ror	r22
    7526:	8a 95       	dec	r24
    7528:	e2 f7       	brpl	.-8      	; 0x7522 <HAL_CLCD_SendCommand+0x174>
    752a:	cb 01       	movw	r24, r22
    752c:	28 2f       	mov	r18, r24
    752e:	21 70       	andi	r18, 0x01	; 1
    7530:	ca 01       	movw	r24, r20
    7532:	62 2f       	mov	r22, r18
    7534:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7538:	88 a1       	ldd	r24, Y+32	; 0x20
    753a:	99 a1       	ldd	r25, Y+33	; 0x21
    753c:	ac 01       	movw	r20, r24
    753e:	4a 5f       	subi	r20, 0xFA	; 250
    7540:	5f 4f       	sbci	r21, 0xFF	; 255
    7542:	8d a1       	ldd	r24, Y+37	; 0x25
    7544:	28 2f       	mov	r18, r24
    7546:	30 e0       	ldi	r19, 0x00	; 0
    7548:	8e 8d       	ldd	r24, Y+30	; 0x1e
    754a:	88 2f       	mov	r24, r24
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	02 96       	adiw	r24, 0x02	; 2
    7550:	b9 01       	movw	r22, r18
    7552:	02 c0       	rjmp	.+4      	; 0x7558 <HAL_CLCD_SendCommand+0x1aa>
    7554:	75 95       	asr	r23
    7556:	67 95       	ror	r22
    7558:	8a 95       	dec	r24
    755a:	e2 f7       	brpl	.-8      	; 0x7554 <HAL_CLCD_SendCommand+0x1a6>
    755c:	cb 01       	movw	r24, r22
    755e:	28 2f       	mov	r18, r24
    7560:	21 70       	andi	r18, 0x01	; 1
    7562:	ca 01       	movw	r24, r20
    7564:	62 2f       	mov	r22, r18
    7566:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    756a:	88 a1       	ldd	r24, Y+32	; 0x20
    756c:	99 a1       	ldd	r25, Y+33	; 0x21
    756e:	ac 01       	movw	r20, r24
    7570:	49 5f       	subi	r20, 0xF9	; 249
    7572:	5f 4f       	sbci	r21, 0xFF	; 255
    7574:	8d a1       	ldd	r24, Y+37	; 0x25
    7576:	28 2f       	mov	r18, r24
    7578:	30 e0       	ldi	r19, 0x00	; 0
    757a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    757c:	88 2f       	mov	r24, r24
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	03 96       	adiw	r24, 0x03	; 3
    7582:	b9 01       	movw	r22, r18
    7584:	02 c0       	rjmp	.+4      	; 0x758a <HAL_CLCD_SendCommand+0x1dc>
    7586:	75 95       	asr	r23
    7588:	67 95       	ror	r22
    758a:	8a 95       	dec	r24
    758c:	e2 f7       	brpl	.-8      	; 0x7586 <HAL_CLCD_SendCommand+0x1d8>
    758e:	cb 01       	movw	r24, r22
    7590:	28 2f       	mov	r18, r24
    7592:	21 70       	andi	r18, 0x01	; 1
    7594:	ca 01       	movw	r24, r20
    7596:	62 2f       	mov	r22, r18
    7598:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    759c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    759e:	81 50       	subi	r24, 0x01	; 1
    75a0:	8d 8f       	std	Y+29, r24	; 0x1d
    75a2:	84 e0       	ldi	r24, 0x04	; 4
    75a4:	8e 8f       	std	Y+30, r24	; 0x1e
    75a6:	88 a1       	ldd	r24, Y+32	; 0x20
    75a8:	99 a1       	ldd	r25, Y+33	; 0x21
    75aa:	ac 01       	movw	r20, r24
    75ac:	48 5f       	subi	r20, 0xF8	; 248
    75ae:	5f 4f       	sbci	r21, 0xFF	; 255
    75b0:	8d a1       	ldd	r24, Y+37	; 0x25
    75b2:	28 2f       	mov	r18, r24
    75b4:	30 e0       	ldi	r19, 0x00	; 0
    75b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    75b8:	88 2f       	mov	r24, r24
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	b9 01       	movw	r22, r18
    75be:	02 c0       	rjmp	.+4      	; 0x75c4 <HAL_CLCD_SendCommand+0x216>
    75c0:	75 95       	asr	r23
    75c2:	67 95       	ror	r22
    75c4:	8a 95       	dec	r24
    75c6:	e2 f7       	brpl	.-8      	; 0x75c0 <HAL_CLCD_SendCommand+0x212>
    75c8:	cb 01       	movw	r24, r22
    75ca:	28 2f       	mov	r18, r24
    75cc:	21 70       	andi	r18, 0x01	; 1
    75ce:	ca 01       	movw	r24, r20
    75d0:	62 2f       	mov	r22, r18
    75d2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    75d6:	88 a1       	ldd	r24, Y+32	; 0x20
    75d8:	99 a1       	ldd	r25, Y+33	; 0x21
    75da:	ac 01       	movw	r20, r24
    75dc:	47 5f       	subi	r20, 0xF7	; 247
    75de:	5f 4f       	sbci	r21, 0xFF	; 255
    75e0:	8d a1       	ldd	r24, Y+37	; 0x25
    75e2:	28 2f       	mov	r18, r24
    75e4:	30 e0       	ldi	r19, 0x00	; 0
    75e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    75e8:	88 2f       	mov	r24, r24
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	01 96       	adiw	r24, 0x01	; 1
    75ee:	b9 01       	movw	r22, r18
    75f0:	02 c0       	rjmp	.+4      	; 0x75f6 <HAL_CLCD_SendCommand+0x248>
    75f2:	75 95       	asr	r23
    75f4:	67 95       	ror	r22
    75f6:	8a 95       	dec	r24
    75f8:	e2 f7       	brpl	.-8      	; 0x75f2 <HAL_CLCD_SendCommand+0x244>
    75fa:	cb 01       	movw	r24, r22
    75fc:	28 2f       	mov	r18, r24
    75fe:	21 70       	andi	r18, 0x01	; 1
    7600:	ca 01       	movw	r24, r20
    7602:	62 2f       	mov	r22, r18
    7604:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7608:	88 a1       	ldd	r24, Y+32	; 0x20
    760a:	99 a1       	ldd	r25, Y+33	; 0x21
    760c:	ac 01       	movw	r20, r24
    760e:	46 5f       	subi	r20, 0xF6	; 246
    7610:	5f 4f       	sbci	r21, 0xFF	; 255
    7612:	8d a1       	ldd	r24, Y+37	; 0x25
    7614:	28 2f       	mov	r18, r24
    7616:	30 e0       	ldi	r19, 0x00	; 0
    7618:	8e 8d       	ldd	r24, Y+30	; 0x1e
    761a:	88 2f       	mov	r24, r24
    761c:	90 e0       	ldi	r25, 0x00	; 0
    761e:	02 96       	adiw	r24, 0x02	; 2
    7620:	b9 01       	movw	r22, r18
    7622:	02 c0       	rjmp	.+4      	; 0x7628 <HAL_CLCD_SendCommand+0x27a>
    7624:	75 95       	asr	r23
    7626:	67 95       	ror	r22
    7628:	8a 95       	dec	r24
    762a:	e2 f7       	brpl	.-8      	; 0x7624 <HAL_CLCD_SendCommand+0x276>
    762c:	cb 01       	movw	r24, r22
    762e:	28 2f       	mov	r18, r24
    7630:	21 70       	andi	r18, 0x01	; 1
    7632:	ca 01       	movw	r24, r20
    7634:	62 2f       	mov	r22, r18
    7636:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    763a:	88 a1       	ldd	r24, Y+32	; 0x20
    763c:	99 a1       	ldd	r25, Y+33	; 0x21
    763e:	ac 01       	movw	r20, r24
    7640:	45 5f       	subi	r20, 0xF5	; 245
    7642:	5f 4f       	sbci	r21, 0xFF	; 255
    7644:	8d a1       	ldd	r24, Y+37	; 0x25
    7646:	28 2f       	mov	r18, r24
    7648:	30 e0       	ldi	r19, 0x00	; 0
    764a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    764c:	88 2f       	mov	r24, r24
    764e:	90 e0       	ldi	r25, 0x00	; 0
    7650:	03 96       	adiw	r24, 0x03	; 3
    7652:	b9 01       	movw	r22, r18
    7654:	02 c0       	rjmp	.+4      	; 0x765a <HAL_CLCD_SendCommand+0x2ac>
    7656:	75 95       	asr	r23
    7658:	67 95       	ror	r22
    765a:	8a 95       	dec	r24
    765c:	e2 f7       	brpl	.-8      	; 0x7656 <HAL_CLCD_SendCommand+0x2a8>
    765e:	cb 01       	movw	r24, r22
    7660:	28 2f       	mov	r18, r24
    7662:	21 70       	andi	r18, 0x01	; 1
    7664:	ca 01       	movw	r24, r20
    7666:	62 2f       	mov	r22, r18
    7668:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    766c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    766e:	81 50       	subi	r24, 0x01	; 1
    7670:	8d 8f       	std	Y+29, r24	; 0x1d
    7672:	1e 8e       	std	Y+30, r1	; 0x1e
    7674:	88 a1       	ldd	r24, Y+32	; 0x20
    7676:	99 a1       	ldd	r25, Y+33	; 0x21
    7678:	01 96       	adiw	r24, 0x01	; 1
    767a:	61 e0       	ldi	r22, 0x01	; 1
    767c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7680:	80 e0       	ldi	r24, 0x00	; 0
    7682:	90 e0       	ldi	r25, 0x00	; 0
    7684:	a0 e8       	ldi	r26, 0x80	; 128
    7686:	bf e3       	ldi	r27, 0x3F	; 63
    7688:	89 8f       	std	Y+25, r24	; 0x19
    768a:	9a 8f       	std	Y+26, r25	; 0x1a
    768c:	ab 8f       	std	Y+27, r26	; 0x1b
    768e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7690:	69 8d       	ldd	r22, Y+25	; 0x19
    7692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7698:	20 e0       	ldi	r18, 0x00	; 0
    769a:	30 e0       	ldi	r19, 0x00	; 0
    769c:	4a e7       	ldi	r20, 0x7A	; 122
    769e:	55 e4       	ldi	r21, 0x45	; 69
    76a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    76a4:	dc 01       	movw	r26, r24
    76a6:	cb 01       	movw	r24, r22
    76a8:	8d 8b       	std	Y+21, r24	; 0x15
    76aa:	9e 8b       	std	Y+22, r25	; 0x16
    76ac:	af 8b       	std	Y+23, r26	; 0x17
    76ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    76b0:	6d 89       	ldd	r22, Y+21	; 0x15
    76b2:	7e 89       	ldd	r23, Y+22	; 0x16
    76b4:	8f 89       	ldd	r24, Y+23	; 0x17
    76b6:	98 8d       	ldd	r25, Y+24	; 0x18
    76b8:	20 e0       	ldi	r18, 0x00	; 0
    76ba:	30 e0       	ldi	r19, 0x00	; 0
    76bc:	40 e8       	ldi	r20, 0x80	; 128
    76be:	5f e3       	ldi	r21, 0x3F	; 63
    76c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    76c4:	88 23       	and	r24, r24
    76c6:	2c f4       	brge	.+10     	; 0x76d2 <HAL_CLCD_SendCommand+0x324>
		__ticks = 1;
    76c8:	81 e0       	ldi	r24, 0x01	; 1
    76ca:	90 e0       	ldi	r25, 0x00	; 0
    76cc:	9c 8b       	std	Y+20, r25	; 0x14
    76ce:	8b 8b       	std	Y+19, r24	; 0x13
    76d0:	3f c0       	rjmp	.+126    	; 0x7750 <HAL_CLCD_SendCommand+0x3a2>
	else if (__tmp > 65535)
    76d2:	6d 89       	ldd	r22, Y+21	; 0x15
    76d4:	7e 89       	ldd	r23, Y+22	; 0x16
    76d6:	8f 89       	ldd	r24, Y+23	; 0x17
    76d8:	98 8d       	ldd	r25, Y+24	; 0x18
    76da:	20 e0       	ldi	r18, 0x00	; 0
    76dc:	3f ef       	ldi	r19, 0xFF	; 255
    76de:	4f e7       	ldi	r20, 0x7F	; 127
    76e0:	57 e4       	ldi	r21, 0x47	; 71
    76e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    76e6:	18 16       	cp	r1, r24
    76e8:	4c f5       	brge	.+82     	; 0x773c <HAL_CLCD_SendCommand+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    76ea:	69 8d       	ldd	r22, Y+25	; 0x19
    76ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    76ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    76f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    76f2:	20 e0       	ldi	r18, 0x00	; 0
    76f4:	30 e0       	ldi	r19, 0x00	; 0
    76f6:	40 e2       	ldi	r20, 0x20	; 32
    76f8:	51 e4       	ldi	r21, 0x41	; 65
    76fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    76fe:	dc 01       	movw	r26, r24
    7700:	cb 01       	movw	r24, r22
    7702:	bc 01       	movw	r22, r24
    7704:	cd 01       	movw	r24, r26
    7706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    770a:	dc 01       	movw	r26, r24
    770c:	cb 01       	movw	r24, r22
    770e:	9c 8b       	std	Y+20, r25	; 0x14
    7710:	8b 8b       	std	Y+19, r24	; 0x13
    7712:	0f c0       	rjmp	.+30     	; 0x7732 <HAL_CLCD_SendCommand+0x384>
    7714:	80 e9       	ldi	r24, 0x90	; 144
    7716:	91 e0       	ldi	r25, 0x01	; 1
    7718:	9a 8b       	std	Y+18, r25	; 0x12
    771a:	89 8b       	std	Y+17, r24	; 0x11
    771c:	89 89       	ldd	r24, Y+17	; 0x11
    771e:	9a 89       	ldd	r25, Y+18	; 0x12
    7720:	01 97       	sbiw	r24, 0x01	; 1
    7722:	f1 f7       	brne	.-4      	; 0x7720 <HAL_CLCD_SendCommand+0x372>
    7724:	9a 8b       	std	Y+18, r25	; 0x12
    7726:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7728:	8b 89       	ldd	r24, Y+19	; 0x13
    772a:	9c 89       	ldd	r25, Y+20	; 0x14
    772c:	01 97       	sbiw	r24, 0x01	; 1
    772e:	9c 8b       	std	Y+20, r25	; 0x14
    7730:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7732:	8b 89       	ldd	r24, Y+19	; 0x13
    7734:	9c 89       	ldd	r25, Y+20	; 0x14
    7736:	00 97       	sbiw	r24, 0x00	; 0
    7738:	69 f7       	brne	.-38     	; 0x7714 <HAL_CLCD_SendCommand+0x366>
    773a:	14 c0       	rjmp	.+40     	; 0x7764 <HAL_CLCD_SendCommand+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    773c:	6d 89       	ldd	r22, Y+21	; 0x15
    773e:	7e 89       	ldd	r23, Y+22	; 0x16
    7740:	8f 89       	ldd	r24, Y+23	; 0x17
    7742:	98 8d       	ldd	r25, Y+24	; 0x18
    7744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7748:	dc 01       	movw	r26, r24
    774a:	cb 01       	movw	r24, r22
    774c:	9c 8b       	std	Y+20, r25	; 0x14
    774e:	8b 8b       	std	Y+19, r24	; 0x13
    7750:	8b 89       	ldd	r24, Y+19	; 0x13
    7752:	9c 89       	ldd	r25, Y+20	; 0x14
    7754:	98 8b       	std	Y+16, r25	; 0x10
    7756:	8f 87       	std	Y+15, r24	; 0x0f
    7758:	8f 85       	ldd	r24, Y+15	; 0x0f
    775a:	98 89       	ldd	r25, Y+16	; 0x10
    775c:	01 97       	sbiw	r24, 0x01	; 1
    775e:	f1 f7       	brne	.-4      	; 0x775c <HAL_CLCD_SendCommand+0x3ae>
    7760:	98 8b       	std	Y+16, r25	; 0x10
    7762:	8f 87       	std	Y+15, r24	; 0x0f
    7764:	88 a1       	ldd	r24, Y+32	; 0x20
    7766:	99 a1       	ldd	r25, Y+33	; 0x21
    7768:	01 96       	adiw	r24, 0x01	; 1
    776a:	60 e0       	ldi	r22, 0x00	; 0
    776c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	90 e0       	ldi	r25, 0x00	; 0
    7774:	a0 ea       	ldi	r26, 0xA0	; 160
    7776:	b0 e4       	ldi	r27, 0x40	; 64
    7778:	8b 87       	std	Y+11, r24	; 0x0b
    777a:	9c 87       	std	Y+12, r25	; 0x0c
    777c:	ad 87       	std	Y+13, r26	; 0x0d
    777e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7780:	6b 85       	ldd	r22, Y+11	; 0x0b
    7782:	7c 85       	ldd	r23, Y+12	; 0x0c
    7784:	8d 85       	ldd	r24, Y+13	; 0x0d
    7786:	9e 85       	ldd	r25, Y+14	; 0x0e
    7788:	20 e0       	ldi	r18, 0x00	; 0
    778a:	30 e0       	ldi	r19, 0x00	; 0
    778c:	4a e7       	ldi	r20, 0x7A	; 122
    778e:	55 e4       	ldi	r21, 0x45	; 69
    7790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7794:	dc 01       	movw	r26, r24
    7796:	cb 01       	movw	r24, r22
    7798:	8f 83       	std	Y+7, r24	; 0x07
    779a:	98 87       	std	Y+8, r25	; 0x08
    779c:	a9 87       	std	Y+9, r26	; 0x09
    779e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    77a0:	6f 81       	ldd	r22, Y+7	; 0x07
    77a2:	78 85       	ldd	r23, Y+8	; 0x08
    77a4:	89 85       	ldd	r24, Y+9	; 0x09
    77a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    77a8:	20 e0       	ldi	r18, 0x00	; 0
    77aa:	30 e0       	ldi	r19, 0x00	; 0
    77ac:	40 e8       	ldi	r20, 0x80	; 128
    77ae:	5f e3       	ldi	r21, 0x3F	; 63
    77b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    77b4:	88 23       	and	r24, r24
    77b6:	2c f4       	brge	.+10     	; 0x77c2 <HAL_CLCD_SendCommand+0x414>
		__ticks = 1;
    77b8:	81 e0       	ldi	r24, 0x01	; 1
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	9e 83       	std	Y+6, r25	; 0x06
    77be:	8d 83       	std	Y+5, r24	; 0x05
    77c0:	3f c0       	rjmp	.+126    	; 0x7840 <HAL_CLCD_SendCommand+0x492>
	else if (__tmp > 65535)
    77c2:	6f 81       	ldd	r22, Y+7	; 0x07
    77c4:	78 85       	ldd	r23, Y+8	; 0x08
    77c6:	89 85       	ldd	r24, Y+9	; 0x09
    77c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    77ca:	20 e0       	ldi	r18, 0x00	; 0
    77cc:	3f ef       	ldi	r19, 0xFF	; 255
    77ce:	4f e7       	ldi	r20, 0x7F	; 127
    77d0:	57 e4       	ldi	r21, 0x47	; 71
    77d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    77d6:	18 16       	cp	r1, r24
    77d8:	4c f5       	brge	.+82     	; 0x782c <HAL_CLCD_SendCommand+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77da:	6b 85       	ldd	r22, Y+11	; 0x0b
    77dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    77de:	8d 85       	ldd	r24, Y+13	; 0x0d
    77e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    77e2:	20 e0       	ldi	r18, 0x00	; 0
    77e4:	30 e0       	ldi	r19, 0x00	; 0
    77e6:	40 e2       	ldi	r20, 0x20	; 32
    77e8:	51 e4       	ldi	r21, 0x41	; 65
    77ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77ee:	dc 01       	movw	r26, r24
    77f0:	cb 01       	movw	r24, r22
    77f2:	bc 01       	movw	r22, r24
    77f4:	cd 01       	movw	r24, r26
    77f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    77fa:	dc 01       	movw	r26, r24
    77fc:	cb 01       	movw	r24, r22
    77fe:	9e 83       	std	Y+6, r25	; 0x06
    7800:	8d 83       	std	Y+5, r24	; 0x05
    7802:	0f c0       	rjmp	.+30     	; 0x7822 <HAL_CLCD_SendCommand+0x474>
    7804:	80 e9       	ldi	r24, 0x90	; 144
    7806:	91 e0       	ldi	r25, 0x01	; 1
    7808:	9c 83       	std	Y+4, r25	; 0x04
    780a:	8b 83       	std	Y+3, r24	; 0x03
    780c:	8b 81       	ldd	r24, Y+3	; 0x03
    780e:	9c 81       	ldd	r25, Y+4	; 0x04
    7810:	01 97       	sbiw	r24, 0x01	; 1
    7812:	f1 f7       	brne	.-4      	; 0x7810 <HAL_CLCD_SendCommand+0x462>
    7814:	9c 83       	std	Y+4, r25	; 0x04
    7816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7818:	8d 81       	ldd	r24, Y+5	; 0x05
    781a:	9e 81       	ldd	r25, Y+6	; 0x06
    781c:	01 97       	sbiw	r24, 0x01	; 1
    781e:	9e 83       	std	Y+6, r25	; 0x06
    7820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7822:	8d 81       	ldd	r24, Y+5	; 0x05
    7824:	9e 81       	ldd	r25, Y+6	; 0x06
    7826:	00 97       	sbiw	r24, 0x00	; 0
    7828:	69 f7       	brne	.-38     	; 0x7804 <HAL_CLCD_SendCommand+0x456>
    782a:	14 c0       	rjmp	.+40     	; 0x7854 <HAL_CLCD_SendCommand+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    782c:	6f 81       	ldd	r22, Y+7	; 0x07
    782e:	78 85       	ldd	r23, Y+8	; 0x08
    7830:	89 85       	ldd	r24, Y+9	; 0x09
    7832:	9a 85       	ldd	r25, Y+10	; 0x0a
    7834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7838:	dc 01       	movw	r26, r24
    783a:	cb 01       	movw	r24, r22
    783c:	9e 83       	std	Y+6, r25	; 0x06
    783e:	8d 83       	std	Y+5, r24	; 0x05
    7840:	8d 81       	ldd	r24, Y+5	; 0x05
    7842:	9e 81       	ldd	r25, Y+6	; 0x06
    7844:	9a 83       	std	Y+2, r25	; 0x02
    7846:	89 83       	std	Y+1, r24	; 0x01
    7848:	89 81       	ldd	r24, Y+1	; 0x01
    784a:	9a 81       	ldd	r25, Y+2	; 0x02
    784c:	01 97       	sbiw	r24, 0x01	; 1
    784e:	f1 f7       	brne	.-4      	; 0x784c <HAL_CLCD_SendCommand+0x49e>
    7850:	9a 83       	std	Y+2, r25	; 0x02
    7852:	89 83       	std	Y+1, r24	; 0x01
    7854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7856:	88 23       	and	r24, r24
    7858:	09 f0       	breq	.+2      	; 0x785c <HAL_CLCD_SendCommand+0x4ae>
    785a:	a5 ce       	rjmp	.-694    	; 0x75a6 <HAL_CLCD_SendCommand+0x1f8>
    785c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    785e:	7e a3       	std	Y+38, r23	; 0x26
    7860:	8e a1       	ldd	r24, Y+38	; 0x26
    7862:	a8 96       	adiw	r28, 0x28	; 40
    7864:	0f b6       	in	r0, 0x3f	; 63
    7866:	f8 94       	cli
    7868:	de bf       	out	0x3e, r29	; 62
    786a:	0f be       	out	0x3f, r0	; 63
    786c:	cd bf       	out	0x3d, r28	; 61
    786e:	cf 91       	pop	r28
    7870:	df 91       	pop	r29
    7872:	08 95       	ret

00007874 <HAL_CLCD_ConfigureDataBusDirection>:
    7874:	df 93       	push	r29
    7876:	cf 93       	push	r28
    7878:	00 d0       	rcall	.+0      	; 0x787a <HAL_CLCD_ConfigureDataBusDirection+0x6>
    787a:	00 d0       	rcall	.+0      	; 0x787c <HAL_CLCD_ConfigureDataBusDirection+0x8>
    787c:	cd b7       	in	r28, 0x3d	; 61
    787e:	de b7       	in	r29, 0x3e	; 62
    7880:	9b 83       	std	Y+3, r25	; 0x03
    7882:	8a 83       	std	Y+2, r24	; 0x02
    7884:	6c 83       	std	Y+4, r22	; 0x04
    7886:	19 82       	std	Y+1, r1	; 0x01
    7888:	ea 81       	ldd	r30, Y+2	; 0x02
    788a:	fb 81       	ldd	r31, Y+3	; 0x03
    788c:	80 81       	ld	r24, Z
    788e:	81 70       	andi	r24, 0x01	; 1
    7890:	88 23       	and	r24, r24
    7892:	09 f4       	brne	.+2      	; 0x7896 <HAL_CLCD_ConfigureDataBusDirection+0x22>
    7894:	48 c0       	rjmp	.+144    	; 0x7926 <HAL_CLCD_ConfigureDataBusDirection+0xb2>
    7896:	8c 81       	ldd	r24, Y+4	; 0x04
    7898:	83 70       	andi	r24, 0x03	; 3
    789a:	ea 81       	ldd	r30, Y+2	; 0x02
    789c:	fb 81       	ldd	r31, Y+3	; 0x03
    789e:	83 70       	andi	r24, 0x03	; 3
    78a0:	98 2f       	mov	r25, r24
    78a2:	92 95       	swap	r25
    78a4:	99 0f       	add	r25, r25
    78a6:	90 7e       	andi	r25, 0xE0	; 224
    78a8:	84 81       	ldd	r24, Z+4	; 0x04
    78aa:	8f 79       	andi	r24, 0x9F	; 159
    78ac:	89 2b       	or	r24, r25
    78ae:	84 83       	std	Z+4, r24	; 0x04
    78b0:	8c 81       	ldd	r24, Y+4	; 0x04
    78b2:	83 70       	andi	r24, 0x03	; 3
    78b4:	ea 81       	ldd	r30, Y+2	; 0x02
    78b6:	fb 81       	ldd	r31, Y+3	; 0x03
    78b8:	83 70       	andi	r24, 0x03	; 3
    78ba:	98 2f       	mov	r25, r24
    78bc:	92 95       	swap	r25
    78be:	99 0f       	add	r25, r25
    78c0:	90 7e       	andi	r25, 0xE0	; 224
    78c2:	85 81       	ldd	r24, Z+5	; 0x05
    78c4:	8f 79       	andi	r24, 0x9F	; 159
    78c6:	89 2b       	or	r24, r25
    78c8:	85 83       	std	Z+5, r24	; 0x05
    78ca:	8c 81       	ldd	r24, Y+4	; 0x04
    78cc:	83 70       	andi	r24, 0x03	; 3
    78ce:	ea 81       	ldd	r30, Y+2	; 0x02
    78d0:	fb 81       	ldd	r31, Y+3	; 0x03
    78d2:	83 70       	andi	r24, 0x03	; 3
    78d4:	98 2f       	mov	r25, r24
    78d6:	92 95       	swap	r25
    78d8:	99 0f       	add	r25, r25
    78da:	90 7e       	andi	r25, 0xE0	; 224
    78dc:	86 81       	ldd	r24, Z+6	; 0x06
    78de:	8f 79       	andi	r24, 0x9F	; 159
    78e0:	89 2b       	or	r24, r25
    78e2:	86 83       	std	Z+6, r24	; 0x06
    78e4:	8c 81       	ldd	r24, Y+4	; 0x04
    78e6:	83 70       	andi	r24, 0x03	; 3
    78e8:	ea 81       	ldd	r30, Y+2	; 0x02
    78ea:	fb 81       	ldd	r31, Y+3	; 0x03
    78ec:	83 70       	andi	r24, 0x03	; 3
    78ee:	98 2f       	mov	r25, r24
    78f0:	92 95       	swap	r25
    78f2:	99 0f       	add	r25, r25
    78f4:	90 7e       	andi	r25, 0xE0	; 224
    78f6:	87 81       	ldd	r24, Z+7	; 0x07
    78f8:	8f 79       	andi	r24, 0x9F	; 159
    78fa:	89 2b       	or	r24, r25
    78fc:	87 83       	std	Z+7, r24	; 0x07
    78fe:	8a 81       	ldd	r24, Y+2	; 0x02
    7900:	9b 81       	ldd	r25, Y+3	; 0x03
    7902:	04 96       	adiw	r24, 0x04	; 4
    7904:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    7908:	8a 81       	ldd	r24, Y+2	; 0x02
    790a:	9b 81       	ldd	r25, Y+3	; 0x03
    790c:	05 96       	adiw	r24, 0x05	; 5
    790e:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    7912:	8a 81       	ldd	r24, Y+2	; 0x02
    7914:	9b 81       	ldd	r25, Y+3	; 0x03
    7916:	06 96       	adiw	r24, 0x06	; 6
    7918:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    791c:	8a 81       	ldd	r24, Y+2	; 0x02
    791e:	9b 81       	ldd	r25, Y+3	; 0x03
    7920:	07 96       	adiw	r24, 0x07	; 7
    7922:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    7926:	8c 81       	ldd	r24, Y+4	; 0x04
    7928:	83 70       	andi	r24, 0x03	; 3
    792a:	ea 81       	ldd	r30, Y+2	; 0x02
    792c:	fb 81       	ldd	r31, Y+3	; 0x03
    792e:	83 70       	andi	r24, 0x03	; 3
    7930:	98 2f       	mov	r25, r24
    7932:	92 95       	swap	r25
    7934:	99 0f       	add	r25, r25
    7936:	90 7e       	andi	r25, 0xE0	; 224
    7938:	80 85       	ldd	r24, Z+8	; 0x08
    793a:	8f 79       	andi	r24, 0x9F	; 159
    793c:	89 2b       	or	r24, r25
    793e:	80 87       	std	Z+8, r24	; 0x08
    7940:	8c 81       	ldd	r24, Y+4	; 0x04
    7942:	83 70       	andi	r24, 0x03	; 3
    7944:	ea 81       	ldd	r30, Y+2	; 0x02
    7946:	fb 81       	ldd	r31, Y+3	; 0x03
    7948:	83 70       	andi	r24, 0x03	; 3
    794a:	98 2f       	mov	r25, r24
    794c:	92 95       	swap	r25
    794e:	99 0f       	add	r25, r25
    7950:	90 7e       	andi	r25, 0xE0	; 224
    7952:	81 85       	ldd	r24, Z+9	; 0x09
    7954:	8f 79       	andi	r24, 0x9F	; 159
    7956:	89 2b       	or	r24, r25
    7958:	81 87       	std	Z+9, r24	; 0x09
    795a:	8c 81       	ldd	r24, Y+4	; 0x04
    795c:	83 70       	andi	r24, 0x03	; 3
    795e:	ea 81       	ldd	r30, Y+2	; 0x02
    7960:	fb 81       	ldd	r31, Y+3	; 0x03
    7962:	83 70       	andi	r24, 0x03	; 3
    7964:	98 2f       	mov	r25, r24
    7966:	92 95       	swap	r25
    7968:	99 0f       	add	r25, r25
    796a:	90 7e       	andi	r25, 0xE0	; 224
    796c:	82 85       	ldd	r24, Z+10	; 0x0a
    796e:	8f 79       	andi	r24, 0x9F	; 159
    7970:	89 2b       	or	r24, r25
    7972:	82 87       	std	Z+10, r24	; 0x0a
    7974:	8c 81       	ldd	r24, Y+4	; 0x04
    7976:	83 70       	andi	r24, 0x03	; 3
    7978:	ea 81       	ldd	r30, Y+2	; 0x02
    797a:	fb 81       	ldd	r31, Y+3	; 0x03
    797c:	83 70       	andi	r24, 0x03	; 3
    797e:	98 2f       	mov	r25, r24
    7980:	92 95       	swap	r25
    7982:	99 0f       	add	r25, r25
    7984:	90 7e       	andi	r25, 0xE0	; 224
    7986:	83 85       	ldd	r24, Z+11	; 0x0b
    7988:	8f 79       	andi	r24, 0x9F	; 159
    798a:	89 2b       	or	r24, r25
    798c:	83 87       	std	Z+11, r24	; 0x0b
    798e:	8a 81       	ldd	r24, Y+2	; 0x02
    7990:	9b 81       	ldd	r25, Y+3	; 0x03
    7992:	08 96       	adiw	r24, 0x08	; 8
    7994:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    7998:	8a 81       	ldd	r24, Y+2	; 0x02
    799a:	9b 81       	ldd	r25, Y+3	; 0x03
    799c:	09 96       	adiw	r24, 0x09	; 9
    799e:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    79a2:	8a 81       	ldd	r24, Y+2	; 0x02
    79a4:	9b 81       	ldd	r25, Y+3	; 0x03
    79a6:	0a 96       	adiw	r24, 0x0a	; 10
    79a8:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    79ac:	8a 81       	ldd	r24, Y+2	; 0x02
    79ae:	9b 81       	ldd	r25, Y+3	; 0x03
    79b0:	0b 96       	adiw	r24, 0x0b	; 11
    79b2:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    79b6:	89 81       	ldd	r24, Y+1	; 0x01
    79b8:	0f 90       	pop	r0
    79ba:	0f 90       	pop	r0
    79bc:	0f 90       	pop	r0
    79be:	0f 90       	pop	r0
    79c0:	cf 91       	pop	r28
    79c2:	df 91       	pop	r29
    79c4:	08 95       	ret

000079c6 <HAL_CLCD_ReadDataBus>:
    79c6:	df 93       	push	r29
    79c8:	cf 93       	push	r28
    79ca:	cd b7       	in	r28, 0x3d	; 61
    79cc:	de b7       	in	r29, 0x3e	; 62
    79ce:	c2 54       	subi	r28, 0x42	; 66
    79d0:	d0 40       	sbci	r29, 0x00	; 0
    79d2:	0f b6       	in	r0, 0x3f	; 63
    79d4:	f8 94       	cli
    79d6:	de bf       	out	0x3e, r29	; 62
    79d8:	0f be       	out	0x3f, r0	; 63
    79da:	cd bf       	out	0x3d, r28	; 61
    79dc:	9f af       	std	Y+63, r25	; 0x3f
    79de:	8e af       	std	Y+62, r24	; 0x3e
    79e0:	fe 01       	movw	r30, r28
    79e2:	e0 5c       	subi	r30, 0xC0	; 192
    79e4:	ff 4f       	sbci	r31, 0xFF	; 255
    79e6:	60 83       	st	Z, r22
    79e8:	fe 01       	movw	r30, r28
    79ea:	ef 5b       	subi	r30, 0xBF	; 191
    79ec:	ff 4f       	sbci	r31, 0xFF	; 255
    79ee:	51 83       	std	Z+1, r21	; 0x01
    79f0:	40 83       	st	Z, r20
    79f2:	1c ae       	std	Y+60, r1	; 0x3c
    79f4:	1b ae       	std	Y+59, r1	; 0x3b
    79f6:	82 e0       	ldi	r24, 0x02	; 2
    79f8:	8a af       	std	Y+58, r24	; 0x3a
    79fa:	1d ae       	std	Y+61, r1	; 0x3d
    79fc:	19 ae       	std	Y+57, r1	; 0x39
    79fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a00:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a02:	61 e0       	ldi	r22, 0x01	; 1
    7a04:	0e 94 3a 3c 	call	0x7874	; 0x7874 <HAL_CLCD_ConfigureDataBusDirection>
    7a08:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a0c:	01 96       	adiw	r24, 0x01	; 1
    7a0e:	61 e0       	ldi	r22, 0x01	; 1
    7a10:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7a14:	80 e0       	ldi	r24, 0x00	; 0
    7a16:	90 e0       	ldi	r25, 0x00	; 0
    7a18:	a0 e8       	ldi	r26, 0x80	; 128
    7a1a:	bf e3       	ldi	r27, 0x3F	; 63
    7a1c:	8d ab       	std	Y+53, r24	; 0x35
    7a1e:	9e ab       	std	Y+54, r25	; 0x36
    7a20:	af ab       	std	Y+55, r26	; 0x37
    7a22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a24:	6d a9       	ldd	r22, Y+53	; 0x35
    7a26:	7e a9       	ldd	r23, Y+54	; 0x36
    7a28:	8f a9       	ldd	r24, Y+55	; 0x37
    7a2a:	98 ad       	ldd	r25, Y+56	; 0x38
    7a2c:	20 e0       	ldi	r18, 0x00	; 0
    7a2e:	30 e0       	ldi	r19, 0x00	; 0
    7a30:	4a e7       	ldi	r20, 0x7A	; 122
    7a32:	55 e4       	ldi	r21, 0x45	; 69
    7a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7a38:	dc 01       	movw	r26, r24
    7a3a:	cb 01       	movw	r24, r22
    7a3c:	89 ab       	std	Y+49, r24	; 0x31
    7a3e:	9a ab       	std	Y+50, r25	; 0x32
    7a40:	ab ab       	std	Y+51, r26	; 0x33
    7a42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7a44:	69 a9       	ldd	r22, Y+49	; 0x31
    7a46:	7a a9       	ldd	r23, Y+50	; 0x32
    7a48:	8b a9       	ldd	r24, Y+51	; 0x33
    7a4a:	9c a9       	ldd	r25, Y+52	; 0x34
    7a4c:	20 e0       	ldi	r18, 0x00	; 0
    7a4e:	30 e0       	ldi	r19, 0x00	; 0
    7a50:	40 e8       	ldi	r20, 0x80	; 128
    7a52:	5f e3       	ldi	r21, 0x3F	; 63
    7a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7a58:	88 23       	and	r24, r24
    7a5a:	2c f4       	brge	.+10     	; 0x7a66 <HAL_CLCD_ReadDataBus+0xa0>
		__ticks = 1;
    7a5c:	81 e0       	ldi	r24, 0x01	; 1
    7a5e:	90 e0       	ldi	r25, 0x00	; 0
    7a60:	98 ab       	std	Y+48, r25	; 0x30
    7a62:	8f a7       	std	Y+47, r24	; 0x2f
    7a64:	3f c0       	rjmp	.+126    	; 0x7ae4 <HAL_CLCD_ReadDataBus+0x11e>
	else if (__tmp > 65535)
    7a66:	69 a9       	ldd	r22, Y+49	; 0x31
    7a68:	7a a9       	ldd	r23, Y+50	; 0x32
    7a6a:	8b a9       	ldd	r24, Y+51	; 0x33
    7a6c:	9c a9       	ldd	r25, Y+52	; 0x34
    7a6e:	20 e0       	ldi	r18, 0x00	; 0
    7a70:	3f ef       	ldi	r19, 0xFF	; 255
    7a72:	4f e7       	ldi	r20, 0x7F	; 127
    7a74:	57 e4       	ldi	r21, 0x47	; 71
    7a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7a7a:	18 16       	cp	r1, r24
    7a7c:	4c f5       	brge	.+82     	; 0x7ad0 <HAL_CLCD_ReadDataBus+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7a7e:	6d a9       	ldd	r22, Y+53	; 0x35
    7a80:	7e a9       	ldd	r23, Y+54	; 0x36
    7a82:	8f a9       	ldd	r24, Y+55	; 0x37
    7a84:	98 ad       	ldd	r25, Y+56	; 0x38
    7a86:	20 e0       	ldi	r18, 0x00	; 0
    7a88:	30 e0       	ldi	r19, 0x00	; 0
    7a8a:	40 e2       	ldi	r20, 0x20	; 32
    7a8c:	51 e4       	ldi	r21, 0x41	; 65
    7a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7a92:	dc 01       	movw	r26, r24
    7a94:	cb 01       	movw	r24, r22
    7a96:	bc 01       	movw	r22, r24
    7a98:	cd 01       	movw	r24, r26
    7a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a9e:	dc 01       	movw	r26, r24
    7aa0:	cb 01       	movw	r24, r22
    7aa2:	98 ab       	std	Y+48, r25	; 0x30
    7aa4:	8f a7       	std	Y+47, r24	; 0x2f
    7aa6:	0f c0       	rjmp	.+30     	; 0x7ac6 <HAL_CLCD_ReadDataBus+0x100>
    7aa8:	80 e9       	ldi	r24, 0x90	; 144
    7aaa:	91 e0       	ldi	r25, 0x01	; 1
    7aac:	9e a7       	std	Y+46, r25	; 0x2e
    7aae:	8d a7       	std	Y+45, r24	; 0x2d
    7ab0:	8d a5       	ldd	r24, Y+45	; 0x2d
    7ab2:	9e a5       	ldd	r25, Y+46	; 0x2e
    7ab4:	01 97       	sbiw	r24, 0x01	; 1
    7ab6:	f1 f7       	brne	.-4      	; 0x7ab4 <HAL_CLCD_ReadDataBus+0xee>
    7ab8:	9e a7       	std	Y+46, r25	; 0x2e
    7aba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    7abe:	98 a9       	ldd	r25, Y+48	; 0x30
    7ac0:	01 97       	sbiw	r24, 0x01	; 1
    7ac2:	98 ab       	std	Y+48, r25	; 0x30
    7ac4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ac6:	8f a5       	ldd	r24, Y+47	; 0x2f
    7ac8:	98 a9       	ldd	r25, Y+48	; 0x30
    7aca:	00 97       	sbiw	r24, 0x00	; 0
    7acc:	69 f7       	brne	.-38     	; 0x7aa8 <HAL_CLCD_ReadDataBus+0xe2>
    7ace:	14 c0       	rjmp	.+40     	; 0x7af8 <HAL_CLCD_ReadDataBus+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ad0:	69 a9       	ldd	r22, Y+49	; 0x31
    7ad2:	7a a9       	ldd	r23, Y+50	; 0x32
    7ad4:	8b a9       	ldd	r24, Y+51	; 0x33
    7ad6:	9c a9       	ldd	r25, Y+52	; 0x34
    7ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7adc:	dc 01       	movw	r26, r24
    7ade:	cb 01       	movw	r24, r22
    7ae0:	98 ab       	std	Y+48, r25	; 0x30
    7ae2:	8f a7       	std	Y+47, r24	; 0x2f
    7ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    7ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    7ae8:	9c a7       	std	Y+44, r25	; 0x2c
    7aea:	8b a7       	std	Y+43, r24	; 0x2b
    7aec:	8b a5       	ldd	r24, Y+43	; 0x2b
    7aee:	9c a5       	ldd	r25, Y+44	; 0x2c
    7af0:	01 97       	sbiw	r24, 0x01	; 1
    7af2:	f1 f7       	brne	.-4      	; 0x7af0 <HAL_CLCD_ReadDataBus+0x12a>
    7af4:	9c a7       	std	Y+44, r25	; 0x2c
    7af6:	8b a7       	std	Y+43, r24	; 0x2b
    7af8:	8e ad       	ldd	r24, Y+62	; 0x3e
    7afa:	9f ad       	ldd	r25, Y+63	; 0x3f
    7afc:	01 96       	adiw	r24, 0x01	; 1
    7afe:	60 e0       	ldi	r22, 0x00	; 0
    7b00:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7b04:	80 e0       	ldi	r24, 0x00	; 0
    7b06:	90 e0       	ldi	r25, 0x00	; 0
    7b08:	a0 ea       	ldi	r26, 0xA0	; 160
    7b0a:	b0 e4       	ldi	r27, 0x40	; 64
    7b0c:	8f a3       	std	Y+39, r24	; 0x27
    7b0e:	98 a7       	std	Y+40, r25	; 0x28
    7b10:	a9 a7       	std	Y+41, r26	; 0x29
    7b12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7b14:	6f a1       	ldd	r22, Y+39	; 0x27
    7b16:	78 a5       	ldd	r23, Y+40	; 0x28
    7b18:	89 a5       	ldd	r24, Y+41	; 0x29
    7b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    7b1c:	20 e0       	ldi	r18, 0x00	; 0
    7b1e:	30 e0       	ldi	r19, 0x00	; 0
    7b20:	4a e7       	ldi	r20, 0x7A	; 122
    7b22:	55 e4       	ldi	r21, 0x45	; 69
    7b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7b28:	dc 01       	movw	r26, r24
    7b2a:	cb 01       	movw	r24, r22
    7b2c:	8b a3       	std	Y+35, r24	; 0x23
    7b2e:	9c a3       	std	Y+36, r25	; 0x24
    7b30:	ad a3       	std	Y+37, r26	; 0x25
    7b32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7b34:	6b a1       	ldd	r22, Y+35	; 0x23
    7b36:	7c a1       	ldd	r23, Y+36	; 0x24
    7b38:	8d a1       	ldd	r24, Y+37	; 0x25
    7b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    7b3c:	20 e0       	ldi	r18, 0x00	; 0
    7b3e:	30 e0       	ldi	r19, 0x00	; 0
    7b40:	40 e8       	ldi	r20, 0x80	; 128
    7b42:	5f e3       	ldi	r21, 0x3F	; 63
    7b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7b48:	88 23       	and	r24, r24
    7b4a:	2c f4       	brge	.+10     	; 0x7b56 <HAL_CLCD_ReadDataBus+0x190>
		__ticks = 1;
    7b4c:	81 e0       	ldi	r24, 0x01	; 1
    7b4e:	90 e0       	ldi	r25, 0x00	; 0
    7b50:	9a a3       	std	Y+34, r25	; 0x22
    7b52:	89 a3       	std	Y+33, r24	; 0x21
    7b54:	3f c0       	rjmp	.+126    	; 0x7bd4 <HAL_CLCD_ReadDataBus+0x20e>
	else if (__tmp > 65535)
    7b56:	6b a1       	ldd	r22, Y+35	; 0x23
    7b58:	7c a1       	ldd	r23, Y+36	; 0x24
    7b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    7b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    7b5e:	20 e0       	ldi	r18, 0x00	; 0
    7b60:	3f ef       	ldi	r19, 0xFF	; 255
    7b62:	4f e7       	ldi	r20, 0x7F	; 127
    7b64:	57 e4       	ldi	r21, 0x47	; 71
    7b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7b6a:	18 16       	cp	r1, r24
    7b6c:	4c f5       	brge	.+82     	; 0x7bc0 <HAL_CLCD_ReadDataBus+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    7b70:	78 a5       	ldd	r23, Y+40	; 0x28
    7b72:	89 a5       	ldd	r24, Y+41	; 0x29
    7b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    7b76:	20 e0       	ldi	r18, 0x00	; 0
    7b78:	30 e0       	ldi	r19, 0x00	; 0
    7b7a:	40 e2       	ldi	r20, 0x20	; 32
    7b7c:	51 e4       	ldi	r21, 0x41	; 65
    7b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7b82:	dc 01       	movw	r26, r24
    7b84:	cb 01       	movw	r24, r22
    7b86:	bc 01       	movw	r22, r24
    7b88:	cd 01       	movw	r24, r26
    7b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7b8e:	dc 01       	movw	r26, r24
    7b90:	cb 01       	movw	r24, r22
    7b92:	9a a3       	std	Y+34, r25	; 0x22
    7b94:	89 a3       	std	Y+33, r24	; 0x21
    7b96:	0f c0       	rjmp	.+30     	; 0x7bb6 <HAL_CLCD_ReadDataBus+0x1f0>
    7b98:	80 e9       	ldi	r24, 0x90	; 144
    7b9a:	91 e0       	ldi	r25, 0x01	; 1
    7b9c:	98 a3       	std	Y+32, r25	; 0x20
    7b9e:	8f 8f       	std	Y+31, r24	; 0x1f
    7ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7ba2:	98 a1       	ldd	r25, Y+32	; 0x20
    7ba4:	01 97       	sbiw	r24, 0x01	; 1
    7ba6:	f1 f7       	brne	.-4      	; 0x7ba4 <HAL_CLCD_ReadDataBus+0x1de>
    7ba8:	98 a3       	std	Y+32, r25	; 0x20
    7baa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bac:	89 a1       	ldd	r24, Y+33	; 0x21
    7bae:	9a a1       	ldd	r25, Y+34	; 0x22
    7bb0:	01 97       	sbiw	r24, 0x01	; 1
    7bb2:	9a a3       	std	Y+34, r25	; 0x22
    7bb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    7bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    7bba:	00 97       	sbiw	r24, 0x00	; 0
    7bbc:	69 f7       	brne	.-38     	; 0x7b98 <HAL_CLCD_ReadDataBus+0x1d2>
    7bbe:	14 c0       	rjmp	.+40     	; 0x7be8 <HAL_CLCD_ReadDataBus+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    7bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    7bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    7bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    7bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7bcc:	dc 01       	movw	r26, r24
    7bce:	cb 01       	movw	r24, r22
    7bd0:	9a a3       	std	Y+34, r25	; 0x22
    7bd2:	89 a3       	std	Y+33, r24	; 0x21
    7bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    7bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    7bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    7bda:	8d 8f       	std	Y+29, r24	; 0x1d
    7bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7be0:	01 97       	sbiw	r24, 0x01	; 1
    7be2:	f1 f7       	brne	.-4      	; 0x7be0 <HAL_CLCD_ReadDataBus+0x21a>
    7be4:	9e 8f       	std	Y+30, r25	; 0x1e
    7be6:	8d 8f       	std	Y+29, r24	; 0x1d
    7be8:	ee ad       	ldd	r30, Y+62	; 0x3e
    7bea:	ff ad       	ldd	r31, Y+63	; 0x3f
    7bec:	80 81       	ld	r24, Z
    7bee:	81 70       	andi	r24, 0x01	; 1
    7bf0:	88 23       	and	r24, r24
    7bf2:	09 f4       	brne	.+2      	; 0x7bf6 <HAL_CLCD_ReadDataBus+0x230>
    7bf4:	74 c0       	rjmp	.+232    	; 0x7cde <HAL_CLCD_ReadDataBus+0x318>
    7bf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    7bf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    7bfa:	04 96       	adiw	r24, 0x04	; 4
    7bfc:	9e 01       	movw	r18, r28
    7bfe:	23 5c       	subi	r18, 0xC3	; 195
    7c00:	3f 4f       	sbci	r19, 0xFF	; 255
    7c02:	b9 01       	movw	r22, r18
    7c04:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7c08:	8d ad       	ldd	r24, Y+61	; 0x3d
    7c0a:	28 2f       	mov	r18, r24
    7c0c:	30 e0       	ldi	r19, 0x00	; 0
    7c0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    7c10:	88 2f       	mov	r24, r24
    7c12:	90 e0       	ldi	r25, 0x00	; 0
    7c14:	a9 01       	movw	r20, r18
    7c16:	02 c0       	rjmp	.+4      	; 0x7c1c <HAL_CLCD_ReadDataBus+0x256>
    7c18:	44 0f       	add	r20, r20
    7c1a:	55 1f       	adc	r21, r21
    7c1c:	8a 95       	dec	r24
    7c1e:	e2 f7       	brpl	.-8      	; 0x7c18 <HAL_CLCD_ReadDataBus+0x252>
    7c20:	ca 01       	movw	r24, r20
    7c22:	98 2f       	mov	r25, r24
    7c24:	89 ad       	ldd	r24, Y+57	; 0x39
    7c26:	89 2b       	or	r24, r25
    7c28:	89 af       	std	Y+57, r24	; 0x39
    7c2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    7c2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    7c2e:	05 96       	adiw	r24, 0x05	; 5
    7c30:	9e 01       	movw	r18, r28
    7c32:	23 5c       	subi	r18, 0xC3	; 195
    7c34:	3f 4f       	sbci	r19, 0xFF	; 255
    7c36:	b9 01       	movw	r22, r18
    7c38:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7c3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    7c3e:	28 2f       	mov	r18, r24
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	8b ad       	ldd	r24, Y+59	; 0x3b
    7c44:	8f 5f       	subi	r24, 0xFF	; 255
    7c46:	8b af       	std	Y+59, r24	; 0x3b
    7c48:	8b ad       	ldd	r24, Y+59	; 0x3b
    7c4a:	88 2f       	mov	r24, r24
    7c4c:	90 e0       	ldi	r25, 0x00	; 0
    7c4e:	a9 01       	movw	r20, r18
    7c50:	02 c0       	rjmp	.+4      	; 0x7c56 <HAL_CLCD_ReadDataBus+0x290>
    7c52:	44 0f       	add	r20, r20
    7c54:	55 1f       	adc	r21, r21
    7c56:	8a 95       	dec	r24
    7c58:	e2 f7       	brpl	.-8      	; 0x7c52 <HAL_CLCD_ReadDataBus+0x28c>
    7c5a:	ca 01       	movw	r24, r20
    7c5c:	98 2f       	mov	r25, r24
    7c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    7c60:	89 2b       	or	r24, r25
    7c62:	89 af       	std	Y+57, r24	; 0x39
    7c64:	8e ad       	ldd	r24, Y+62	; 0x3e
    7c66:	9f ad       	ldd	r25, Y+63	; 0x3f
    7c68:	06 96       	adiw	r24, 0x06	; 6
    7c6a:	9e 01       	movw	r18, r28
    7c6c:	23 5c       	subi	r18, 0xC3	; 195
    7c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    7c70:	b9 01       	movw	r22, r18
    7c72:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7c76:	8d ad       	ldd	r24, Y+61	; 0x3d
    7c78:	28 2f       	mov	r18, r24
    7c7a:	30 e0       	ldi	r19, 0x00	; 0
    7c7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    7c7e:	8f 5f       	subi	r24, 0xFF	; 255
    7c80:	8b af       	std	Y+59, r24	; 0x3b
    7c82:	8b ad       	ldd	r24, Y+59	; 0x3b
    7c84:	88 2f       	mov	r24, r24
    7c86:	90 e0       	ldi	r25, 0x00	; 0
    7c88:	a9 01       	movw	r20, r18
    7c8a:	02 c0       	rjmp	.+4      	; 0x7c90 <HAL_CLCD_ReadDataBus+0x2ca>
    7c8c:	44 0f       	add	r20, r20
    7c8e:	55 1f       	adc	r21, r21
    7c90:	8a 95       	dec	r24
    7c92:	e2 f7       	brpl	.-8      	; 0x7c8c <HAL_CLCD_ReadDataBus+0x2c6>
    7c94:	ca 01       	movw	r24, r20
    7c96:	98 2f       	mov	r25, r24
    7c98:	89 ad       	ldd	r24, Y+57	; 0x39
    7c9a:	89 2b       	or	r24, r25
    7c9c:	89 af       	std	Y+57, r24	; 0x39
    7c9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ca0:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ca2:	07 96       	adiw	r24, 0x07	; 7
    7ca4:	9e 01       	movw	r18, r28
    7ca6:	23 5c       	subi	r18, 0xC3	; 195
    7ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    7caa:	b9 01       	movw	r22, r18
    7cac:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7cb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    7cb2:	28 2f       	mov	r18, r24
    7cb4:	30 e0       	ldi	r19, 0x00	; 0
    7cb6:	8b ad       	ldd	r24, Y+59	; 0x3b
    7cb8:	8f 5f       	subi	r24, 0xFF	; 255
    7cba:	8b af       	std	Y+59, r24	; 0x3b
    7cbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    7cbe:	88 2f       	mov	r24, r24
    7cc0:	90 e0       	ldi	r25, 0x00	; 0
    7cc2:	a9 01       	movw	r20, r18
    7cc4:	02 c0       	rjmp	.+4      	; 0x7cca <HAL_CLCD_ReadDataBus+0x304>
    7cc6:	44 0f       	add	r20, r20
    7cc8:	55 1f       	adc	r21, r21
    7cca:	8a 95       	dec	r24
    7ccc:	e2 f7       	brpl	.-8      	; 0x7cc6 <HAL_CLCD_ReadDataBus+0x300>
    7cce:	ca 01       	movw	r24, r20
    7cd0:	98 2f       	mov	r25, r24
    7cd2:	89 ad       	ldd	r24, Y+57	; 0x39
    7cd4:	89 2b       	or	r24, r25
    7cd6:	89 af       	std	Y+57, r24	; 0x39
    7cd8:	8a ad       	ldd	r24, Y+58	; 0x3a
    7cda:	81 50       	subi	r24, 0x01	; 1
    7cdc:	8a af       	std	Y+58, r24	; 0x3a
    7cde:	84 e0       	ldi	r24, 0x04	; 4
    7ce0:	8b af       	std	Y+59, r24	; 0x3b
    7ce2:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ce4:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ce6:	08 96       	adiw	r24, 0x08	; 8
    7ce8:	9e 01       	movw	r18, r28
    7cea:	23 5c       	subi	r18, 0xC3	; 195
    7cec:	3f 4f       	sbci	r19, 0xFF	; 255
    7cee:	b9 01       	movw	r22, r18
    7cf0:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7cf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    7cf6:	28 2f       	mov	r18, r24
    7cf8:	30 e0       	ldi	r19, 0x00	; 0
    7cfa:	8b ad       	ldd	r24, Y+59	; 0x3b
    7cfc:	88 2f       	mov	r24, r24
    7cfe:	90 e0       	ldi	r25, 0x00	; 0
    7d00:	a9 01       	movw	r20, r18
    7d02:	02 c0       	rjmp	.+4      	; 0x7d08 <HAL_CLCD_ReadDataBus+0x342>
    7d04:	44 0f       	add	r20, r20
    7d06:	55 1f       	adc	r21, r21
    7d08:	8a 95       	dec	r24
    7d0a:	e2 f7       	brpl	.-8      	; 0x7d04 <HAL_CLCD_ReadDataBus+0x33e>
    7d0c:	ca 01       	movw	r24, r20
    7d0e:	98 2f       	mov	r25, r24
    7d10:	89 ad       	ldd	r24, Y+57	; 0x39
    7d12:	89 2b       	or	r24, r25
    7d14:	89 af       	std	Y+57, r24	; 0x39
    7d16:	8e ad       	ldd	r24, Y+62	; 0x3e
    7d18:	9f ad       	ldd	r25, Y+63	; 0x3f
    7d1a:	09 96       	adiw	r24, 0x09	; 9
    7d1c:	9e 01       	movw	r18, r28
    7d1e:	23 5c       	subi	r18, 0xC3	; 195
    7d20:	3f 4f       	sbci	r19, 0xFF	; 255
    7d22:	b9 01       	movw	r22, r18
    7d24:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7d28:	8d ad       	ldd	r24, Y+61	; 0x3d
    7d2a:	28 2f       	mov	r18, r24
    7d2c:	30 e0       	ldi	r19, 0x00	; 0
    7d2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    7d30:	8f 5f       	subi	r24, 0xFF	; 255
    7d32:	8b af       	std	Y+59, r24	; 0x3b
    7d34:	8b ad       	ldd	r24, Y+59	; 0x3b
    7d36:	88 2f       	mov	r24, r24
    7d38:	90 e0       	ldi	r25, 0x00	; 0
    7d3a:	a9 01       	movw	r20, r18
    7d3c:	02 c0       	rjmp	.+4      	; 0x7d42 <HAL_CLCD_ReadDataBus+0x37c>
    7d3e:	44 0f       	add	r20, r20
    7d40:	55 1f       	adc	r21, r21
    7d42:	8a 95       	dec	r24
    7d44:	e2 f7       	brpl	.-8      	; 0x7d3e <HAL_CLCD_ReadDataBus+0x378>
    7d46:	ca 01       	movw	r24, r20
    7d48:	98 2f       	mov	r25, r24
    7d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    7d4c:	89 2b       	or	r24, r25
    7d4e:	89 af       	std	Y+57, r24	; 0x39
    7d50:	8e ad       	ldd	r24, Y+62	; 0x3e
    7d52:	9f ad       	ldd	r25, Y+63	; 0x3f
    7d54:	0a 96       	adiw	r24, 0x0a	; 10
    7d56:	9e 01       	movw	r18, r28
    7d58:	23 5c       	subi	r18, 0xC3	; 195
    7d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d5c:	b9 01       	movw	r22, r18
    7d5e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    7d64:	28 2f       	mov	r18, r24
    7d66:	30 e0       	ldi	r19, 0x00	; 0
    7d68:	8b ad       	ldd	r24, Y+59	; 0x3b
    7d6a:	8f 5f       	subi	r24, 0xFF	; 255
    7d6c:	8b af       	std	Y+59, r24	; 0x3b
    7d6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    7d70:	88 2f       	mov	r24, r24
    7d72:	90 e0       	ldi	r25, 0x00	; 0
    7d74:	a9 01       	movw	r20, r18
    7d76:	02 c0       	rjmp	.+4      	; 0x7d7c <HAL_CLCD_ReadDataBus+0x3b6>
    7d78:	44 0f       	add	r20, r20
    7d7a:	55 1f       	adc	r21, r21
    7d7c:	8a 95       	dec	r24
    7d7e:	e2 f7       	brpl	.-8      	; 0x7d78 <HAL_CLCD_ReadDataBus+0x3b2>
    7d80:	ca 01       	movw	r24, r20
    7d82:	98 2f       	mov	r25, r24
    7d84:	89 ad       	ldd	r24, Y+57	; 0x39
    7d86:	89 2b       	or	r24, r25
    7d88:	89 af       	std	Y+57, r24	; 0x39
    7d8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    7d8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    7d8e:	0b 96       	adiw	r24, 0x0b	; 11
    7d90:	9e 01       	movw	r18, r28
    7d92:	23 5c       	subi	r18, 0xC3	; 195
    7d94:	3f 4f       	sbci	r19, 0xFF	; 255
    7d96:	b9 01       	movw	r22, r18
    7d98:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    7d9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    7d9e:	28 2f       	mov	r18, r24
    7da0:	30 e0       	ldi	r19, 0x00	; 0
    7da2:	8b ad       	ldd	r24, Y+59	; 0x3b
    7da4:	8f 5f       	subi	r24, 0xFF	; 255
    7da6:	8b af       	std	Y+59, r24	; 0x3b
    7da8:	8b ad       	ldd	r24, Y+59	; 0x3b
    7daa:	88 2f       	mov	r24, r24
    7dac:	90 e0       	ldi	r25, 0x00	; 0
    7dae:	a9 01       	movw	r20, r18
    7db0:	02 c0       	rjmp	.+4      	; 0x7db6 <HAL_CLCD_ReadDataBus+0x3f0>
    7db2:	44 0f       	add	r20, r20
    7db4:	55 1f       	adc	r21, r21
    7db6:	8a 95       	dec	r24
    7db8:	e2 f7       	brpl	.-8      	; 0x7db2 <HAL_CLCD_ReadDataBus+0x3ec>
    7dba:	ca 01       	movw	r24, r20
    7dbc:	98 2f       	mov	r25, r24
    7dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    7dc0:	89 2b       	or	r24, r25
    7dc2:	89 af       	std	Y+57, r24	; 0x39
    7dc4:	8a ad       	ldd	r24, Y+58	; 0x3a
    7dc6:	81 50       	subi	r24, 0x01	; 1
    7dc8:	8a af       	std	Y+58, r24	; 0x3a
    7dca:	1b ae       	std	Y+59, r1	; 0x3b
    7dcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    7dce:	9f ad       	ldd	r25, Y+63	; 0x3f
    7dd0:	01 96       	adiw	r24, 0x01	; 1
    7dd2:	61 e0       	ldi	r22, 0x01	; 1
    7dd4:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7dd8:	80 e0       	ldi	r24, 0x00	; 0
    7dda:	90 e0       	ldi	r25, 0x00	; 0
    7ddc:	a0 e8       	ldi	r26, 0x80	; 128
    7dde:	bf e3       	ldi	r27, 0x3F	; 63
    7de0:	89 8f       	std	Y+25, r24	; 0x19
    7de2:	9a 8f       	std	Y+26, r25	; 0x1a
    7de4:	ab 8f       	std	Y+27, r26	; 0x1b
    7de6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7de8:	69 8d       	ldd	r22, Y+25	; 0x19
    7dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7df0:	20 e0       	ldi	r18, 0x00	; 0
    7df2:	30 e0       	ldi	r19, 0x00	; 0
    7df4:	4a e7       	ldi	r20, 0x7A	; 122
    7df6:	55 e4       	ldi	r21, 0x45	; 69
    7df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7dfc:	dc 01       	movw	r26, r24
    7dfe:	cb 01       	movw	r24, r22
    7e00:	8d 8b       	std	Y+21, r24	; 0x15
    7e02:	9e 8b       	std	Y+22, r25	; 0x16
    7e04:	af 8b       	std	Y+23, r26	; 0x17
    7e06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7e08:	6d 89       	ldd	r22, Y+21	; 0x15
    7e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    7e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    7e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    7e10:	20 e0       	ldi	r18, 0x00	; 0
    7e12:	30 e0       	ldi	r19, 0x00	; 0
    7e14:	40 e8       	ldi	r20, 0x80	; 128
    7e16:	5f e3       	ldi	r21, 0x3F	; 63
    7e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7e1c:	88 23       	and	r24, r24
    7e1e:	2c f4       	brge	.+10     	; 0x7e2a <HAL_CLCD_ReadDataBus+0x464>
		__ticks = 1;
    7e20:	81 e0       	ldi	r24, 0x01	; 1
    7e22:	90 e0       	ldi	r25, 0x00	; 0
    7e24:	9c 8b       	std	Y+20, r25	; 0x14
    7e26:	8b 8b       	std	Y+19, r24	; 0x13
    7e28:	3f c0       	rjmp	.+126    	; 0x7ea8 <HAL_CLCD_ReadDataBus+0x4e2>
	else if (__tmp > 65535)
    7e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    7e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    7e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    7e30:	98 8d       	ldd	r25, Y+24	; 0x18
    7e32:	20 e0       	ldi	r18, 0x00	; 0
    7e34:	3f ef       	ldi	r19, 0xFF	; 255
    7e36:	4f e7       	ldi	r20, 0x7F	; 127
    7e38:	57 e4       	ldi	r21, 0x47	; 71
    7e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7e3e:	18 16       	cp	r1, r24
    7e40:	4c f5       	brge	.+82     	; 0x7e94 <HAL_CLCD_ReadDataBus+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e42:	69 8d       	ldd	r22, Y+25	; 0x19
    7e44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7e4a:	20 e0       	ldi	r18, 0x00	; 0
    7e4c:	30 e0       	ldi	r19, 0x00	; 0
    7e4e:	40 e2       	ldi	r20, 0x20	; 32
    7e50:	51 e4       	ldi	r21, 0x41	; 65
    7e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e56:	dc 01       	movw	r26, r24
    7e58:	cb 01       	movw	r24, r22
    7e5a:	bc 01       	movw	r22, r24
    7e5c:	cd 01       	movw	r24, r26
    7e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e62:	dc 01       	movw	r26, r24
    7e64:	cb 01       	movw	r24, r22
    7e66:	9c 8b       	std	Y+20, r25	; 0x14
    7e68:	8b 8b       	std	Y+19, r24	; 0x13
    7e6a:	0f c0       	rjmp	.+30     	; 0x7e8a <HAL_CLCD_ReadDataBus+0x4c4>
    7e6c:	80 e9       	ldi	r24, 0x90	; 144
    7e6e:	91 e0       	ldi	r25, 0x01	; 1
    7e70:	9a 8b       	std	Y+18, r25	; 0x12
    7e72:	89 8b       	std	Y+17, r24	; 0x11
    7e74:	89 89       	ldd	r24, Y+17	; 0x11
    7e76:	9a 89       	ldd	r25, Y+18	; 0x12
    7e78:	01 97       	sbiw	r24, 0x01	; 1
    7e7a:	f1 f7       	brne	.-4      	; 0x7e78 <HAL_CLCD_ReadDataBus+0x4b2>
    7e7c:	9a 8b       	std	Y+18, r25	; 0x12
    7e7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e80:	8b 89       	ldd	r24, Y+19	; 0x13
    7e82:	9c 89       	ldd	r25, Y+20	; 0x14
    7e84:	01 97       	sbiw	r24, 0x01	; 1
    7e86:	9c 8b       	std	Y+20, r25	; 0x14
    7e88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    7e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    7e8e:	00 97       	sbiw	r24, 0x00	; 0
    7e90:	69 f7       	brne	.-38     	; 0x7e6c <HAL_CLCD_ReadDataBus+0x4a6>
    7e92:	14 c0       	rjmp	.+40     	; 0x7ebc <HAL_CLCD_ReadDataBus+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e94:	6d 89       	ldd	r22, Y+21	; 0x15
    7e96:	7e 89       	ldd	r23, Y+22	; 0x16
    7e98:	8f 89       	ldd	r24, Y+23	; 0x17
    7e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    7e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7ea0:	dc 01       	movw	r26, r24
    7ea2:	cb 01       	movw	r24, r22
    7ea4:	9c 8b       	std	Y+20, r25	; 0x14
    7ea6:	8b 8b       	std	Y+19, r24	; 0x13
    7ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    7eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    7eac:	98 8b       	std	Y+16, r25	; 0x10
    7eae:	8f 87       	std	Y+15, r24	; 0x0f
    7eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    7eb2:	98 89       	ldd	r25, Y+16	; 0x10
    7eb4:	01 97       	sbiw	r24, 0x01	; 1
    7eb6:	f1 f7       	brne	.-4      	; 0x7eb4 <HAL_CLCD_ReadDataBus+0x4ee>
    7eb8:	98 8b       	std	Y+16, r25	; 0x10
    7eba:	8f 87       	std	Y+15, r24	; 0x0f
    7ebc:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ebe:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ec0:	01 96       	adiw	r24, 0x01	; 1
    7ec2:	60 e0       	ldi	r22, 0x00	; 0
    7ec4:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	a0 ea       	ldi	r26, 0xA0	; 160
    7ece:	b0 e4       	ldi	r27, 0x40	; 64
    7ed0:	8b 87       	std	Y+11, r24	; 0x0b
    7ed2:	9c 87       	std	Y+12, r25	; 0x0c
    7ed4:	ad 87       	std	Y+13, r26	; 0x0d
    7ed6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    7eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    7edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ee0:	20 e0       	ldi	r18, 0x00	; 0
    7ee2:	30 e0       	ldi	r19, 0x00	; 0
    7ee4:	4a e7       	ldi	r20, 0x7A	; 122
    7ee6:	55 e4       	ldi	r21, 0x45	; 69
    7ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7eec:	dc 01       	movw	r26, r24
    7eee:	cb 01       	movw	r24, r22
    7ef0:	8f 83       	std	Y+7, r24	; 0x07
    7ef2:	98 87       	std	Y+8, r25	; 0x08
    7ef4:	a9 87       	std	Y+9, r26	; 0x09
    7ef6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    7efa:	78 85       	ldd	r23, Y+8	; 0x08
    7efc:	89 85       	ldd	r24, Y+9	; 0x09
    7efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f00:	20 e0       	ldi	r18, 0x00	; 0
    7f02:	30 e0       	ldi	r19, 0x00	; 0
    7f04:	40 e8       	ldi	r20, 0x80	; 128
    7f06:	5f e3       	ldi	r21, 0x3F	; 63
    7f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7f0c:	88 23       	and	r24, r24
    7f0e:	2c f4       	brge	.+10     	; 0x7f1a <HAL_CLCD_ReadDataBus+0x554>
		__ticks = 1;
    7f10:	81 e0       	ldi	r24, 0x01	; 1
    7f12:	90 e0       	ldi	r25, 0x00	; 0
    7f14:	9e 83       	std	Y+6, r25	; 0x06
    7f16:	8d 83       	std	Y+5, r24	; 0x05
    7f18:	3f c0       	rjmp	.+126    	; 0x7f98 <HAL_CLCD_ReadDataBus+0x5d2>
	else if (__tmp > 65535)
    7f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    7f1c:	78 85       	ldd	r23, Y+8	; 0x08
    7f1e:	89 85       	ldd	r24, Y+9	; 0x09
    7f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f22:	20 e0       	ldi	r18, 0x00	; 0
    7f24:	3f ef       	ldi	r19, 0xFF	; 255
    7f26:	4f e7       	ldi	r20, 0x7F	; 127
    7f28:	57 e4       	ldi	r21, 0x47	; 71
    7f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7f2e:	18 16       	cp	r1, r24
    7f30:	4c f5       	brge	.+82     	; 0x7f84 <HAL_CLCD_ReadDataBus+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f32:	6b 85       	ldd	r22, Y+11	; 0x0b
    7f34:	7c 85       	ldd	r23, Y+12	; 0x0c
    7f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    7f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    7f3a:	20 e0       	ldi	r18, 0x00	; 0
    7f3c:	30 e0       	ldi	r19, 0x00	; 0
    7f3e:	40 e2       	ldi	r20, 0x20	; 32
    7f40:	51 e4       	ldi	r21, 0x41	; 65
    7f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7f46:	dc 01       	movw	r26, r24
    7f48:	cb 01       	movw	r24, r22
    7f4a:	bc 01       	movw	r22, r24
    7f4c:	cd 01       	movw	r24, r26
    7f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f52:	dc 01       	movw	r26, r24
    7f54:	cb 01       	movw	r24, r22
    7f56:	9e 83       	std	Y+6, r25	; 0x06
    7f58:	8d 83       	std	Y+5, r24	; 0x05
    7f5a:	0f c0       	rjmp	.+30     	; 0x7f7a <HAL_CLCD_ReadDataBus+0x5b4>
    7f5c:	80 e9       	ldi	r24, 0x90	; 144
    7f5e:	91 e0       	ldi	r25, 0x01	; 1
    7f60:	9c 83       	std	Y+4, r25	; 0x04
    7f62:	8b 83       	std	Y+3, r24	; 0x03
    7f64:	8b 81       	ldd	r24, Y+3	; 0x03
    7f66:	9c 81       	ldd	r25, Y+4	; 0x04
    7f68:	01 97       	sbiw	r24, 0x01	; 1
    7f6a:	f1 f7       	brne	.-4      	; 0x7f68 <HAL_CLCD_ReadDataBus+0x5a2>
    7f6c:	9c 83       	std	Y+4, r25	; 0x04
    7f6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f70:	8d 81       	ldd	r24, Y+5	; 0x05
    7f72:	9e 81       	ldd	r25, Y+6	; 0x06
    7f74:	01 97       	sbiw	r24, 0x01	; 1
    7f76:	9e 83       	std	Y+6, r25	; 0x06
    7f78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    7f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    7f7e:	00 97       	sbiw	r24, 0x00	; 0
    7f80:	69 f7       	brne	.-38     	; 0x7f5c <HAL_CLCD_ReadDataBus+0x596>
    7f82:	14 c0       	rjmp	.+40     	; 0x7fac <HAL_CLCD_ReadDataBus+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f84:	6f 81       	ldd	r22, Y+7	; 0x07
    7f86:	78 85       	ldd	r23, Y+8	; 0x08
    7f88:	89 85       	ldd	r24, Y+9	; 0x09
    7f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f90:	dc 01       	movw	r26, r24
    7f92:	cb 01       	movw	r24, r22
    7f94:	9e 83       	std	Y+6, r25	; 0x06
    7f96:	8d 83       	std	Y+5, r24	; 0x05
    7f98:	8d 81       	ldd	r24, Y+5	; 0x05
    7f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    7f9c:	9a 83       	std	Y+2, r25	; 0x02
    7f9e:	89 83       	std	Y+1, r24	; 0x01
    7fa0:	89 81       	ldd	r24, Y+1	; 0x01
    7fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    7fa4:	01 97       	sbiw	r24, 0x01	; 1
    7fa6:	f1 f7       	brne	.-4      	; 0x7fa4 <HAL_CLCD_ReadDataBus+0x5de>
    7fa8:	9a 83       	std	Y+2, r25	; 0x02
    7faa:	89 83       	std	Y+1, r24	; 0x01
    7fac:	8a ad       	ldd	r24, Y+58	; 0x3a
    7fae:	88 23       	and	r24, r24
    7fb0:	09 f0       	breq	.+2      	; 0x7fb4 <HAL_CLCD_ReadDataBus+0x5ee>
    7fb2:	97 ce       	rjmp	.-722    	; 0x7ce2 <HAL_CLCD_ReadDataBus+0x31c>
    7fb4:	fe 01       	movw	r30, r28
    7fb6:	e0 5c       	subi	r30, 0xC0	; 192
    7fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    7fba:	80 81       	ld	r24, Z
    7fbc:	88 30       	cpi	r24, 0x08	; 8
    7fbe:	f9 f4       	brne	.+62     	; 0x7ffe <HAL_CLCD_ReadDataBus+0x638>
    7fc0:	89 ad       	ldd	r24, Y+57	; 0x39
    7fc2:	88 1f       	adc	r24, r24
    7fc4:	88 27       	eor	r24, r24
    7fc6:	88 1f       	adc	r24, r24
    7fc8:	81 70       	andi	r24, 0x01	; 1
    7fca:	fe 01       	movw	r30, r28
    7fcc:	ef 5b       	subi	r30, 0xBF	; 191
    7fce:	ff 4f       	sbci	r31, 0xFF	; 255
    7fd0:	01 90       	ld	r0, Z+
    7fd2:	f0 81       	ld	r31, Z
    7fd4:	e0 2d       	mov	r30, r0
    7fd6:	98 2f       	mov	r25, r24
    7fd8:	97 95       	ror	r25
    7fda:	99 27       	eor	r25, r25
    7fdc:	97 95       	ror	r25
    7fde:	80 81       	ld	r24, Z
    7fe0:	8f 77       	andi	r24, 0x7F	; 127
    7fe2:	89 2b       	or	r24, r25
    7fe4:	80 83       	st	Z, r24
    7fe6:	89 ad       	ldd	r24, Y+57	; 0x39
    7fe8:	8f 77       	andi	r24, 0x7F	; 127
    7fea:	fe 01       	movw	r30, r28
    7fec:	ef 5b       	subi	r30, 0xBF	; 191
    7fee:	ff 4f       	sbci	r31, 0xFF	; 255
    7ff0:	01 90       	ld	r0, Z+
    7ff2:	f0 81       	ld	r31, Z
    7ff4:	e0 2d       	mov	r30, r0
    7ff6:	86 83       	std	Z+6, r24	; 0x06
    7ff8:	81 e0       	ldi	r24, 0x01	; 1
    7ffa:	8c af       	std	Y+60, r24	; 0x3c
    7ffc:	10 c0       	rjmp	.+32     	; 0x801e <HAL_CLCD_ReadDataBus+0x658>
    7ffe:	fe 01       	movw	r30, r28
    8000:	e0 5c       	subi	r30, 0xC0	; 192
    8002:	ff 4f       	sbci	r31, 0xFF	; 255
    8004:	80 81       	ld	r24, Z
    8006:	8a 30       	cpi	r24, 0x0A	; 10
    8008:	51 f4       	brne	.+20     	; 0x801e <HAL_CLCD_ReadDataBus+0x658>
    800a:	fe 01       	movw	r30, r28
    800c:	ef 5b       	subi	r30, 0xBF	; 191
    800e:	ff 4f       	sbci	r31, 0xFF	; 255
    8010:	01 90       	ld	r0, Z+
    8012:	f0 81       	ld	r31, Z
    8014:	e0 2d       	mov	r30, r0
    8016:	89 ad       	ldd	r24, Y+57	; 0x39
    8018:	80 87       	std	Z+8, r24	; 0x08
    801a:	81 e0       	ldi	r24, 0x01	; 1
    801c:	8c af       	std	Y+60, r24	; 0x3c
    801e:	8c ad       	ldd	r24, Y+60	; 0x3c
    8020:	ce 5b       	subi	r28, 0xBE	; 190
    8022:	df 4f       	sbci	r29, 0xFF	; 255
    8024:	0f b6       	in	r0, 0x3f	; 63
    8026:	f8 94       	cli
    8028:	de bf       	out	0x3e, r29	; 62
    802a:	0f be       	out	0x3f, r0	; 63
    802c:	cd bf       	out	0x3d, r28	; 61
    802e:	cf 91       	pop	r28
    8030:	df 91       	pop	r29
    8032:	08 95       	ret

00008034 <HAL_KeyPad_KeyPadInit>:
#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
    8034:	df 93       	push	r29
    8036:	cf 93       	push	r28
    8038:	00 d0       	rcall	.+0      	; 0x803a <HAL_KeyPad_KeyPadInit+0x6>
    803a:	00 d0       	rcall	.+0      	; 0x803c <HAL_KeyPad_KeyPadInit+0x8>
    803c:	cd b7       	in	r28, 0x3d	; 61
    803e:	de b7       	in	r29, 0x3e	; 62
    8040:	9c 83       	std	Y+4, r25	; 0x04
    8042:	8b 83       	std	Y+3, r24	; 0x03
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;
    8044:	1a 82       	std	Y+2, r1	; 0x02

    8046:	19 82       	std	Y+1, r1	; 0x01
    8048:	2d c0       	rjmp	.+90     	; 0x80a4 <HAL_KeyPad_KeyPadInit+0x70>

/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
    804a:	89 81       	ldd	r24, Y+1	; 0x01
    804c:	28 2f       	mov	r18, r24
    804e:	30 e0       	ldi	r19, 0x00	; 0
    8050:	8b 81       	ldd	r24, Y+3	; 0x03
    8052:	9c 81       	ldd	r25, Y+4	; 0x04
    8054:	fc 01       	movw	r30, r24
    8056:	e2 0f       	add	r30, r18
    8058:	f3 1f       	adc	r31, r19
    805a:	80 81       	ld	r24, Z
    805c:	8f 79       	andi	r24, 0x9F	; 159
    805e:	80 83       	st	Z, r24
{
    8060:	2b 81       	ldd	r18, Y+3	; 0x03
    8062:	3c 81       	ldd	r19, Y+4	; 0x04
    8064:	89 81       	ldd	r24, Y+1	; 0x01
    8066:	88 2f       	mov	r24, r24
    8068:	90 e0       	ldi	r25, 0x00	; 0
    806a:	82 0f       	add	r24, r18
    806c:	93 1f       	adc	r25, r19
    806e:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    8072:	88 23       	and	r24, r24
    8074:	11 f4       	brne	.+4      	; 0x807a <HAL_KeyPad_KeyPadInit+0x46>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	if(Copy_EXTIntStatus == INT_DISABLE)
    8076:	1a 82       	std	Y+2, r1	; 0x02
    8078:	18 c0       	rjmp	.+48     	; 0x80aa <HAL_KeyPad_KeyPadInit+0x76>
    {
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
		Local_ErrorStatus = E_OK;
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
    807a:	81 e0       	ldi	r24, 0x01	; 1
    807c:	8a 83       	std	Y+2, r24	; 0x02
	{
		switch(Copy_EXTInt.INTNum)
    807e:	2b 81       	ldd	r18, Y+3	; 0x03
    8080:	3c 81       	ldd	r19, Y+4	; 0x04
    8082:	89 81       	ldd	r24, Y+1	; 0x01
    8084:	88 2f       	mov	r24, r24
    8086:	90 e0       	ldi	r25, 0x00	; 0
    8088:	82 0f       	add	r24, r18
    808a:	93 1f       	adc	r25, r19
    808c:	60 e0       	ldi	r22, 0x00	; 0
    808e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
    8092:	88 23       	and	r24, r24
    8094:	11 f4       	brne	.+4      	; 0x809a <HAL_KeyPad_KeyPadInit+0x66>
	    {
	    case EXTINT0:
    8096:	1a 82       	std	Y+2, r1	; 0x02
    8098:	08 c0       	rjmp	.+16     	; 0x80aa <HAL_KeyPad_KeyPadInit+0x76>
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
            Local_ErrorStatus = E_OK;
	    	break;
    809a:	81 e0       	ldi	r24, 0x01	; 1
    809c:	8a 83       	std	Y+2, r24	; 0x02

void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;


    809e:	89 81       	ldd	r24, Y+1	; 0x01
    80a0:	8f 5f       	subi	r24, 0xFF	; 255
    80a2:	89 83       	std	Y+1, r24	; 0x01
    80a4:	89 81       	ldd	r24, Y+1	; 0x01
    80a6:	84 30       	cpi	r24, 0x04	; 4
    80a8:	80 f2       	brcs	.-96     	; 0x804a <HAL_KeyPad_KeyPadInit+0x16>
	    	SET_BIT(GICR_REG, EXTINT0);
            Local_ErrorStatus = E_OK;
	    	break;
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    80aa:	8a 81       	ldd	r24, Y+2	; 0x02
    80ac:	88 23       	and	r24, r24
    80ae:	39 f1       	breq	.+78     	; 0x80fe <HAL_KeyPad_KeyPadInit+0xca>
	    	SET_BIT(GICR_REG, EXTINT1);
	    	Local_ErrorStatus = E_OK;
	    	break;
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
	    	{
    80b0:	19 82       	std	Y+1, r1	; 0x01
    80b2:	22 c0       	rjmp	.+68     	; 0x80f8 <HAL_KeyPad_KeyPadInit+0xc4>
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    		SET_BIT(GICR_REG, EXTINT2);
    80b4:	89 81       	ldd	r24, Y+1	; 0x01
    80b6:	28 2f       	mov	r18, r24
    80b8:	30 e0       	ldi	r19, 0x00	; 0
    80ba:	8b 81       	ldd	r24, Y+3	; 0x03
    80bc:	9c 81       	ldd	r25, Y+4	; 0x04
    80be:	82 0f       	add	r24, r18
    80c0:	93 1f       	adc	r25, r19
    80c2:	fc 01       	movw	r30, r24
    80c4:	34 96       	adiw	r30, 0x04	; 4
    80c6:	80 81       	ld	r24, Z
    80c8:	8f 79       	andi	r24, 0x9F	; 159
    80ca:	80 62       	ori	r24, 0x20	; 32
    80cc:	80 83       	st	Z, r24
	    	    Local_ErrorStatus = E_OK;
    80ce:	8b 81       	ldd	r24, Y+3	; 0x03
    80d0:	9c 81       	ldd	r25, Y+4	; 0x04
    80d2:	9c 01       	movw	r18, r24
    80d4:	2c 5f       	subi	r18, 0xFC	; 252
    80d6:	3f 4f       	sbci	r19, 0xFF	; 255
    80d8:	89 81       	ldd	r24, Y+1	; 0x01
    80da:	88 2f       	mov	r24, r24
    80dc:	90 e0       	ldi	r25, 0x00	; 0
    80de:	82 0f       	add	r24, r18
    80e0:	93 1f       	adc	r25, r19
    80e2:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
    80e6:	88 23       	and	r24, r24
    80e8:	11 f4       	brne	.+4      	; 0x80ee <HAL_KeyPad_KeyPadInit+0xba>
	    	}
	    	else
    80ea:	1a 82       	std	Y+2, r1	; 0x02
    80ec:	08 c0       	rjmp	.+16     	; 0x80fe <HAL_KeyPad_KeyPadInit+0xca>
	    	{
	    		Local_ErrorStatus = E_NOT_OK;
	    	}
	    	break;
	    default:
    80ee:	81 e0       	ldi	r24, 0x01	; 1
    80f0:	8a 83       	std	Y+2, r24	; 0x02
	    	Local_ErrorStatus = E_OK;
	    	break;
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
    80f2:	89 81       	ldd	r24, Y+1	; 0x01
    80f4:	8f 5f       	subi	r24, 0xFF	; 255
    80f6:	89 83       	std	Y+1, r24	; 0x01
    80f8:	89 81       	ldd	r24, Y+1	; 0x01
    80fa:	84 30       	cpi	r24, 0x04	; 4
    80fc:	d8 f2       	brcs	.-74     	; 0x80b4 <HAL_KeyPad_KeyPadInit+0x80>
	    	break;
	    default:
	    	Local_ErrorStatus = E_NOT_OK;
	}
	}
	return Local_ErrorStatus;
    80fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    8100:	0f 90       	pop	r0
    8102:	0f 90       	pop	r0
    8104:	0f 90       	pop	r0
    8106:	0f 90       	pop	r0
    8108:	cf 91       	pop	r28
    810a:	df 91       	pop	r29
    810c:	08 95       	ret

0000810e <HAL_KeyPad_KeyPadReadCharacter>:
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
{
    810e:	df 93       	push	r29
    8110:	cf 93       	push	r28
    8112:	cd b7       	in	r28, 0x3d	; 61
    8114:	de b7       	in	r29, 0x3e	; 62
    8116:	66 97       	sbiw	r28, 0x16	; 22
    8118:	0f b6       	in	r0, 0x3f	; 63
    811a:	f8 94       	cli
    811c:	de bf       	out	0x3e, r29	; 62
    811e:	0f be       	out	0x3f, r0	; 63
    8120:	cd bf       	out	0x3d, r28	; 61
    8122:	9c 8b       	std	Y+20, r25	; 0x14
    8124:	8b 8b       	std	Y+19, r24	; 0x13
    8126:	7e 8b       	std	Y+22, r23	; 0x16
    8128:	6d 8b       	std	Y+21, r22	; 0x15
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    812a:	19 8a       	std	Y+17, r1	; 0x11
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    812c:	18 8a       	std	Y+16, r1	; 0x10
	Local_ErrorStatus = E_OK;
    812e:	1f 86       	std	Y+15, r1	; 0x0f
	return Local_ErrorStatus;
    8130:	1a 8a       	std	Y+18, r1	; 0x12
}
    8132:	ed 89       	ldd	r30, Y+21	; 0x15
    8134:	fe 89       	ldd	r31, Y+22	; 0x16
    8136:	10 82       	st	Z, r1
    8138:	db c0       	rjmp	.+438    	; 0x82f0 <HAL_KeyPad_KeyPadReadCharacter+0x1e2>
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    813a:	8b 89       	ldd	r24, Y+19	; 0x13
    813c:	9c 89       	ldd	r25, Y+20	; 0x14
    813e:	9c 01       	movw	r18, r24
    8140:	88 89       	ldd	r24, Y+16	; 0x10
    8142:	88 2f       	mov	r24, r24
    8144:	90 e0       	ldi	r25, 0x00	; 0
    8146:	82 0f       	add	r24, r18
    8148:	93 1f       	adc	r25, r19
    814a:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
    814e:	88 23       	and	r24, r24
    8150:	11 f4       	brne	.+4      	; 0x8156 <HAL_KeyPad_KeyPadReadCharacter+0x48>
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
    8152:	19 8a       	std	Y+17, r1	; 0x11
    8154:	d1 c0       	rjmp	.+418    	; 0x82f8 <HAL_KeyPad_KeyPadReadCharacter+0x1ea>
	return Local_ErrorStatus;
}
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
{
    8156:	81 e0       	ldi	r24, 0x01	; 1
    8158:	89 8b       	std	Y+17, r24	; 0x11
    815a:	b8 c0       	rjmp	.+368    	; 0x82cc <HAL_KeyPad_KeyPadReadCharacter+0x1be>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    815c:	8b 89       	ldd	r24, Y+19	; 0x13
    815e:	9c 89       	ldd	r25, Y+20	; 0x14
    8160:	9c 01       	movw	r18, r24
    8162:	2c 5f       	subi	r18, 0xFC	; 252
    8164:	3f 4f       	sbci	r19, 0xFF	; 255
    8166:	8f 85       	ldd	r24, Y+15	; 0x0f
    8168:	88 2f       	mov	r24, r24
    816a:	90 e0       	ldi	r25, 0x00	; 0
    816c:	82 0f       	add	r24, r18
    816e:	93 1f       	adc	r25, r19
    8170:	9e 01       	movw	r18, r28
    8172:	2e 5e       	subi	r18, 0xEE	; 238
    8174:	3f 4f       	sbci	r19, 0xFF	; 255
    8176:	b9 01       	movw	r22, r18
    8178:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    817c:	88 23       	and	r24, r24
    817e:	11 f4       	brne	.+4      	; 0x8184 <HAL_KeyPad_KeyPadReadCharacter+0x76>
}
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
    8180:	19 8a       	std	Y+17, r1	; 0x11
    8182:	a8 c0       	rjmp	.+336    	; 0x82d4 <HAL_KeyPad_KeyPadReadCharacter+0x1c6>
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    8184:	81 e0       	ldi	r24, 0x01	; 1
    8186:	89 8b       	std	Y+17, r24	; 0x11
}
    8188:	8a 89       	ldd	r24, Y+18	; 0x12
    818a:	81 30       	cpi	r24, 0x01	; 1
    818c:	09 f0       	breq	.+2      	; 0x8190 <HAL_KeyPad_KeyPadReadCharacter+0x82>
    818e:	9b c0       	rjmp	.+310    	; 0x82c6 <HAL_KeyPad_KeyPadReadCharacter+0x1b8>
    8190:	80 e0       	ldi	r24, 0x00	; 0
    8192:	90 e0       	ldi	r25, 0x00	; 0
    8194:	a0 ef       	ldi	r26, 0xF0	; 240
    8196:	b2 e4       	ldi	r27, 0x42	; 66
    8198:	8b 87       	std	Y+11, r24	; 0x0b
    819a:	9c 87       	std	Y+12, r25	; 0x0c
    819c:	ad 87       	std	Y+13, r26	; 0x0d
    819e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    81a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    81a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    81a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    81a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    81a8:	20 e0       	ldi	r18, 0x00	; 0
    81aa:	30 e0       	ldi	r19, 0x00	; 0
    81ac:	4a e7       	ldi	r20, 0x7A	; 122
    81ae:	55 e4       	ldi	r21, 0x45	; 69
    81b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    81b4:	dc 01       	movw	r26, r24
    81b6:	cb 01       	movw	r24, r22
    81b8:	8f 83       	std	Y+7, r24	; 0x07
    81ba:	98 87       	std	Y+8, r25	; 0x08
    81bc:	a9 87       	std	Y+9, r26	; 0x09
    81be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    81c0:	6f 81       	ldd	r22, Y+7	; 0x07
    81c2:	78 85       	ldd	r23, Y+8	; 0x08
    81c4:	89 85       	ldd	r24, Y+9	; 0x09
    81c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    81c8:	20 e0       	ldi	r18, 0x00	; 0
    81ca:	30 e0       	ldi	r19, 0x00	; 0
    81cc:	40 e8       	ldi	r20, 0x80	; 128
    81ce:	5f e3       	ldi	r21, 0x3F	; 63
    81d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    81d4:	88 23       	and	r24, r24
    81d6:	2c f4       	brge	.+10     	; 0x81e2 <HAL_KeyPad_KeyPadReadCharacter+0xd4>
		__ticks = 1;
    81d8:	81 e0       	ldi	r24, 0x01	; 1
    81da:	90 e0       	ldi	r25, 0x00	; 0
    81dc:	9e 83       	std	Y+6, r25	; 0x06
    81de:	8d 83       	std	Y+5, r24	; 0x05
    81e0:	3f c0       	rjmp	.+126    	; 0x8260 <HAL_KeyPad_KeyPadReadCharacter+0x152>
	else if (__tmp > 65535)
    81e2:	6f 81       	ldd	r22, Y+7	; 0x07
    81e4:	78 85       	ldd	r23, Y+8	; 0x08
    81e6:	89 85       	ldd	r24, Y+9	; 0x09
    81e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    81ea:	20 e0       	ldi	r18, 0x00	; 0
    81ec:	3f ef       	ldi	r19, 0xFF	; 255
    81ee:	4f e7       	ldi	r20, 0x7F	; 127
    81f0:	57 e4       	ldi	r21, 0x47	; 71
    81f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    81f6:	18 16       	cp	r1, r24
    81f8:	4c f5       	brge	.+82     	; 0x824c <HAL_KeyPad_KeyPadReadCharacter+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    81fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    81fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    81fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    8200:	9e 85       	ldd	r25, Y+14	; 0x0e
    8202:	20 e0       	ldi	r18, 0x00	; 0
    8204:	30 e0       	ldi	r19, 0x00	; 0
    8206:	40 e2       	ldi	r20, 0x20	; 32
    8208:	51 e4       	ldi	r21, 0x41	; 65
    820a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    820e:	dc 01       	movw	r26, r24
    8210:	cb 01       	movw	r24, r22
    8212:	bc 01       	movw	r22, r24
    8214:	cd 01       	movw	r24, r26
    8216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    821a:	dc 01       	movw	r26, r24
    821c:	cb 01       	movw	r24, r22
    821e:	9e 83       	std	Y+6, r25	; 0x06
    8220:	8d 83       	std	Y+5, r24	; 0x05
    8222:	0f c0       	rjmp	.+30     	; 0x8242 <HAL_KeyPad_KeyPadReadCharacter+0x134>
    8224:	80 e9       	ldi	r24, 0x90	; 144
    8226:	91 e0       	ldi	r25, 0x01	; 1
    8228:	9c 83       	std	Y+4, r25	; 0x04
    822a:	8b 83       	std	Y+3, r24	; 0x03
    822c:	8b 81       	ldd	r24, Y+3	; 0x03
    822e:	9c 81       	ldd	r25, Y+4	; 0x04
    8230:	01 97       	sbiw	r24, 0x01	; 1
    8232:	f1 f7       	brne	.-4      	; 0x8230 <HAL_KeyPad_KeyPadReadCharacter+0x122>
    8234:	9c 83       	std	Y+4, r25	; 0x04
    8236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8238:	8d 81       	ldd	r24, Y+5	; 0x05
    823a:	9e 81       	ldd	r25, Y+6	; 0x06
    823c:	01 97       	sbiw	r24, 0x01	; 1
    823e:	9e 83       	std	Y+6, r25	; 0x06
    8240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8242:	8d 81       	ldd	r24, Y+5	; 0x05
    8244:	9e 81       	ldd	r25, Y+6	; 0x06
    8246:	00 97       	sbiw	r24, 0x00	; 0
    8248:	69 f7       	brne	.-38     	; 0x8224 <HAL_KeyPad_KeyPadReadCharacter+0x116>
    824a:	25 c0       	rjmp	.+74     	; 0x8296 <HAL_KeyPad_KeyPadReadCharacter+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    824c:	6f 81       	ldd	r22, Y+7	; 0x07
    824e:	78 85       	ldd	r23, Y+8	; 0x08
    8250:	89 85       	ldd	r24, Y+9	; 0x09
    8252:	9a 85       	ldd	r25, Y+10	; 0x0a
    8254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8258:	dc 01       	movw	r26, r24
    825a:	cb 01       	movw	r24, r22
    825c:	9e 83       	std	Y+6, r25	; 0x06
    825e:	8d 83       	std	Y+5, r24	; 0x05
    8260:	8d 81       	ldd	r24, Y+5	; 0x05
    8262:	9e 81       	ldd	r25, Y+6	; 0x06
    8264:	9a 83       	std	Y+2, r25	; 0x02
    8266:	89 83       	std	Y+1, r24	; 0x01
    8268:	89 81       	ldd	r24, Y+1	; 0x01
    826a:	9a 81       	ldd	r25, Y+2	; 0x02
    826c:	01 97       	sbiw	r24, 0x01	; 1
    826e:	f1 f7       	brne	.-4      	; 0x826c <HAL_KeyPad_KeyPadReadCharacter+0x15e>
    8270:	9a 83       	std	Y+2, r25	; 0x02
    8272:	89 83       	std	Y+1, r24	; 0x01
    8274:	10 c0       	rjmp	.+32     	; 0x8296 <HAL_KeyPad_KeyPadReadCharacter+0x188>
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
    8276:	8b 89       	ldd	r24, Y+19	; 0x13
    8278:	9c 89       	ldd	r25, Y+20	; 0x14
    827a:	9c 01       	movw	r18, r24
    827c:	2c 5f       	subi	r18, 0xFC	; 252
    827e:	3f 4f       	sbci	r19, 0xFF	; 255
    8280:	8f 85       	ldd	r24, Y+15	; 0x0f
    8282:	88 2f       	mov	r24, r24
    8284:	90 e0       	ldi	r25, 0x00	; 0
    8286:	82 0f       	add	r24, r18
    8288:	93 1f       	adc	r25, r19
    828a:	9e 01       	movw	r18, r28
    828c:	2e 5e       	subi	r18, 0xEE	; 238
    828e:	3f 4f       	sbci	r19, 0xFF	; 255
    8290:	b9 01       	movw	r22, r18
    8292:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    8296:	8a 89       	ldd	r24, Y+18	; 0x12
    8298:	81 30       	cpi	r24, 0x01	; 1
    829a:	69 f3       	breq	.-38     	; 0x8276 <HAL_KeyPad_KeyPadReadCharacter+0x168>
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    829c:	88 89       	ldd	r24, Y+16	; 0x10
    829e:	48 2f       	mov	r20, r24
    82a0:	50 e0       	ldi	r21, 0x00	; 0
    82a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    82a4:	28 2f       	mov	r18, r24
    82a6:	30 e0       	ldi	r19, 0x00	; 0
    82a8:	ca 01       	movw	r24, r20
    82aa:	88 0f       	add	r24, r24
    82ac:	99 1f       	adc	r25, r25
    82ae:	88 0f       	add	r24, r24
    82b0:	99 1f       	adc	r25, r25
    82b2:	82 0f       	add	r24, r18
    82b4:	93 1f       	adc	r25, r19
    82b6:	fc 01       	movw	r30, r24
    82b8:	e6 56       	subi	r30, 0x66	; 102
    82ba:	fe 4f       	sbci	r31, 0xFE	; 254
    82bc:	80 81       	ld	r24, Z
    82be:	ed 89       	ldd	r30, Y+21	; 0x15
    82c0:	fe 89       	ldd	r31, Y+22	; 0x16
    82c2:	80 83       	st	Z, r24
    82c4:	07 c0       	rjmp	.+14     	; 0x82d4 <HAL_KeyPad_KeyPadReadCharacter+0x1c6>
}
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    82c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    82c8:	8f 5f       	subi	r24, 0xFF	; 255
    82ca:	8f 87       	std	Y+15, r24	; 0x0f
    82cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    82ce:	84 30       	cpi	r24, 0x04	; 4
    82d0:	08 f4       	brcc	.+2      	; 0x82d4 <HAL_KeyPad_KeyPadReadCharacter+0x1c6>
    82d2:	44 cf       	rjmp	.-376    	; 0x815c <HAL_KeyPad_KeyPadReadCharacter+0x4e>
	EXT_Interrupt_EXTINT0_CallBack();
}

ISR(INT1_vect)
{
	EXT_Interrupt_EXTINT1_CallBack();
    82d4:	1f 86       	std	Y+15, r1	; 0x0f
}
    82d6:	8b 89       	ldd	r24, Y+19	; 0x13
    82d8:	9c 89       	ldd	r25, Y+20	; 0x14
    82da:	9c 01       	movw	r18, r24
    82dc:	88 89       	ldd	r24, Y+16	; 0x10
    82de:	88 2f       	mov	r24, r24
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	82 0f       	add	r24, r18
    82e4:	93 1f       	adc	r25, r19
    82e6:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
    82ea:	88 89       	ldd	r24, Y+16	; 0x10
    82ec:	8f 5f       	subi	r24, 0xFF	; 255
    82ee:	88 8b       	std	Y+16, r24	; 0x10
    82f0:	88 89       	ldd	r24, Y+16	; 0x10
    82f2:	84 30       	cpi	r24, 0x04	; 4
    82f4:	08 f4       	brcc	.+2      	; 0x82f8 <HAL_KeyPad_KeyPadReadCharacter+0x1ea>
    82f6:	21 cf       	rjmp	.-446    	; 0x813a <HAL_KeyPad_KeyPadReadCharacter+0x2c>
ISR(INT1_vect)
{
	EXT_Interrupt_EXTINT1_CallBack();
}

ISR(INT2_vect)
    82f8:	89 89       	ldd	r24, Y+17	; 0x11
{
    82fa:	66 96       	adiw	r28, 0x16	; 22
    82fc:	0f b6       	in	r0, 0x3f	; 63
    82fe:	f8 94       	cli
    8300:	de bf       	out	0x3e, r29	; 62
    8302:	0f be       	out	0x3f, r0	; 63
    8304:	cd bf       	out	0x3d, r28	; 61
    8306:	cf 91       	pop	r28
    8308:	df 91       	pop	r29
    830a:	08 95       	ret

0000830c <HAL_KeyPad_KeyPadReadNumber>:
	EXT_Interrupt_EXTINT2_CallBack();
}
    830c:	df 93       	push	r29
    830e:	cf 93       	push	r28
    8310:	cd b7       	in	r28, 0x3d	; 61
    8312:	de b7       	in	r29, 0x3e	; 62
    8314:	66 97       	sbiw	r28, 0x16	; 22
    8316:	0f b6       	in	r0, 0x3f	; 63
    8318:	f8 94       	cli
    831a:	de bf       	out	0x3e, r29	; 62
    831c:	0f be       	out	0x3f, r0	; 63
    831e:	cd bf       	out	0x3d, r28	; 61
    8320:	9c 8b       	std	Y+20, r25	; 0x14
    8322:	8b 8b       	std	Y+19, r24	; 0x13
    8324:	7e 8b       	std	Y+22, r23	; 0x16
    8326:	6d 8b       	std	Y+21, r22	; 0x15
    8328:	19 8a       	std	Y+17, r1	; 0x11
    832a:	18 8a       	std	Y+16, r1	; 0x10
    832c:	1f 86       	std	Y+15, r1	; 0x0f
    832e:	1a 8a       	std	Y+18, r1	; 0x12
    8330:	ed 89       	ldd	r30, Y+21	; 0x15
    8332:	fe 89       	ldd	r31, Y+22	; 0x16
    8334:	10 82       	st	Z, r1
    8336:	dc c0       	rjmp	.+440    	; 0x84f0 <HAL_KeyPad_KeyPadReadNumber+0x1e4>
    8338:	8b 89       	ldd	r24, Y+19	; 0x13
    833a:	9c 89       	ldd	r25, Y+20	; 0x14
    833c:	9c 01       	movw	r18, r24
    833e:	88 89       	ldd	r24, Y+16	; 0x10
    8340:	88 2f       	mov	r24, r24
    8342:	90 e0       	ldi	r25, 0x00	; 0
    8344:	82 0f       	add	r24, r18
    8346:	93 1f       	adc	r25, r19
    8348:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
    834c:	88 23       	and	r24, r24
    834e:	11 f4       	brne	.+4      	; 0x8354 <HAL_KeyPad_KeyPadReadNumber+0x48>
    8350:	19 8a       	std	Y+17, r1	; 0x11
    8352:	d2 c0       	rjmp	.+420    	; 0x84f8 <HAL_KeyPad_KeyPadReadNumber+0x1ec>
    8354:	81 e0       	ldi	r24, 0x01	; 1
    8356:	89 8b       	std	Y+17, r24	; 0x11
    8358:	b9 c0       	rjmp	.+370    	; 0x84cc <HAL_KeyPad_KeyPadReadNumber+0x1c0>
    835a:	8b 89       	ldd	r24, Y+19	; 0x13
    835c:	9c 89       	ldd	r25, Y+20	; 0x14
    835e:	9c 01       	movw	r18, r24
    8360:	2c 5f       	subi	r18, 0xFC	; 252
    8362:	3f 4f       	sbci	r19, 0xFF	; 255
    8364:	8f 85       	ldd	r24, Y+15	; 0x0f
    8366:	88 2f       	mov	r24, r24
    8368:	90 e0       	ldi	r25, 0x00	; 0
    836a:	82 0f       	add	r24, r18
    836c:	93 1f       	adc	r25, r19
    836e:	9e 01       	movw	r18, r28
    8370:	2e 5e       	subi	r18, 0xEE	; 238
    8372:	3f 4f       	sbci	r19, 0xFF	; 255
    8374:	b9 01       	movw	r22, r18
    8376:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    837a:	88 23       	and	r24, r24
    837c:	11 f4       	brne	.+4      	; 0x8382 <HAL_KeyPad_KeyPadReadNumber+0x76>
    837e:	19 8a       	std	Y+17, r1	; 0x11
    8380:	a9 c0       	rjmp	.+338    	; 0x84d4 <HAL_KeyPad_KeyPadReadNumber+0x1c8>
    8382:	81 e0       	ldi	r24, 0x01	; 1
    8384:	89 8b       	std	Y+17, r24	; 0x11
    8386:	8a 89       	ldd	r24, Y+18	; 0x12
    8388:	81 30       	cpi	r24, 0x01	; 1
    838a:	09 f0       	breq	.+2      	; 0x838e <HAL_KeyPad_KeyPadReadNumber+0x82>
    838c:	9c c0       	rjmp	.+312    	; 0x84c6 <HAL_KeyPad_KeyPadReadNumber+0x1ba>
    838e:	80 e0       	ldi	r24, 0x00	; 0
    8390:	90 e0       	ldi	r25, 0x00	; 0
    8392:	a0 ef       	ldi	r26, 0xF0	; 240
    8394:	b2 e4       	ldi	r27, 0x42	; 66
    8396:	8b 87       	std	Y+11, r24	; 0x0b
    8398:	9c 87       	std	Y+12, r25	; 0x0c
    839a:	ad 87       	std	Y+13, r26	; 0x0d
    839c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    839e:	6b 85       	ldd	r22, Y+11	; 0x0b
    83a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    83a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    83a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    83a6:	20 e0       	ldi	r18, 0x00	; 0
    83a8:	30 e0       	ldi	r19, 0x00	; 0
    83aa:	4a e7       	ldi	r20, 0x7A	; 122
    83ac:	55 e4       	ldi	r21, 0x45	; 69
    83ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    83b2:	dc 01       	movw	r26, r24
    83b4:	cb 01       	movw	r24, r22
    83b6:	8f 83       	std	Y+7, r24	; 0x07
    83b8:	98 87       	std	Y+8, r25	; 0x08
    83ba:	a9 87       	std	Y+9, r26	; 0x09
    83bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    83be:	6f 81       	ldd	r22, Y+7	; 0x07
    83c0:	78 85       	ldd	r23, Y+8	; 0x08
    83c2:	89 85       	ldd	r24, Y+9	; 0x09
    83c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    83c6:	20 e0       	ldi	r18, 0x00	; 0
    83c8:	30 e0       	ldi	r19, 0x00	; 0
    83ca:	40 e8       	ldi	r20, 0x80	; 128
    83cc:	5f e3       	ldi	r21, 0x3F	; 63
    83ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    83d2:	88 23       	and	r24, r24
    83d4:	2c f4       	brge	.+10     	; 0x83e0 <HAL_KeyPad_KeyPadReadNumber+0xd4>
		__ticks = 1;
    83d6:	81 e0       	ldi	r24, 0x01	; 1
    83d8:	90 e0       	ldi	r25, 0x00	; 0
    83da:	9e 83       	std	Y+6, r25	; 0x06
    83dc:	8d 83       	std	Y+5, r24	; 0x05
    83de:	3f c0       	rjmp	.+126    	; 0x845e <HAL_KeyPad_KeyPadReadNumber+0x152>
	else if (__tmp > 65535)
    83e0:	6f 81       	ldd	r22, Y+7	; 0x07
    83e2:	78 85       	ldd	r23, Y+8	; 0x08
    83e4:	89 85       	ldd	r24, Y+9	; 0x09
    83e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    83e8:	20 e0       	ldi	r18, 0x00	; 0
    83ea:	3f ef       	ldi	r19, 0xFF	; 255
    83ec:	4f e7       	ldi	r20, 0x7F	; 127
    83ee:	57 e4       	ldi	r21, 0x47	; 71
    83f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    83f4:	18 16       	cp	r1, r24
    83f6:	4c f5       	brge	.+82     	; 0x844a <HAL_KeyPad_KeyPadReadNumber+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    83f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    83fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    83fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    83fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    8400:	20 e0       	ldi	r18, 0x00	; 0
    8402:	30 e0       	ldi	r19, 0x00	; 0
    8404:	40 e2       	ldi	r20, 0x20	; 32
    8406:	51 e4       	ldi	r21, 0x41	; 65
    8408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    840c:	dc 01       	movw	r26, r24
    840e:	cb 01       	movw	r24, r22
    8410:	bc 01       	movw	r22, r24
    8412:	cd 01       	movw	r24, r26
    8414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8418:	dc 01       	movw	r26, r24
    841a:	cb 01       	movw	r24, r22
    841c:	9e 83       	std	Y+6, r25	; 0x06
    841e:	8d 83       	std	Y+5, r24	; 0x05
    8420:	0f c0       	rjmp	.+30     	; 0x8440 <HAL_KeyPad_KeyPadReadNumber+0x134>
    8422:	80 e9       	ldi	r24, 0x90	; 144
    8424:	91 e0       	ldi	r25, 0x01	; 1
    8426:	9c 83       	std	Y+4, r25	; 0x04
    8428:	8b 83       	std	Y+3, r24	; 0x03
    842a:	8b 81       	ldd	r24, Y+3	; 0x03
    842c:	9c 81       	ldd	r25, Y+4	; 0x04
    842e:	01 97       	sbiw	r24, 0x01	; 1
    8430:	f1 f7       	brne	.-4      	; 0x842e <HAL_KeyPad_KeyPadReadNumber+0x122>
    8432:	9c 83       	std	Y+4, r25	; 0x04
    8434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8436:	8d 81       	ldd	r24, Y+5	; 0x05
    8438:	9e 81       	ldd	r25, Y+6	; 0x06
    843a:	01 97       	sbiw	r24, 0x01	; 1
    843c:	9e 83       	std	Y+6, r25	; 0x06
    843e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8440:	8d 81       	ldd	r24, Y+5	; 0x05
    8442:	9e 81       	ldd	r25, Y+6	; 0x06
    8444:	00 97       	sbiw	r24, 0x00	; 0
    8446:	69 f7       	brne	.-38     	; 0x8422 <HAL_KeyPad_KeyPadReadNumber+0x116>
    8448:	25 c0       	rjmp	.+74     	; 0x8494 <HAL_KeyPad_KeyPadReadNumber+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    844a:	6f 81       	ldd	r22, Y+7	; 0x07
    844c:	78 85       	ldd	r23, Y+8	; 0x08
    844e:	89 85       	ldd	r24, Y+9	; 0x09
    8450:	9a 85       	ldd	r25, Y+10	; 0x0a
    8452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8456:	dc 01       	movw	r26, r24
    8458:	cb 01       	movw	r24, r22
    845a:	9e 83       	std	Y+6, r25	; 0x06
    845c:	8d 83       	std	Y+5, r24	; 0x05
    845e:	8d 81       	ldd	r24, Y+5	; 0x05
    8460:	9e 81       	ldd	r25, Y+6	; 0x06
    8462:	9a 83       	std	Y+2, r25	; 0x02
    8464:	89 83       	std	Y+1, r24	; 0x01
    8466:	89 81       	ldd	r24, Y+1	; 0x01
    8468:	9a 81       	ldd	r25, Y+2	; 0x02
    846a:	01 97       	sbiw	r24, 0x01	; 1
    846c:	f1 f7       	brne	.-4      	; 0x846a <HAL_KeyPad_KeyPadReadNumber+0x15e>
    846e:	9a 83       	std	Y+2, r25	; 0x02
    8470:	89 83       	std	Y+1, r24	; 0x01
    8472:	10 c0       	rjmp	.+32     	; 0x8494 <HAL_KeyPad_KeyPadReadNumber+0x188>
    8474:	8b 89       	ldd	r24, Y+19	; 0x13
    8476:	9c 89       	ldd	r25, Y+20	; 0x14
    8478:	9c 01       	movw	r18, r24
    847a:	2c 5f       	subi	r18, 0xFC	; 252
    847c:	3f 4f       	sbci	r19, 0xFF	; 255
    847e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8480:	88 2f       	mov	r24, r24
    8482:	90 e0       	ldi	r25, 0x00	; 0
    8484:	82 0f       	add	r24, r18
    8486:	93 1f       	adc	r25, r19
    8488:	9e 01       	movw	r18, r28
    848a:	2e 5e       	subi	r18, 0xEE	; 238
    848c:	3f 4f       	sbci	r19, 0xFF	; 255
    848e:	b9 01       	movw	r22, r18
    8490:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <MCAL_DIO_ReadPinValue>
    8494:	8a 89       	ldd	r24, Y+18	; 0x12
    8496:	81 30       	cpi	r24, 0x01	; 1
    8498:	69 f3       	breq	.-38     	; 0x8474 <HAL_KeyPad_KeyPadReadNumber+0x168>
    849a:	88 89       	ldd	r24, Y+16	; 0x10
    849c:	48 2f       	mov	r20, r24
    849e:	50 e0       	ldi	r21, 0x00	; 0
    84a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    84a2:	28 2f       	mov	r18, r24
    84a4:	30 e0       	ldi	r19, 0x00	; 0
    84a6:	ca 01       	movw	r24, r20
    84a8:	88 0f       	add	r24, r24
    84aa:	99 1f       	adc	r25, r25
    84ac:	88 0f       	add	r24, r24
    84ae:	99 1f       	adc	r25, r25
    84b0:	82 0f       	add	r24, r18
    84b2:	93 1f       	adc	r25, r19
    84b4:	fc 01       	movw	r30, r24
    84b6:	e6 56       	subi	r30, 0x66	; 102
    84b8:	fe 4f       	sbci	r31, 0xFE	; 254
    84ba:	80 81       	ld	r24, Z
    84bc:	80 53       	subi	r24, 0x30	; 48
    84be:	ed 89       	ldd	r30, Y+21	; 0x15
    84c0:	fe 89       	ldd	r31, Y+22	; 0x16
    84c2:	80 83       	st	Z, r24
    84c4:	07 c0       	rjmp	.+14     	; 0x84d4 <HAL_KeyPad_KeyPadReadNumber+0x1c8>
    84c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    84c8:	8f 5f       	subi	r24, 0xFF	; 255
    84ca:	8f 87       	std	Y+15, r24	; 0x0f
    84cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    84ce:	84 30       	cpi	r24, 0x04	; 4
    84d0:	08 f4       	brcc	.+2      	; 0x84d4 <HAL_KeyPad_KeyPadReadNumber+0x1c8>
    84d2:	43 cf       	rjmp	.-378    	; 0x835a <HAL_KeyPad_KeyPadReadNumber+0x4e>
    84d4:	1f 86       	std	Y+15, r1	; 0x0f
    84d6:	8b 89       	ldd	r24, Y+19	; 0x13
    84d8:	9c 89       	ldd	r25, Y+20	; 0x14
    84da:	9c 01       	movw	r18, r24
    84dc:	88 89       	ldd	r24, Y+16	; 0x10
    84de:	88 2f       	mov	r24, r24
    84e0:	90 e0       	ldi	r25, 0x00	; 0
    84e2:	82 0f       	add	r24, r18
    84e4:	93 1f       	adc	r25, r19
    84e6:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <MCAL_DIO_TogglePinValue>
    84ea:	88 89       	ldd	r24, Y+16	; 0x10
    84ec:	8f 5f       	subi	r24, 0xFF	; 255
    84ee:	88 8b       	std	Y+16, r24	; 0x10
    84f0:	88 89       	ldd	r24, Y+16	; 0x10
    84f2:	84 30       	cpi	r24, 0x04	; 4
    84f4:	08 f4       	brcc	.+2      	; 0x84f8 <HAL_KeyPad_KeyPadReadNumber+0x1ec>
    84f6:	20 cf       	rjmp	.-448    	; 0x8338 <HAL_KeyPad_KeyPadReadNumber+0x2c>
    84f8:	89 89       	ldd	r24, Y+17	; 0x11
    84fa:	66 96       	adiw	r28, 0x16	; 22
    84fc:	0f b6       	in	r0, 0x3f	; 63
    84fe:	f8 94       	cli
    8500:	de bf       	out	0x3e, r29	; 62
    8502:	0f be       	out	0x3f, r0	; 63
    8504:	cd bf       	out	0x3d, r28	; 61
    8506:	cf 91       	pop	r28
    8508:	df 91       	pop	r29
    850a:	08 95       	ret

0000850c <HAL_Buzzer_BuzzerInit>:
#include <avr/interrupt.h>

#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
#include "EXT_Interrupt_Private.h"

    850c:	df 93       	push	r29
    850e:	cf 93       	push	r28
    8510:	00 d0       	rcall	.+0      	; 0x8512 <HAL_Buzzer_BuzzerInit+0x6>
    8512:	00 d0       	rcall	.+0      	; 0x8514 <HAL_Buzzer_BuzzerInit+0x8>
    8514:	cd b7       	in	r28, 0x3d	; 61
    8516:	de b7       	in	r29, 0x3e	; 62
    8518:	9c 83       	std	Y+4, r25	; 0x04
    851a:	8b 83       	std	Y+3, r24	; 0x03
void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
    851c:	19 82       	std	Y+1, r1	; 0x01
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;


/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    851e:	eb 81       	ldd	r30, Y+3	; 0x03
    8520:	fc 81       	ldd	r31, Y+4	; 0x04
    8522:	80 81       	ld	r24, Z
    8524:	87 70       	andi	r24, 0x07	; 7
    8526:	28 2f       	mov	r18, r24
    8528:	23 70       	andi	r18, 0x03	; 3
    852a:	eb 81       	ldd	r30, Y+3	; 0x03
    852c:	fc 81       	ldd	r31, Y+4	; 0x04
    852e:	80 81       	ld	r24, Z
    8530:	98 2f       	mov	r25, r24
    8532:	96 95       	lsr	r25
    8534:	96 95       	lsr	r25
    8536:	96 95       	lsr	r25
    8538:	97 70       	andi	r25, 0x07	; 7
    853a:	1a 82       	std	Y+2, r1	; 0x02
    853c:	23 70       	andi	r18, 0x03	; 3
    853e:	8a 81       	ldd	r24, Y+2	; 0x02
    8540:	8c 7f       	andi	r24, 0xFC	; 252
    8542:	82 2b       	or	r24, r18
    8544:	8a 83       	std	Y+2, r24	; 0x02
    8546:	89 2f       	mov	r24, r25
    8548:	87 70       	andi	r24, 0x07	; 7
    854a:	98 2f       	mov	r25, r24
    854c:	99 0f       	add	r25, r25
    854e:	99 0f       	add	r25, r25
    8550:	8a 81       	ldd	r24, Y+2	; 0x02
    8552:	83 7e       	andi	r24, 0xE3	; 227
    8554:	89 2b       	or	r24, r25
    8556:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
    8558:	ce 01       	movw	r24, r28
    855a:	02 96       	adiw	r24, 0x02	; 2
    855c:	0e 94 0f 20 	call	0x401e	; 0x401e <MCAL_DIO_SetPinDirection>
{
    8560:	89 81       	ldd	r24, Y+1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    8562:	0f 90       	pop	r0
    8564:	0f 90       	pop	r0
    8566:	0f 90       	pop	r0
    8568:	0f 90       	pop	r0
    856a:	cf 91       	pop	r28
    856c:	df 91       	pop	r29
    856e:	08 95       	ret

00008570 <HAL_Buzzer_BuzzerOn>:
	if(Copy_EXTIntStatus == INT_DISABLE)
    {
    8570:	df 93       	push	r29
    8572:	cf 93       	push	r28
    8574:	00 d0       	rcall	.+0      	; 0x8576 <HAL_Buzzer_BuzzerOn+0x6>
    8576:	00 d0       	rcall	.+0      	; 0x8578 <HAL_Buzzer_BuzzerOn+0x8>
    8578:	cd b7       	in	r28, 0x3d	; 61
    857a:	de b7       	in	r29, 0x3e	; 62
    857c:	9c 83       	std	Y+4, r25	; 0x04
    857e:	8b 83       	std	Y+3, r24	; 0x03
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    8580:	19 82       	std	Y+1, r1	; 0x01
		Local_ErrorStatus = E_OK;
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
	{
		switch(Copy_EXTInt.INTNum)
    8582:	eb 81       	ldd	r30, Y+3	; 0x03
    8584:	fc 81       	ldd	r31, Y+4	; 0x04
    8586:	80 81       	ld	r24, Z
    8588:	87 70       	andi	r24, 0x07	; 7
    858a:	28 2f       	mov	r18, r24
    858c:	23 70       	andi	r18, 0x03	; 3
    858e:	eb 81       	ldd	r30, Y+3	; 0x03
    8590:	fc 81       	ldd	r31, Y+4	; 0x04
    8592:	80 81       	ld	r24, Z
    8594:	98 2f       	mov	r25, r24
    8596:	96 95       	lsr	r25
    8598:	96 95       	lsr	r25
    859a:	96 95       	lsr	r25
    859c:	97 70       	andi	r25, 0x07	; 7
    859e:	1a 82       	std	Y+2, r1	; 0x02
    85a0:	23 70       	andi	r18, 0x03	; 3
    85a2:	8a 81       	ldd	r24, Y+2	; 0x02
    85a4:	8c 7f       	andi	r24, 0xFC	; 252
    85a6:	82 2b       	or	r24, r18
    85a8:	8a 83       	std	Y+2, r24	; 0x02
    85aa:	89 2f       	mov	r24, r25
    85ac:	87 70       	andi	r24, 0x07	; 7
    85ae:	98 2f       	mov	r25, r24
    85b0:	99 0f       	add	r25, r25
    85b2:	99 0f       	add	r25, r25
    85b4:	8a 81       	ldd	r24, Y+2	; 0x02
    85b6:	83 7e       	andi	r24, 0xE3	; 227
    85b8:	89 2b       	or	r24, r25
    85ba:	8a 83       	std	Y+2, r24	; 0x02
	    {
    85bc:	ce 01       	movw	r24, r28
    85be:	02 96       	adiw	r24, 0x02	; 2
    85c0:	61 e0       	ldi	r22, 0x01	; 1
    85c2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    case EXTINT0:
    85c6:	89 81       	ldd	r24, Y+1	; 0x01
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
    85c8:	0f 90       	pop	r0
    85ca:	0f 90       	pop	r0
    85cc:	0f 90       	pop	r0
    85ce:	0f 90       	pop	r0
    85d0:	cf 91       	pop	r28
    85d2:	df 91       	pop	r29
    85d4:	08 95       	ret

000085d6 <HAL_Buzzer_BuzzerOff>:
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
    85d6:	df 93       	push	r29
    85d8:	cf 93       	push	r28
    85da:	00 d0       	rcall	.+0      	; 0x85dc <HAL_Buzzer_BuzzerOff+0x6>
    85dc:	00 d0       	rcall	.+0      	; 0x85de <HAL_Buzzer_BuzzerOff+0x8>
    85de:	cd b7       	in	r28, 0x3d	; 61
    85e0:	de b7       	in	r29, 0x3e	; 62
    85e2:	9c 83       	std	Y+4, r25	; 0x04
    85e4:	8b 83       	std	Y+3, r24	; 0x03
            Local_ErrorStatus = E_OK;
    85e6:	19 82       	std	Y+1, r1	; 0x01
	    	break;
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT1);
    85e8:	eb 81       	ldd	r30, Y+3	; 0x03
    85ea:	fc 81       	ldd	r31, Y+4	; 0x04
    85ec:	80 81       	ld	r24, Z
    85ee:	87 70       	andi	r24, 0x07	; 7
    85f0:	28 2f       	mov	r18, r24
    85f2:	23 70       	andi	r18, 0x03	; 3
    85f4:	eb 81       	ldd	r30, Y+3	; 0x03
    85f6:	fc 81       	ldd	r31, Y+4	; 0x04
    85f8:	80 81       	ld	r24, Z
    85fa:	98 2f       	mov	r25, r24
    85fc:	96 95       	lsr	r25
    85fe:	96 95       	lsr	r25
    8600:	96 95       	lsr	r25
    8602:	97 70       	andi	r25, 0x07	; 7
    8604:	1a 82       	std	Y+2, r1	; 0x02
    8606:	23 70       	andi	r18, 0x03	; 3
    8608:	8a 81       	ldd	r24, Y+2	; 0x02
    860a:	8c 7f       	andi	r24, 0xFC	; 252
    860c:	82 2b       	or	r24, r18
    860e:	8a 83       	std	Y+2, r24	; 0x02
    8610:	89 2f       	mov	r24, r25
    8612:	87 70       	andi	r24, 0x07	; 7
    8614:	98 2f       	mov	r25, r24
    8616:	99 0f       	add	r25, r25
    8618:	99 0f       	add	r25, r25
    861a:	8a 81       	ldd	r24, Y+2	; 0x02
    861c:	83 7e       	andi	r24, 0xE3	; 227
    861e:	89 2b       	or	r24, r25
    8620:	8a 83       	std	Y+2, r24	; 0x02
	    	Local_ErrorStatus = E_OK;
    8622:	ce 01       	movw	r24, r28
    8624:	02 96       	adiw	r24, 0x02	; 2
    8626:	60 e0       	ldi	r22, 0x00	; 0
    8628:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <MCAL_DIO_SetPinValue>
	    	break;
    862c:	89 81       	ldd	r24, Y+1	; 0x01
	    case EXTINT2:
    862e:	0f 90       	pop	r0
    8630:	0f 90       	pop	r0
    8632:	0f 90       	pop	r0
    8634:	0f 90       	pop	r0
    8636:	cf 91       	pop	r28
    8638:	df 91       	pop	r29
    863a:	08 95       	ret

0000863c <APP_EXTINT0_ISR>:
 */

#include <avr/interrupt.h>

#include "EXT_Interrupt_Interface.h"
#include "EXT_Interrupt_Config.h"
    863c:	df 93       	push	r29
    863e:	cf 93       	push	r28
    8640:	cd b7       	in	r28, 0x3d	; 61
    8642:	de b7       	in	r29, 0x3e	; 62
#include "EXT_Interrupt_Private.h"

    8644:	cf 91       	pop	r28
    8646:	df 91       	pop	r29
    8648:	08 95       	ret

0000864a <APP_EXTINT1_ISR>:
void (*EXT_Interrupt_EXTINT0_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT1_CallBack)(void) = NULL_PTR;
void (*EXT_Interrupt_EXTINT2_CallBack)(void) = NULL_PTR;

    864a:	df 93       	push	r29
    864c:	cf 93       	push	r28
    864e:	cd b7       	in	r28, 0x3d	; 61
    8650:	de b7       	in	r29, 0x3e	; 62

/*Disable or Enable EXT INT and Set the configured triggering event(IOC, Falling, ....etc)*/
    8652:	cf 91       	pop	r28
    8654:	df 91       	pop	r29
    8656:	08 95       	ret

00008658 <APP_EXTINT2_ISR>:
Std_ReturnType MCAL_EXT_Interrupt_EXTIntStatus(const EXTINT_Config_t Copy_EXTInt, const uint8 Copy_EXTIntStatus)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	if(Copy_EXTIntStatus == INT_DISABLE)
    8658:	df 93       	push	r29
    865a:	cf 93       	push	r28
    865c:	cd b7       	in	r28, 0x3d	; 61
    865e:	de b7       	in	r29, 0x3e	; 62
    {
		CLEAR_BIT(GICR_REG, Copy_EXTInt.INTNum);
    8660:	cf 91       	pop	r28
    8662:	df 91       	pop	r29
    8664:	08 95       	ret

00008666 <APP_ADCINT_ISR>:
		Local_ErrorStatus = E_OK;
    }
	else if(Copy_EXTIntStatus == INT_ENABLE)
	{
    8666:	df 93       	push	r29
    8668:	cf 93       	push	r28
    866a:	cd b7       	in	r28, 0x3d	; 61
    866c:	de b7       	in	r29, 0x3e	; 62
		switch(Copy_EXTInt.INTNum)
	    {
    866e:	cf 91       	pop	r28
    8670:	df 91       	pop	r29
    8672:	08 95       	ret

00008674 <APP_USARTRxComplete_ISR>:
	    case EXTINT0:
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
    8674:	df 93       	push	r29
    8676:	cf 93       	push	r28
    8678:	00 d0       	rcall	.+0      	; 0x867a <APP_USARTRxComplete_ISR+0x6>
    867a:	cd b7       	in	r28, 0x3d	; 61
    867c:	de b7       	in	r29, 0x3e	; 62
            Local_ErrorStatus = E_OK;
    867e:	1a 82       	std	Y+2, r1	; 0x02
    8680:	19 82       	std	Y+1, r1	; 0x01
	    	break;
	    case EXTINT1:
	    	MCUCR_REG.ISC1_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
    8682:	ce 01       	movw	r24, r28
    8684:	01 96       	adiw	r24, 0x01	; 1
    8686:	0e 94 a2 07 	call	0xf44	; 0xf44 <MCAL_USART_USARTReceiveData>
	    	SET_BIT(GICR_REG, EXTINT1);
	    	Local_ErrorStatus = E_OK;
    868a:	0f 90       	pop	r0
    868c:	0f 90       	pop	r0
    868e:	cf 91       	pop	r28
    8690:	df 91       	pop	r29
    8692:	08 95       	ret

00008694 <APP_USARTTxComplete_ISR>:
	    	break;
	    case EXTINT2:
	    	if((Copy_EXTInt.TriggerEvent != LOW_LEVEL) || (Copy_EXTInt.TriggerEvent != IOC))
    8694:	df 93       	push	r29
    8696:	cf 93       	push	r28
    8698:	cd b7       	in	r28, 0x3d	; 61
    869a:	de b7       	in	r29, 0x3e	; 62
	    	{
	    		MCUCSR_REG.ISC2_BIT6 = ((Copy_EXTInt.TriggerEvent) & 1);
    869c:	cf 91       	pop	r28
    869e:	df 91       	pop	r29
    86a0:	08 95       	ret

000086a2 <APP_USARTTxBuffEmpty_ISR>:
	    		MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    		SET_BIT(GICR_REG, EXTINT2);
	    	    Local_ErrorStatus = E_OK;
    86a2:	df 93       	push	r29
    86a4:	cf 93       	push	r28
    86a6:	cd b7       	in	r28, 0x3d	; 61
    86a8:	de b7       	in	r29, 0x3e	; 62
	    	break;
	    default:
	    	Local_ErrorStatus = E_NOT_OK;
	}
	}
	return Local_ErrorStatus;
    86aa:	cf 91       	pop	r28
    86ac:	df 91       	pop	r29
    86ae:	08 95       	ret

000086b0 <APP_TMR0Overflow_ISR>:
}
Std_ReturnType MCAL_EXT_Interrupt_ReadEXTIntFlag(const EXTINT_Config_t Copy_EXTInt, uint8 *Copy_FlagValue)
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    86b0:	df 93       	push	r29
    86b2:	cf 93       	push	r28
    86b4:	cd b7       	in	r28, 0x3d	; 61
    86b6:	de b7       	in	r29, 0x3e	; 62
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
    86b8:	cf 91       	pop	r28
    86ba:	df 91       	pop	r29
    86bc:	08 95       	ret

000086be <APP_TMR0CompareMatch_ISR>:
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
    86be:	df 93       	push	r29
    86c0:	cf 93       	push	r28
    86c2:	cd b7       	in	r28, 0x3d	; 61
    86c4:	de b7       	in	r29, 0x3e	; 62
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    86c6:	cf 91       	pop	r28
    86c8:	df 91       	pop	r29
    86ca:	08 95       	ret

000086cc <APP_TMR1Overflow_ISR>:
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    86cc:	df 93       	push	r29
    86ce:	cf 93       	push	r28
    86d0:	cd b7       	in	r28, 0x3d	; 61
    86d2:	de b7       	in	r29, 0x3e	; 62
/*SetCallBack APIs for EXTINTx */
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    86d4:	cf 91       	pop	r28
    86d6:	df 91       	pop	r29
    86d8:	08 95       	ret

000086da <APP_TMR1CompareMatchChannel_A_ISR>:
{
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT0_CallBack = Copy_CallBackPtr;
    86da:	df 93       	push	r29
    86dc:	cf 93       	push	r28
    86de:	cd b7       	in	r28, 0x3d	; 61
    86e0:	de b7       	in	r29, 0x3e	; 62
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
    86e2:	cf 91       	pop	r28
    86e4:	df 91       	pop	r29
    86e6:	08 95       	ret

000086e8 <APP_TMR1CompareMatchChannel_B_ISR>:
}
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT1CallBack(void (*Copy_CallBackPtr)(void))
{
    86e8:	df 93       	push	r29
    86ea:	cf 93       	push	r28
    86ec:	cd b7       	in	r28, 0x3d	; 61
    86ee:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT1_CallBack = Copy_CallBackPtr;
    86f0:	cf 91       	pop	r28
    86f2:	df 91       	pop	r29
    86f4:	08 95       	ret

000086f6 <APP_TMR1CompareMatchChannel_IC_ISR>:
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    86f6:	df 93       	push	r29
    86f8:	cf 93       	push	r28
    86fa:	cd b7       	in	r28, 0x3d	; 61
    86fc:	de b7       	in	r29, 0x3e	; 62
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT2CallBack(void (*Copy_CallBackPtr)(void))
{
    86fe:	cf 91       	pop	r28
    8700:	df 91       	pop	r29
    8702:	08 95       	ret

00008704 <APP_SPI_EOT_SOR_ISR>:
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
	EXT_Interrupt_EXTINT2_CallBack = Copy_CallBackPtr;
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
    8704:	df 93       	push	r29
    8706:	cf 93       	push	r28
    8708:	cd b7       	in	r28, 0x3d	; 61
    870a:	de b7       	in	r29, 0x3e	; 62

ISR(INT0_vect)
    870c:	cf 91       	pop	r28
    870e:	df 91       	pop	r29
    8710:	08 95       	ret

00008712 <APP_APPInit>:
	*Copy_FlagValue = GET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
	Local_ErrorStatus = E_OK;
	return Local_ErrorStatus;
}
Std_ReturnType MCAL_EXT_Interrupt_ClearEXTIntFlag(const EXTINT_Config_t Copy_EXTInt)
{
    8712:	df 93       	push	r29
    8714:	cf 93       	push	r28
    8716:	0f 92       	push	r0
    8718:	cd b7       	in	r28, 0x3d	; 61
    871a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    871c:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(GIFR_REG, Copy_EXTInt.INTNum);
    871e:	80 e7       	ldi	r24, 0x70	; 112
    8720:	91 e0       	ldi	r25, 0x01	; 1
    8722:	0e 94 5f 31 	call	0x62be	; 0x62be <HAL_LED_LEDConfig>
	Local_ErrorStatus = E_OK;
    8726:	81 e7       	ldi	r24, 0x71	; 113
    8728:	91 e0       	ldi	r25, 0x01	; 1
    872a:	0e 94 5f 31 	call	0x62be	; 0x62be <HAL_LED_LEDConfig>
	return Local_ErrorStatus;
    872e:	82 e7       	ldi	r24, 0x72	; 114
    8730:	91 e0       	ldi	r25, 0x01	; 1
    8732:	0e 94 5f 31 	call	0x62be	; 0x62be <HAL_LED_LEDConfig>
}
    8736:	83 e7       	ldi	r24, 0x73	; 115
    8738:	91 e0       	ldi	r25, 0x01	; 1
    873a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <HAL_Push_Button_BtnConfig>
/*SetCallBack APIs for EXTINTx */
    873e:	88 e6       	ldi	r24, 0x68	; 104
    8740:	91 e0       	ldi	r25, 0x01	; 1
    8742:	0e 94 1a 40 	call	0x8034	; 0x8034 <HAL_KeyPad_KeyPadInit>
Std_ReturnType MCAL_EXT_Interrupt_SetEXTINT0CallBack(void (*Copy_CallBackPtr)(void))
    8746:	81 e0       	ldi	r24, 0x01	; 1
    8748:	89 83       	std	Y+1, r24	; 0x01
{
    874a:	89 81       	ldd	r24, Y+1	; 0x01
	Std_ReturnType Local_ErrorStatus = E_NOT_OK;
    874c:	0f 90       	pop	r0
    874e:	cf 91       	pop	r28
    8750:	df 91       	pop	r29
    8752:	08 95       	ret

00008754 <main>:
	    {
	    case EXTINT0:
	    	MCUCR_REG.ISC0_BITs = Copy_EXTInt.TriggerEvent;
	    	MCAL_EXT_Interrupt_ClearEXTIntFlag(Copy_EXTInt);
	    	SET_BIT(GICR_REG, EXTINT0);
            Local_ErrorStatus = E_OK;
    8754:	df 93       	push	r29
    8756:	cf 93       	push	r28
    8758:	cd b7       	in	r28, 0x3d	; 61
    875a:	de b7       	in	r29, 0x3e	; 62
	    	break;
    875c:	84 e7       	ldi	r24, 0x74	; 116
    875e:	91 e0       	ldi	r25, 0x01	; 1
    8760:	60 e0       	ldi	r22, 0x00	; 0
    8762:	0e 94 2c 2c 	call	0x5858	; 0x5858 <HAL_SSD_SSDInit>
	    case EXTINT1:
    8766:	84 e7       	ldi	r24, 0x74	; 116
    8768:	91 e0       	ldi	r25, 0x01	; 1
    876a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <HAL_SSD_SSDDisplayNumWithSoftwareDecoder>
    876e:	ff cf       	rjmp	.-2      	; 0x876e <main+0x1a>

00008770 <__mulsi3>:
    8770:	62 9f       	mul	r22, r18
    8772:	d0 01       	movw	r26, r0
    8774:	73 9f       	mul	r23, r19
    8776:	f0 01       	movw	r30, r0
    8778:	82 9f       	mul	r24, r18
    877a:	e0 0d       	add	r30, r0
    877c:	f1 1d       	adc	r31, r1
    877e:	64 9f       	mul	r22, r20
    8780:	e0 0d       	add	r30, r0
    8782:	f1 1d       	adc	r31, r1
    8784:	92 9f       	mul	r25, r18
    8786:	f0 0d       	add	r31, r0
    8788:	83 9f       	mul	r24, r19
    878a:	f0 0d       	add	r31, r0
    878c:	74 9f       	mul	r23, r20
    878e:	f0 0d       	add	r31, r0
    8790:	65 9f       	mul	r22, r21
    8792:	f0 0d       	add	r31, r0
    8794:	99 27       	eor	r25, r25
    8796:	72 9f       	mul	r23, r18
    8798:	b0 0d       	add	r27, r0
    879a:	e1 1d       	adc	r30, r1
    879c:	f9 1f       	adc	r31, r25
    879e:	63 9f       	mul	r22, r19
    87a0:	b0 0d       	add	r27, r0
    87a2:	e1 1d       	adc	r30, r1
    87a4:	f9 1f       	adc	r31, r25
    87a6:	bd 01       	movw	r22, r26
    87a8:	cf 01       	movw	r24, r30
    87aa:	11 24       	eor	r1, r1
    87ac:	08 95       	ret

000087ae <__udivmodqi4>:
    87ae:	99 1b       	sub	r25, r25
    87b0:	79 e0       	ldi	r23, 0x09	; 9
    87b2:	04 c0       	rjmp	.+8      	; 0x87bc <__udivmodqi4_ep>

000087b4 <__udivmodqi4_loop>:
    87b4:	99 1f       	adc	r25, r25
    87b6:	96 17       	cp	r25, r22
    87b8:	08 f0       	brcs	.+2      	; 0x87bc <__udivmodqi4_ep>
    87ba:	96 1b       	sub	r25, r22

000087bc <__udivmodqi4_ep>:
    87bc:	88 1f       	adc	r24, r24
    87be:	7a 95       	dec	r23
    87c0:	c9 f7       	brne	.-14     	; 0x87b4 <__udivmodqi4_loop>
    87c2:	80 95       	com	r24
    87c4:	08 95       	ret

000087c6 <__udivmodhi4>:
    87c6:	aa 1b       	sub	r26, r26
    87c8:	bb 1b       	sub	r27, r27
    87ca:	51 e1       	ldi	r21, 0x11	; 17
    87cc:	07 c0       	rjmp	.+14     	; 0x87dc <__udivmodhi4_ep>

000087ce <__udivmodhi4_loop>:
    87ce:	aa 1f       	adc	r26, r26
    87d0:	bb 1f       	adc	r27, r27
    87d2:	a6 17       	cp	r26, r22
    87d4:	b7 07       	cpc	r27, r23
    87d6:	10 f0       	brcs	.+4      	; 0x87dc <__udivmodhi4_ep>
    87d8:	a6 1b       	sub	r26, r22
    87da:	b7 0b       	sbc	r27, r23

000087dc <__udivmodhi4_ep>:
    87dc:	88 1f       	adc	r24, r24
    87de:	99 1f       	adc	r25, r25
    87e0:	5a 95       	dec	r21
    87e2:	a9 f7       	brne	.-22     	; 0x87ce <__udivmodhi4_loop>
    87e4:	80 95       	com	r24
    87e6:	90 95       	com	r25
    87e8:	bc 01       	movw	r22, r24
    87ea:	cd 01       	movw	r24, r26
    87ec:	08 95       	ret

000087ee <__divmodhi4>:
    87ee:	97 fb       	bst	r25, 7
    87f0:	09 2e       	mov	r0, r25
    87f2:	07 26       	eor	r0, r23
    87f4:	0a d0       	rcall	.+20     	; 0x880a <__divmodhi4_neg1>
    87f6:	77 fd       	sbrc	r23, 7
    87f8:	04 d0       	rcall	.+8      	; 0x8802 <__divmodhi4_neg2>
    87fa:	e5 df       	rcall	.-54     	; 0x87c6 <__udivmodhi4>
    87fc:	06 d0       	rcall	.+12     	; 0x880a <__divmodhi4_neg1>
    87fe:	00 20       	and	r0, r0
    8800:	1a f4       	brpl	.+6      	; 0x8808 <__divmodhi4_exit>

00008802 <__divmodhi4_neg2>:
    8802:	70 95       	com	r23
    8804:	61 95       	neg	r22
    8806:	7f 4f       	sbci	r23, 0xFF	; 255

00008808 <__divmodhi4_exit>:
    8808:	08 95       	ret

0000880a <__divmodhi4_neg1>:
    880a:	f6 f7       	brtc	.-4      	; 0x8808 <__divmodhi4_exit>
    880c:	90 95       	com	r25
    880e:	81 95       	neg	r24
    8810:	9f 4f       	sbci	r25, 0xFF	; 255
    8812:	08 95       	ret

00008814 <__divmodsi4>:
    8814:	97 fb       	bst	r25, 7
    8816:	09 2e       	mov	r0, r25
    8818:	05 26       	eor	r0, r21
    881a:	0e d0       	rcall	.+28     	; 0x8838 <__divmodsi4_neg1>
    881c:	57 fd       	sbrc	r21, 7
    881e:	04 d0       	rcall	.+8      	; 0x8828 <__divmodsi4_neg2>
    8820:	14 d0       	rcall	.+40     	; 0x884a <__udivmodsi4>
    8822:	0a d0       	rcall	.+20     	; 0x8838 <__divmodsi4_neg1>
    8824:	00 1c       	adc	r0, r0
    8826:	38 f4       	brcc	.+14     	; 0x8836 <__divmodsi4_exit>

00008828 <__divmodsi4_neg2>:
    8828:	50 95       	com	r21
    882a:	40 95       	com	r20
    882c:	30 95       	com	r19
    882e:	21 95       	neg	r18
    8830:	3f 4f       	sbci	r19, 0xFF	; 255
    8832:	4f 4f       	sbci	r20, 0xFF	; 255
    8834:	5f 4f       	sbci	r21, 0xFF	; 255

00008836 <__divmodsi4_exit>:
    8836:	08 95       	ret

00008838 <__divmodsi4_neg1>:
    8838:	f6 f7       	brtc	.-4      	; 0x8836 <__divmodsi4_exit>
    883a:	90 95       	com	r25
    883c:	80 95       	com	r24
    883e:	70 95       	com	r23
    8840:	61 95       	neg	r22
    8842:	7f 4f       	sbci	r23, 0xFF	; 255
    8844:	8f 4f       	sbci	r24, 0xFF	; 255
    8846:	9f 4f       	sbci	r25, 0xFF	; 255
    8848:	08 95       	ret

0000884a <__udivmodsi4>:
    884a:	a1 e2       	ldi	r26, 0x21	; 33
    884c:	1a 2e       	mov	r1, r26
    884e:	aa 1b       	sub	r26, r26
    8850:	bb 1b       	sub	r27, r27
    8852:	fd 01       	movw	r30, r26
    8854:	0d c0       	rjmp	.+26     	; 0x8870 <__udivmodsi4_ep>

00008856 <__udivmodsi4_loop>:
    8856:	aa 1f       	adc	r26, r26
    8858:	bb 1f       	adc	r27, r27
    885a:	ee 1f       	adc	r30, r30
    885c:	ff 1f       	adc	r31, r31
    885e:	a2 17       	cp	r26, r18
    8860:	b3 07       	cpc	r27, r19
    8862:	e4 07       	cpc	r30, r20
    8864:	f5 07       	cpc	r31, r21
    8866:	20 f0       	brcs	.+8      	; 0x8870 <__udivmodsi4_ep>
    8868:	a2 1b       	sub	r26, r18
    886a:	b3 0b       	sbc	r27, r19
    886c:	e4 0b       	sbc	r30, r20
    886e:	f5 0b       	sbc	r31, r21

00008870 <__udivmodsi4_ep>:
    8870:	66 1f       	adc	r22, r22
    8872:	77 1f       	adc	r23, r23
    8874:	88 1f       	adc	r24, r24
    8876:	99 1f       	adc	r25, r25
    8878:	1a 94       	dec	r1
    887a:	69 f7       	brne	.-38     	; 0x8856 <__udivmodsi4_loop>
    887c:	60 95       	com	r22
    887e:	70 95       	com	r23
    8880:	80 95       	com	r24
    8882:	90 95       	com	r25
    8884:	9b 01       	movw	r18, r22
    8886:	ac 01       	movw	r20, r24
    8888:	bd 01       	movw	r22, r26
    888a:	cf 01       	movw	r24, r30
    888c:	08 95       	ret

0000888e <__prologue_saves__>:
    888e:	2f 92       	push	r2
    8890:	3f 92       	push	r3
    8892:	4f 92       	push	r4
    8894:	5f 92       	push	r5
    8896:	6f 92       	push	r6
    8898:	7f 92       	push	r7
    889a:	8f 92       	push	r8
    889c:	9f 92       	push	r9
    889e:	af 92       	push	r10
    88a0:	bf 92       	push	r11
    88a2:	cf 92       	push	r12
    88a4:	df 92       	push	r13
    88a6:	ef 92       	push	r14
    88a8:	ff 92       	push	r15
    88aa:	0f 93       	push	r16
    88ac:	1f 93       	push	r17
    88ae:	cf 93       	push	r28
    88b0:	df 93       	push	r29
    88b2:	cd b7       	in	r28, 0x3d	; 61
    88b4:	de b7       	in	r29, 0x3e	; 62
    88b6:	ca 1b       	sub	r28, r26
    88b8:	db 0b       	sbc	r29, r27
    88ba:	0f b6       	in	r0, 0x3f	; 63
    88bc:	f8 94       	cli
    88be:	de bf       	out	0x3e, r29	; 62
    88c0:	0f be       	out	0x3f, r0	; 63
    88c2:	cd bf       	out	0x3d, r28	; 61
    88c4:	09 94       	ijmp

000088c6 <__epilogue_restores__>:
    88c6:	2a 88       	ldd	r2, Y+18	; 0x12
    88c8:	39 88       	ldd	r3, Y+17	; 0x11
    88ca:	48 88       	ldd	r4, Y+16	; 0x10
    88cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    88ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    88d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    88d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    88d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    88d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    88d8:	b9 84       	ldd	r11, Y+9	; 0x09
    88da:	c8 84       	ldd	r12, Y+8	; 0x08
    88dc:	df 80       	ldd	r13, Y+7	; 0x07
    88de:	ee 80       	ldd	r14, Y+6	; 0x06
    88e0:	fd 80       	ldd	r15, Y+5	; 0x05
    88e2:	0c 81       	ldd	r16, Y+4	; 0x04
    88e4:	1b 81       	ldd	r17, Y+3	; 0x03
    88e6:	aa 81       	ldd	r26, Y+2	; 0x02
    88e8:	b9 81       	ldd	r27, Y+1	; 0x01
    88ea:	ce 0f       	add	r28, r30
    88ec:	d1 1d       	adc	r29, r1
    88ee:	0f b6       	in	r0, 0x3f	; 63
    88f0:	f8 94       	cli
    88f2:	de bf       	out	0x3e, r29	; 62
    88f4:	0f be       	out	0x3f, r0	; 63
    88f6:	cd bf       	out	0x3d, r28	; 61
    88f8:	ed 01       	movw	r28, r26
    88fa:	08 95       	ret

000088fc <_exit>:
    88fc:	f8 94       	cli

000088fe <__stop_program>:
    88fe:	ff cf       	rjmp	.-2      	; 0x88fe <__stop_program>
